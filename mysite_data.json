[
{
  "model": "auth.user",
  "fields": {
    "password": "pbkdf2_sha256$320000$P9DH53ueAiEvg6TZfiHpS9$EyKP5ImCh9evYQEwTTbbuAiviG0GjJNoosApzTpbn2w=",
    "last_login": "2024-09-02T15:31:32.845Z",
    "is_superuser": true,
    "username": "admin",
    "first_name": "",
    "last_name": "",
    "email": "",
    "is_staff": true,
    "is_active": true,
    "date_joined": "2024-05-23T19:29:31.159Z",
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "sessions.session",
  "pk": "5avf1tylkvy2yk6oort5wc4rzjcgbic7",
  "fields": {
    "session_data": ".eJxVjMEOwiAQRP-FsyFdClI8evcbyC4sUjWQlPZk-u9tkx70OPPezFd4XObsl8aTH6O4CRCX344wvLkcIL6wPKsMtczTSPJQ5EmbfNTIn_vp_h1kbHlf2-C0cYr7aIiMclppAsspWVAECnow2mFyNKREwV41dIb3GHjACB2JdQPUcDgE:1sRCOV:Tt0dwP-_8_JfnV9DgQ1AUfcbvsypnA7sgdosxgdX1QU",
    "expire_date": "2024-07-23T15:04:39.180Z"
  }
},
{
  "model": "sessions.session",
  "pk": "5li2u9ddczex02y51hllqbwkfj4iwqgi",
  "fields": {
    "session_data": ".eJxVjMEOwiAQRP-FsyFdClI8evcbyC4sUjWQlPZk-u9tkx70OPPezFd4XObsl8aTH6O4CRCX344wvLkcIL6wPKsMtczTSPJQ5EmbfNTIn_vp_h1kbHlf2-C0cYr7aIiMclppAsspWVAECnow2mFyNKREwV41dIb3GHjACB2JdQPUcDgE:1sBVzF:UkB_ACI0U-MUdZZbzQbWMC3Qc6CtswP6yvCW7G65kCY",
    "expire_date": "2024-06-10T08:45:45.863Z"
  }
},
{
  "model": "sessions.session",
  "pk": "6i6ztr6ik8t05ietm78nordrt8uu5jf4",
  "fields": {
    "session_data": ".eJxVjMEOwiAQRP-FsyFdClI8evcbyC4sUjWQlPZk-u9tkx70OPPezFd4XObsl8aTH6O4CRCX344wvLkcIL6wPKsMtczTSPJQ5EmbfNTIn_vp_h1kbHlf2-C0cYr7aIiMclppAsspWVAECnow2mFyNKREwV41dIb3GHjACB2JdQPUcDgE:1sJaBB:WxzybBCsuhRZCkVXozVr9WVExEtOrNagTmx1ZD4HdGI",
    "expire_date": "2024-07-02T14:51:25.023Z"
  }
},
{
  "model": "sessions.session",
  "pk": "g6apypabetkimbdk58mah7qtybghoz23",
  "fields": {
    "session_data": ".eJxVjMEOwiAQRP-FsyFdClI8evcbyC4sUjWQlPZk-u9tkx70OPPezFd4XObsl8aTH6O4CRCX344wvLkcIL6wPKsMtczTSPJQ5EmbfNTIn_vp_h1kbHlf2-C0cYr7aIiMclppAsspWVAECnow2mFyNKREwV41dIb3GHjACB2JdQPUcDgE:1sJa5z:6pMu3U-gEWYjqJ9ifsfxqw15hF8xjuyIHTYzQaKuUyk",
    "expire_date": "2024-07-02T14:46:03.870Z"
  }
},
{
  "model": "sessions.session",
  "pk": "hq5xiqdvh9si5xupnxk8xfl2xu05p7ar",
  "fields": {
    "session_data": ".eJxVjMEOwiAQRP-FsyFdClI8evcbyC4sUjWQlPZk-u9tkx70OPPezFd4XObsl8aTH6O4CRCX344wvLkcIL6wPKsMtczTSPJQ5EmbfNTIn_vp_h1kbHlf2-C0cYr7aIiMclppAsspWVAECnow2mFyNKREwV41dIb3GHjACB2JdQPUcDgE:1sCIvn:IzWV43IzKrDTcWWYgEw_1W22kp3gdrtXs9BD5ripp20",
    "expire_date": "2024-06-12T13:01:27.943Z"
  }
},
{
  "model": "sessions.session",
  "pk": "ilid075o850fwxu6k5syivybw0h44hnm",
  "fields": {
    "session_data": ".eJxVjMEOwiAQRP-FsyFdClI8evcbyC4sUjWQlPZk-u9tkx70OPPezFd4XObsl8aTH6O4CRCX344wvLkcIL6wPKsMtczTSPJQ5EmbfNTIn_vp_h1kbHlf2-C0cYr7aIiMclppAsspWVAECnow2mFyNKREwV41dIb3GHjACB2JdQPUcDgE:1sGjUo:zyqYYtxV7QPuPy3CsVIRND3I3gjpVjUVuLse0FulxJc",
    "expire_date": "2024-06-24T18:11:54.028Z"
  }
},
{
  "model": "sessions.session",
  "pk": "jsr92whm8229nw5zvm5q48e7dbbvetik",
  "fields": {
    "session_data": ".eJxVjMEOwiAQRP-FsyFdClI8evcbyC4sUjWQlPZk-u9tkx70OPPezFd4XObsl8aTH6O4CRCX344wvLkcIL6wPKsMtczTSPJQ5EmbfNTIn_vp_h1kbHlf2-C0cYr7aIiMclppAsspWVAECnow2mFyNKREwV41dIb3GHjACB2JdQPUcDgE:1sVtHb:nMwSPc_fm3ONNBRwQoqOErrsH7Y2gS4LfHak6ct1-HI",
    "expire_date": "2024-08-05T13:40:55.412Z"
  }
},
{
  "model": "sessions.session",
  "pk": "kszzvwp9ro2pr435jjyhnp24qx3axiu3",
  "fields": {
    "session_data": ".eJxVjMEOwiAQRP-FsyFdClI8evcbyC4sUjWQlPZk-u9tkx70OPPezFd4XObsl8aTH6O4CRCX344wvLkcIL6wPKsMtczTSPJQ5EmbfNTIn_vp_h1kbHlf2-C0cYr7aIiMclppAsspWVAECnow2mFyNKREwV41dIb3GHjACB2JdQPUcDgE:1sAE8M:3iTjM_fjQvAuMcpAkokqG8Ie7wW0zSReyO5InecH3WI",
    "expire_date": "2024-06-06T19:29:50.788Z"
  }
},
{
  "model": "sessions.session",
  "pk": "m0zlet8v9lkkz8wfuhqktcqfr15h1ace",
  "fields": {
    "session_data": "e30:1swmj5:afXHUHGaaLRpzS1tpIRYH9Yg9RPVbCKTqIkvZ9ZsWUA",
    "expire_date": "2024-10-18T18:08:27.701Z"
  }
},
{
  "model": "sessions.session",
  "pk": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
  "fields": {
    "session_data": ".eJxVjMEOwiAQRP-FsyFdClI8evcbyC4sUjWQlPZk-u9tkx70OPPezFd4XObsl8aTH6O4CRCX344wvLkcIL6wPKsMtczTSPJQ5EmbfNTIn_vp_h1kbHlf2-C0cYr7aIiMclppAsspWVAECnow2mFyNKREwV41dIb3GHjACB2JdQPUcDgE:1sl91h:F4Vaf22uYHTLXLvrZU2lW9OwwNAfIHWrjBGaS2shbiY",
    "expire_date": "2024-09-16T15:31:33.200Z"
  }
},
{
  "model": "sessions.session",
  "pk": "y725ch9vlhtk77qkq85pmeqzkdk1xf1v",
  "fields": {
    "session_data": ".eJxVjMEOwiAQRP-FsyFdClI8evcbyC4sUjWQlPZk-u9tkx70OPPezFd4XObsl8aTH6O4CRCX344wvLkcIL6wPKsMtczTSPJQ5EmbfNTIn_vp_h1kbHlf2-C0cYr7aIiMclppAsspWVAECnow2mFyNKREwV41dIb3GHjACB2JdQPUcDgE:1sYV7t:TPquuF1jf8M_b3_SXAOPa3tBPuEgvKsAYXrUGHCpQ54",
    "expire_date": "2024-08-12T18:29:41.258Z"
  }
},
{
  "model": "blog.category",
  "pk": 2,
  "fields": {
    "title": "VS Code",
    "slug": "vs-code"
  }
},
{
  "model": "blog.category",
  "pk": 3,
  "fields": {
    "title": "Джанго",
    "slug": "dzhango"
  }
},
{
  "model": "blog.category",
  "pk": 4,
  "fields": {
    "title": "База данных",
    "slug": "baza-dannyih"
  }
},
{
  "model": "blog.category",
  "pk": 5,
  "fields": {
    "title": "Git",
    "slug": "git"
  }
},
{
  "model": "blog.category",
  "pk": 6,
  "fields": {
    "title": "Технологии",
    "slug": "tehnologii"
  }
},
{
  "model": "blog.article",
  "pk": 3,
  "fields": {
    "title": "Топ-10 расширений VS Code для работы с Джанго",
    "slug": "top-10-rasshirenij-vs-code-dlya-rabotyi-s-dzhango",
    "content": "<p>Для комфортной разработки сайтов на Джанго удобно пользоваться редактором кода VS Code (<strong>Visual Studio Code</strong>).&nbsp;</p>\r\n\r\n<p>В данной статье разберем <strong>Топ-10 расширений VS Code</strong> для работы с Django.</p>\r\n\r\n<p>1.&nbsp;<strong>Python </strong>-&nbsp;Расширение Visual Studio Code с широкой поддержкой языка Python (для всех активно поддерживаемых версий языка: &gt;=3.7), включая такие функции, как IntelliSense (Pylance), анализ, отладку (Python Debugger), навигацию по коду, форматирование кода, рефакторинг, обозреватель переменных, обозреватель тестов и многое другое!</p>\r\n\r\n<p>2.&nbsp;<strong>Python Debugger</strong> -&nbsp;Расширение Visual Studio Code, поддерживающее отладку Python с помощью debugpy. Python Debugger обеспечивает удобство отладки, позволяя устанавливать точки останова, пошагово выполнять код, проверять переменные и выполнять другие важные задачи отладки. Расширение debugy предлагает поддержку отладки для различных типов приложений Python, включая сценарии, веб-приложения, удаленные процессы и многопоточные процессы.</p>\r\n\r\n<p><em>Примечание</em>:</p>\r\n\r\n<p>Расширение Python предлагает расширение отладчика Python в качестве дополнительной установки, включая его в процессе установки.<br />\r\nЭто расширение поддерживается для всех активно поддерживаемых версий языка Python (т. е. Python &gt;= 3.7).</p>\r\n\r\n<p>3.&nbsp;<strong>Pylint</strong> -&nbsp;Расширение Visual Studio Code с поддержкой линтера Pylint. Это расширение поставляется с pylint=3.0.2.</p>\r\n\r\n<p>Примечание. Минимальная версия Pylint, которую поддерживает это расширение, &mdash; 2.12.2.</p>\r\n\r\n<p>Это расширение поддерживает все активно поддерживаемые версии языка Python (т. е. Python &gt;= 3.8).</p>\r\n\r\n<p>Для получения дополнительной информации о Pylint см. https://pylint.readthedocs.io/.</p>\r\n\r\n<p>4. <strong>Pylance </strong>-&nbsp;Быстрая и многофункциональная поддержка языка Python.<br />\r\nPylance &mdash; это расширение, которое работает вместе с Python в Visual Studio Code и обеспечивает эффективную языковую поддержку. Под капотом Pylance работает Pyright, инструмент проверки статических типов Microsoft. Используя Pyright, Pylance имеет возможность расширить возможности Python IntelliSense за счет расширенной информации о типах, помогая вам быстрее писать более качественный код.</p>\r\n\r\n<p>Pylance &mdash; это языковая поддержка Python по умолчанию в Visual Studio Code, которая поставляется как часть этого расширения в качестве дополнительной зависимости.</p>\r\n\r\n<p>Имя Пайланс &mdash; это маленькая ода Ланселоту из &laquo;Монти Пайтона&raquo;, который был первым рыцарем, ответившим на вопросы мостика в Святом Граале.</p>\r\n\r\n<p>5.&nbsp;<strong>Django</strong> -&nbsp;Красивый синтаксис и расширенные фрагменты для перфекционистов с соблюдением сроков</p>\r\n\r\n<p>6.&nbsp;<strong>Django Template </strong>-&nbsp;Это расширение добавляет поддержку языковой раскраски и пользовательские фрагменты для языка шаблонов Django в VS Code.</p>\r\n\r\n<p>Это основано на расширении Jinja от замечательного Wholroyd.</p>\r\n\r\n<p>7.&nbsp;<strong>IntelliSense for CSS class names in HTML</strong> -&nbsp;Расширение Visual Studio Code, которое обеспечивает завершение имени класса CSS для атрибута класса HTML на основе определений, найденных в вашей рабочей области или во внешних файлах, на которые ссылается элемент link.</p>\r\n\r\n<p>8.&nbsp;<strong>CSS Peek</strong> -&nbsp;Позволяет просматривать идентификаторы CSS и строки классов в качестве определений из html-файлов в соответствующий CSS. Позволяет просматривать и переходить к определению.</p>\r\n\r\n<p>9.&nbsp;<strong>Black Formatter</strong> -&nbsp;Расширение Visual Studio Code с поддержкой форматирования Black. Расширение поставляется с черным цветом = 24.2.0.</p>\r\n\r\n<p>Дополнительную информацию о форматере Black см. на странице https://black.readthedocs.io/en/stable/.</p>\r\n\r\n<p>10.<strong>&nbsp;Auto Rename Tag</strong> -&nbsp;Автоматически переименовывайте парные теги HTML/XML, как это делает Visual Studio IDE.</p>",
    "created_at": "2024-05-27T08:13:54.453Z",
    "updated_at": "2024-05-27T08:13:54.453Z",
    "photo": "photo/2024/05/27/vs_code.jpg",
    "is_published": true,
    "category": 2,
    "tags": []
  }
},
{
  "model": "blog.article",
  "pk": 4,
  "fields": {
    "title": "Настройки VS Code для работы с Джанго",
    "slug": "nastrojki-vs-code-dlya-rabotyi-s-dzhango",
    "content": "<p>Редактор кода Virtual Studio Code имеет гибкие настройки.</p>\r\n\r\n<p>Раздел наcтроек находится так - File -&gt; Preferences -&gt; Settings</p>\r\n\r\n<p>Также можно открыть настройки с помощью горячих клавиш - CTRL + ,</p>\r\n\r\n<p>Настройки содержат несколько подразделов такие как &quot;Редактор кода&quot; со всевозможными текстовыми настройками, &quot;Рабочая среда&quot; - содержит параметры отображения разных блоков, например показывать или нет хлебные крошки. &quot;Окно&quot; - отображение рабочего окна - зум и т.п. Ну и т.д.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/05/27/image-20240527104926-1.png\" style=\"height:882px; width:813px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Очень удобно реализована поисковая строка. Любую настройку можно легко найти через поиск и тут же отредактировать.</p>\r\n\r\n<p>Ну и самая главная фишка VS Code - это файл настроек settings.json. Файл можно редактировать в формате JSON и при необходимости экспортировать и импортировать все настройки. Очень удобно.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/05/27/image-20240527111718-1.png\" style=\"height:958px; width:866px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Файл settings.json применяется глобально для всего редакторы. Но если необходимо можно также создавать отдельные файлы настроек под каждый проект.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-05-27T08:57:56.568Z",
    "updated_at": "2024-05-31T11:10:48.843Z",
    "photo": "photo/2024/05/31/vs_code.jpg",
    "is_published": true,
    "category": 2,
    "tags": []
  }
},
{
  "model": "blog.article",
  "pk": 5,
  "fields": {
    "title": "Настройки Pylint для VS Code",
    "slug": "nastrojki-pylint-dlya-vs-code",
    "content": "<p>Pylint - очень удобное расширение для Visual Studio Code. Оно подсвечивает синтаксис кода, показывает где ошибки и какие улучшения необходимо сделать. При этом по умолчанию настройки очень жесткие и сразу много подсказок в коде, подсвечиваются большинство участков кода. Для корректировки поведения расширения используется специальный файл - .pylintrc. Его необходимо добавить в корень проекта.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/05/27/image-20240527112419-1.png\" style=\"height:448px; width:798px\" /></p>\r\n\r\n<p>Сами настройки выглядят следующим образом</p>\r\n\r\n<p>[MESSAGES CONTROL]</p>\r\n\r\n<p>disable = missing-function-docstring,</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; missing-module-docstring,</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; missing-class-docstring,</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; import-outside-toplevel,</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; attribute-defined-outside-init,</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; line-too-long,</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; invalid-str-returned,</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; no-member,</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; wildcard-import,</p>\r\n\r\n<p>Этим самым мы игнорируем проверку разных необязательных ошибок типа &quot;missing-module-docstring&quot; т.к. не всегда мы добавляем документацию к модулям и т.п.</p>",
    "created_at": "2024-05-27T09:26:31.149Z",
    "updated_at": "2024-05-31T11:11:31.631Z",
    "photo": "photo/2024/05/31/vs_code_td2SEfq.jpg",
    "is_published": true,
    "category": 2,
    "tags": []
  }
},
{
  "model": "blog.article",
  "pk": 6,
  "fields": {
    "title": "Создание виртуального окружения для проекта Джанго",
    "slug": "sozdanie-virtualnogo-okruzheniya-dlya-proekta-dzhango",
    "content": "<p>Зачастую для создания проекта на Джанго нам требуются специфичные версии самого фреймворка, версии языка Python а также различных модулей. Для того чтобы всякий раз не переустанавливать все приложения в операционной системе, используются виртуальные окружения которые позволяют локально установить необходимые версии приложений.</p>\r\n\r\n<p>Единственное что нам потребуется установить в операционной ситеме - это сам Python.&nbsp;</p>\r\n\r\n<p>Напомним, что в систему можно установить много разных версий Python но активная рабочая версия в Windows задается в переменной path переменных среды.&nbsp;</p>\r\n\r\n<p><img alt=\"Переменные среды\" src=\"/media/uploads/2024/05/27/image-20240527114235-1.png\" style=\"height:371px; width:800px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Текущую версию Python можно узнать в командной строке так:</p>\r\n\r\n<p>Python -V</p>\r\n\r\n<p>Например, в Windows удобно пользоваться командной строкой Git Bash которая позволяет также пользоваться командами Git.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/05/27/image-20240527114744-2.png\" style=\"height:62px; width:186px\" /></p>\r\n\r\n<p>Таким образом у нас базовой версией будущего виртуального окржения станет версия 3.11.5</p>\r\n\r\n<p>Теперь созддим папку нового проекта для которого мы хотим новое виртальное окружение</p>\r\n\r\n<p>И там запускаем команду&nbsp;<br />\r\n<strong>python -m venv myvenv</strong></p>\r\n\r\n<p><strong>&nbsp;&nbsp;</strong>Затем чтобы активировать виртуальное окружение запускаем команду<br />\r\n<strong>source myvenv/Scripts/activate</strong> или в IDE - <strong>.\\venv\\Scripts\\activate</strong><br />\r\nдля деактивации просто выполняем&nbsp;deactivate</p>\r\n\r\n<p>При активном виртуальном окружении соответствуеще название будет предшествовать командной строке.</p>\r\n\r\n<p>С помощью pip freeze можно убедиться что вновь созданное окружение еще не содержит никаких модулей Python</p>\r\n\r\n<p><img src=\"/media/uploads/2024/05/27/image-20240527115723-3.png\" style=\"height:185px; width:393px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-05-27T09:58:48.107Z",
    "updated_at": "2024-05-30T15:13:46.465Z",
    "photo": "photo/2024/05/27/Virtualnaya-realnost-1-1200x800-1.jpg",
    "is_published": true,
    "category": 3,
    "tags": []
  }
},
{
  "model": "blog.article",
  "pk": 7,
  "fields": {
    "title": "Установка Джанго",
    "slug": "ustanovka-dzhango",
    "content": "<p>Итак, после того как мы&nbsp;<a href=\"http://127.0.0.1:8000/dzhango/sozdanie-virtualnogo-okruzheniya-dlya-proekta-dzhango/\" target=\"_blank\">создали виртуальное окружение</a>&nbsp;можно приступать непосредственное к установке Джанго.</p>\r\n\r\n<p>Делается это очень просто с помощью стандартного менеджера пакетов для Python - pip (<em>package installer for Python</em>).&nbsp;</p>\r\n\r\n<p>В Git Bash для Windows, активировав виртуальное окружение, запустите следующую команду:</p>\r\n\r\n<p><strong>pip install django</strong></p>\r\n\r\n<p><img src=\"/media/uploads/2024/05/30/image-20240530164206-1.png\" style=\"height:125px; width:367px\" /></p>\r\n\r\n<p>Команда установит последнюю актуальную версию Django.</p>\r\n\r\n<p>После чего команда pip freeze уже покажет вновь установленные пакеты вроде таких</p>\r\n\r\n<p><img src=\"/media/uploads/2024/05/30/image-20240530164415-2.png\" style=\"height:121px; width:382px\" /></p>\r\n\r\n<p>Со всеми параметрами команды pip install а также о том как установить конкретную версию Джанго можно ознакомиться здесь -&nbsp;<a href=\"https://pip.pypa.io/en/stable/cli/pip_install/\" target=\"_blank\">https://pip.pypa.io/en/stable/cli/pip_install/</a></p>\r\n\r\n<p>Узнать какая версия Джанго была установлена можно так:</p>\r\n\r\n<p><strong>python -m django --version</strong></p>\r\n\r\n<p><img src=\"/media/uploads/2024/05/30/image-20240530171908-1.png\" style=\"height:77px; width:373px\" /></p>\r\n\r\n<p>Вообще Django можно устанавливать различными способами. С&nbsp;вариантами опций установки можно ознакомиться на странице</p>\r\n\r\n<p><a href=\"https://docs.djangoproject.com/en/5.0/intro/install/#install-django\">https://docs.djangoproject.com/en/5.0/intro/install/#install-django</a>&nbsp;</p>\r\n\r\n<p>Как видно выше установилась версия 5.0.6 - это самая свежая актуальная версия на 30 мая 2024</p>\r\n\r\n<p>Про все версии и их отличия можно посмотреть здесь -&nbsp;<a href=\"https://docs.djangoproject.com/en/5.0/releases/\" target=\"_blank\">https://docs.djangoproject.com/en/5.0/releases/</a></p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-05-30T14:49:28.647Z",
    "updated_at": "2024-05-30T15:21:40.488Z",
    "photo": "photo/2024/05/30/best.jpg",
    "is_published": true,
    "category": 3,
    "tags": []
  }
},
{
  "model": "blog.article",
  "pk": 8,
  "fields": {
    "title": "Общий обзор Джанго",
    "slug": "obschij-obzor-dzhango",
    "content": "<p><strong>Django&nbsp;</strong>&ndash; это веб-фреймворк, состоящий из набора компонентов, которые решают распространенные задачи веб-разработки. Компоненты Django слабо сцеплены между собой, и&nbsp;поэтому ими можно управлять независимо, что помогает разделять обязанности разных слоев веб-фреймворка; слой базы данных ничего не знает о&nbsp;том, как данные отображаются на странице, система шаблонов ничего не знает о&nbsp;веб-запросах и&nbsp;т.&nbsp;д.</p>\r\n\r\n<p>Django подчиняется шаблону архитектурного дизайна <strong>MTV (Model-Template-View)</strong> . Он немного похож на хорошо известный шаблон архитектурного дизайна MVC (Model-View-Controller) , где Template (Шаблон) действует как View (Представление), а&nbsp;сам веб-фреймворк действует как Controller (Контроллер). Обязанности в&nbsp;шаблоне архитектурного дизайна MTV Django распределены следующим образом:</p>\r\n\r\n<p>&bull; <strong>модель&nbsp;</strong>&ndash; определяет логическую структуру данных и&nbsp;является обработчиком данных между базой данных и&nbsp;их представлением;</p>\r\n\r\n<p>&bull; <strong>шаблон&nbsp;</strong>&ndash; это слой представления. В&nbsp;Django используется система текстовых шаблонов, в&nbsp;которой хранится все, что браузер прорисовывает на страницах;</p>\r\n\r\n<p>&bull; <strong>представление&nbsp;</strong>&ndash; взаимодействует с&nbsp;базой данных через модель и&nbsp;передает данные в&nbsp;шаблон для их прорисовки и&nbsp;просмотра. Сам веб-фреймворк выступает в&nbsp;качестве контроллера. Он отправляет запрос в&nbsp;надлежащее представление в&nbsp;соответствии с&nbsp;конфигурацией URL-адреса</p>\r\n\r\n<hr />\r\n<p style=\"text-align:center\"><strong><span style=\"font-size:18px\">Архитектура Django</span></strong></p>\r\n\r\n<p style=\"text-align:center\"><img src=\"/media/uploads/2024/05/30/image-20240530183351-1.png\" style=\"height:371px; width:476px\" /></p>",
    "created_at": "2024-05-30T15:51:05.747Z",
    "updated_at": "2024-05-30T16:34:22.598Z",
    "photo": "photo/2024/05/30/logo.png",
    "is_published": true,
    "category": 3,
    "tags": []
  }
},
{
  "model": "blog.article",
  "pk": 9,
  "fields": {
    "title": "Создание проекта Джанго",
    "slug": "sozdanie-proekta-dzhango",
    "content": "<p>Итак, после того как мы&nbsp;<a href=\"/dzhango/sozdanie-virtualnogo-okruzheniya-dlya-proekta-dzhango/\">создали виртуальное окружение</a>&nbsp;и&nbsp;<a href=\"/dzhango/ustanovka-dzhango/\">установили Django</a>&nbsp;мы уже можем создавать новый проект!</p>\r\n\r\n<p>В качестве примера пусть новый проект будет посвящен ведению блога и называется DjangoBlog.&nbsp;</p>\r\n\r\n<p>И все что для этого нужно - это воспользоваться специальными утилитами входящими в Джанго по умолчанию!</p>\r\n\r\n<p>Django предоставляет команду, которая позволяет создавать изначальную файловую структуру проекта. Выполните следующую ниже команду в&nbsp; командной оболочке:</p>\r\n\r\n<p>django-admin startproject djangoblog</p>\r\n\r\n<p><img src=\"/media/uploads/2024/05/31/image-20240531124828-1.png\" style=\"height:65px; width:378px\" /></p>\r\n\r\n<p>Казалось бы ничего не проищошло, но на самом деле у нас уже есть готовая структура проекта.</p>\r\n\r\n<p>Чтобы в этом убедиться, откройте проект в редакторе кода VS Code (рекомендуем к ознакомлению статьи -&nbsp;<a href=\"/vs-code/nastrojki-vs-code-dlya-rabotyi-s-dzhango/\">Настройки VS Code для работы с Джанго</a>&nbsp;, <a href=\"/vs-code/top-10-rasshirenij-vs-code-dlya-rabotyi-s-dzhango/\">Топ-10 расширений VS Code для работы с Джанго</a>&nbsp;, <a href=\"/vs-code/nastrojki-pylint-dlya-vs-code/\">Настройки Pylint для VS Code</a>).</p>\r\n\r\n<p>Вы увидите следующую структуру</p>\r\n\r\n<p><img src=\"/media/uploads/2024/05/31/image-20240531125841-1.png\" style=\"height:444px; width:491px\" /></p>\r\n\r\n<p>Внешний каталог djangoblog/ является контейнером проекта. Он содержит следующие ниже файлы:&nbsp;</p>\r\n\r\n<p>&bull; <strong>manage.py</strong>: это утилита командной строки, используемая для взаимодействия с&nbsp;проектом. Редактировать этот файл не требуется;</p>\r\n\r\n<p>&bull; <strong>djangoblog/</strong>: это пакет проекта на языке Python; пакет состоит из следующих ниже файлов:</p>\r\n\r\n<ul>\r\n\t<li><strong>__init__.py</strong>: пустой файл, который сообщает Python, что каталог djangoblog нужно трактовать как модуль Python;</li>\r\n\t<li><strong>asgi.py</strong>: конфигурация для выполнения проекта в&nbsp;качестве приложения, работающего по протоколу интерфейса шлюза асинхронного сервера (ASGI) с&nbsp;ASGI-совместимыми веб-серверами. ASGI&nbsp;&ndash; это новый стандарт Python для асинхронных веб-серверов и&nbsp;приложений;</li>\r\n\t<li><strong>settings.py</strong>: здесь указаны настроечные параметры и&nbsp;конфигурация проекта и&nbsp;содержатся изначальные параметры со значениями, используемыми по умолчанию;</li>\r\n\t<li><strong>urls.py</strong>: место, где располагаются ваши шаблоны URL-адресов. Каждый URL-адрес, который определен здесь, соотносится с&nbsp;представлением;</li>\r\n\t<li><strong>wsgi.py</strong>: конфигурация для выполнения проекта в&nbsp;качестве приложения, работающего по протоколу интерфейса шлюза веб-сервера (WSGI) с&nbsp;WSGI-совместимыми веб-серверами.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-05-31T10:50:27.331Z",
    "updated_at": "2024-05-31T11:05:48.646Z",
    "photo": "photo/2024/05/31/project.jpg",
    "is_published": true,
    "category": 3,
    "tags": []
  }
},
{
  "model": "blog.article",
  "pk": 10,
  "fields": {
    "title": "Выбрать интерпретатор в VS Code",
    "slug": "vyibrat-interpretator-v-vs-code",
    "content": "<p>Редактор кода <strong>VS Code</strong> позволяет выбрать в настройках версию Python с помощью которой будут интерпретироваться файлы.</p>\r\n\r\n<p>По умолчанию редактор воспользуется той версией которая в данный момент активна в вашей операционной системе (прописана в переменной среды path).</p>\r\n\r\n<p>Итак, допустим вы уже создали&nbsp;новое <a href=\"/dzhango/sozdanie-virtualnogo-okruzheniya-dlya-proekta-dzhango/\">виртуальное окружение</a></p>\r\n\r\n<p>Текущий интерпретатор виден в правом нижнем углу окна редактора</p>\r\n\r\n<p><img src=\"/media/uploads/2024/05/31/image-20240531132224-1.png\" style=\"height:434px; width:539px\" /></p>\r\n\r\n<p>Если кликнуть по данной области откроется окно с возможностью выбора другого интерепретатора</p>\r\n\r\n<p><img src=\"/media/uploads/2024/05/31/image-20240531132726-1.png\" style=\"height:139px; width:732px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Кликаем опцию &quot;Enter interpreter path&quot; и выбираем путь к файлу запуска python.exe нашего виртульного окружения</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/05/31/image-20240531132920-2.png\" style=\"height:296px; width:513px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Саиое интересное - это то что теперь если открыть встроенный терминал, виртуальное окружение активируется автоматически в соответствии с нашими настройками</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/05/31/image-20240531133223-3.png\" style=\"height:237px; width:488px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/05/31/image-20240531133250-4.png\" style=\"height:248px; width:750px\" /></p>",
    "created_at": "2024-05-31T11:22:36.570Z",
    "updated_at": "2024-09-08T16:04:12.073Z",
    "photo": "photo/2024/05/31/vs_code_uCqbWjs.jpg",
    "is_published": true,
    "category": 2,
    "tags": [
      49
    ]
  }
},
{
  "model": "blog.article",
  "pk": 11,
  "fields": {
    "title": "ACID",
    "slug": "acid",
    "content": "<p>Согласно Википедии&nbsp;<strong>ACID (от англ. atomicity, consistency, isolation, durability)</strong> &mdash; набор требований к транзакционной системе, обеспечивающий наиболее надёжную и предсказуемую её работу &mdash; атомарность.</p>\r\n\r\n<p>А если сказать проще, то&nbsp;ACID &mdash; это набор требований, которые обеспечивают сохранность ваших данных.</p>\r\n\r\n<p>Здесь конечно речь о базах данных, без которых в современных веб-проектах никуда.</p>\r\n\r\n<p>Итак что означает каждая из букв в данной аббревиатуре?</p>\r\n\r\n<p><strong>Атомарность</strong> (atomicity)&nbsp;&mdash; транзакция либо выполняется полностью, либо не&nbsp;выполняется вообще. Транзакцией применительно к&nbsp;базам данных называют действие или цепочку действий с&nbsp;базой данных: добавление, изменение, удаление записи и&nbsp;так далее.</p>\r\n\r\n<p><strong>Согласованность</strong> (consistency)&nbsp;&mdash; состояния до&nbsp;и&nbsp;после транзакции должны быть согласованными. Принцип напоминает закон сохранения массы в&nbsp;физике: ничего не&nbsp;исчезает бесследно и&nbsp;не&nbsp;появляется из&nbsp;ниоткуда.</p>\r\n\r\n<blockquote>\r\n<p>Например, когда клиент банка переводит 100&nbsp;рублей со&nbsp;счёта A&nbsp;на&nbsp;счёт B, баланс счёта A&nbsp;должен уменьшиться на&nbsp;100&nbsp;рублей, а&nbsp;баланс счёта B&nbsp;&mdash; увеличиться на&nbsp;ту&nbsp;же сумму.</p>\r\n\r\n<p>Согласованность гарантирует, что даже в&nbsp;случае сбоя во&nbsp;время выполнения транзакции суммарный баланс обоих счетов не&nbsp;изменится. Например, если произошла ошибка после уменьшения баланса на&nbsp;счёте A, но&nbsp;перед увеличением баланса на&nbsp;счёте B, то&nbsp;база данных вернётся в&nbsp;состояние, в&nbsp;котором балансы счетов соответствуют бизнес-правилам.</p>\r\n</blockquote>\r\n\r\n<p><strong>Изолированность</strong> (isolation)&nbsp;&mdash; параллельно выполняющиеся транзакции не&nbsp;имеют доступа к&nbsp;промежуточным состояниям друг друга и&nbsp;отражают результаты так, как если&nbsp;бы они выполнялись последовательно.</p>\r\n\r\n<blockquote>\r\n<p>Представьте ситуацию. Два клиента одновременно решили купить в&nbsp;интернет-магазине один и&nbsp;тот&nbsp;же продукт, который остался в&nbsp;единственном экземпляре.</p>\r\n\r\n<p>Клиент A&nbsp;добавляет продукт в&nbsp;корзину, и&nbsp;система начинает транзакцию для резервирования товара. Практически одновременно клиент B&nbsp;выбирает тот&nbsp;же продукт и&nbsp;добавляет его в&nbsp;свою корзину.</p>\r\n\r\n<p>Если платёж клиента A&nbsp;проходит успешно, система подтверждает покупку, а&nbsp;количество доступных товаров на&nbsp;сайте меняется (в&nbsp;нашем случае на&nbsp;0).</p>\r\n\r\n<p>Когда клиент Б&nbsp;завершит свою транзакцию, система уже будет понимать, что товар продан, потому отменит покупку.</p>\r\n</blockquote>\r\n\r\n<p><strong>Долговечность</strong> (durability) гарантирует, что после завершения транзакции изменения в&nbsp;базе данных сохраняются даже в&nbsp;случае сбоя.</p>\r\n\r\n<p>Стандарты ACID делают РБД надёжной, но&nbsp;медлительной моделью хранения данных, плохо подходящей для высоконагруженных сервисов.</p>\r\n\r\n<p>Это стало ясно по&nbsp;мере распространения интернета. Взрывной рост объёма обрабатываемых данных заставлял серверы работать на&nbsp;пределе, а&nbsp;программистов&nbsp;&mdash; подгонять данные под единый формат. Компаниям нужно было больше серверов и&nbsp;специалистов, а&nbsp;стоило всё это недешево. Было решено хранить информацию иначе.</p>",
    "created_at": "2024-06-03T14:53:08.545Z",
    "updated_at": "2024-09-08T16:03:44.939Z",
    "photo": "photo/2024/06/03/acid.png",
    "is_published": true,
    "category": 4,
    "tags": [
      56
    ]
  }
},
{
  "model": "blog.article",
  "pk": 12,
  "fields": {
    "title": "Настройка соединения с базой данных в Джанго",
    "slug": "nastrojka-soedineniya-s-bazoj-dannyih-v-dzhango",
    "content": "<p>Хотя Джанго способен работать и без подключения к базе данных, сам проект реализованный подобным образом вызывает вопросы. Т.к. если для проекта не нужна база данныхъ то скорее всего это очень простой проект для которого скорее всего достаточно микрофреймворка - такого, например, как Flask.&nbsp;</p>\r\n\r\n<p>Если же мы говорим о более серьезном проекте, то нам уже неоходима база данных.</p>\r\n\r\n<p>Django официально поддерживает следующие базы данных: PostgreSQL, MySQL, Oracle,&nbsp;MariaDB и SQLite.</p>\r\n\r\n<p>Среди них&nbsp;наиболее популярные при работе с Джанго это&nbsp;SQLite, MySQL и&nbsp;PostgreSQL.</p>\r\n\r\n<p>Если вкратце, то</p>\r\n\r\n<ul>\r\n\t<li><strong>SQLite</strong>: мощная встраиваемая СУБД.</li>\r\n\t<li><strong>MySQL</strong>: самая популярная и часто используемая СУБД.</li>\r\n\t<li><strong>PostgreSQL</strong>: самая продвинутая и гибкая СУБД.</li>\r\n</ul>\r\n\r\n<p>По умолчанию Джанго работает с&nbsp;SQLite.</p>\r\n\r\n<p>Для настроек соединения с базой в settings.py есть спеиальный словарь DATABASES.</p>\r\n\r\n<p>По умолчанию он выглядит так</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/05/image-20240605100321-1.png\" style=\"height:235px; width:640px\" /></p>\r\n\r\n<p>Как мы видим, в настройках для нашего удобства сразу есть и ссылка на документацию -&nbsp;<a href=\"https://docs.djangoproject.com/en/5.0/ref/settings/#databases\" target=\"_blank\">https://docs.djangoproject.com/en/5.0/ref/settings/#databases</a></p>\r\n\r\n<p><strong>SQLite </strong>- это файловая БД, она предоставляет отличный набор инструментов для более простой (в сравнении с серверными БД) обработки любых видов данных. В целом отличное решение при разработке приложения, но имеющее ограничения.&nbsp;</p>\r\n\r\n<p>Конечно, в&nbsp;производственной среде уже нужно использовать серверную полнофункциональную БД.</p>\r\n\r\n<p>И обычно выбор падает на&nbsp;MySQL либо PostgreSQL.&nbsp;</p>\r\n\r\n<p>MySQL уже давно обрел популярность при разработке веб-проектов. Поэтому если вы фанат&nbsp;MySQL, то ваши настройки должны выглядеть как-то так</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/05/image-20240605102552-2.png\" style=\"height:268px; width:482px\" /></p>\r\n\r\n<p>Но все же оптимальным выбором будет&nbsp;<strong>PostgreSQL</strong>. Почему?</p>\r\n\r\n<p>Вот некоторые из причин:</p>\r\n\r\n<p style=\"text-align:center\"><span style=\"font-size:18px\"><strong>Преимущества использования PostgreSQL с Django</strong></span></p>\r\n\r\n<ul>\r\n\t<li>Django предоставляет ряд типов данных, которые будут работать только с PostgreSQL.</li>\r\n\t<li>В Django есть django.contrib.postgres для выполнения операций с базой данных в PostgreSQL.</li>\r\n\t<li>Если вы создаете приложение с картами или храните географические данные, вам необходимо использовать PostgreSQL, поскольку GeoDjango полностью совместим только с PostgreSQL.</li>\r\n\t<li>PostgreSQL имеет богатейший набор функций, поддерживаемых Django.</li>\r\n</ul>\r\n\r\n<p style=\"text-align:center\"><span style=\"font-size:16px\"><strong>Вот некоторые особенности PostgreSQL, поддерживаемые Django:</strong></span></p>\r\n\r\n<ul>\r\n\t<li>Функции агрегирования, специфичные для PostgreSQL</li>\r\n\t<li>Ограничения базы данных, специфичные для PostgreSQL</li>\r\n\t<li>Поля и виджеты форм, специфичные для PostgreSQL</li>\r\n\t<li>Функции базы данных, специфичные для PostgreSQL</li>\r\n\t<li>Индексы моделей, специфичные для PostgreSQL Поиски, специфичные для PostgreSQL</li>\r\n\t<li>Операции миграции базы данных</li>\r\n\t<li>Полнотекстовый поиск Валидаторы</li>\r\n</ul>\r\n\r\n<p>Возможные настройки&nbsp;PostgreSQL:</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/05/image-20240605102811-3.png\" style=\"height:266px; width:528px\" /></p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-03T16:28:24.883Z",
    "updated_at": "2024-09-08T16:03:17.644Z",
    "photo": "photo/2024/06/03/database_ZkZrjfV.jpg",
    "is_published": true,
    "category": 4,
    "tags": [
      21,
      41
    ]
  }
},
{
  "model": "blog.article",
  "pk": 13,
  "fields": {
    "title": "Применение первоначальных миграций",
    "slug": "primenenie-pervonachalnyih-migratsij",
    "content": "<p>Итак, после того как мы <a href=\"/baza-dannyih/nastrojka-soedineniya-s-bazoj-dannyih-v-dzhango/\">настроили соединение с базой данных</a>, можно произвести первичную миграцию.&nbsp;</p>\r\n\r\n<p>Файл settings.py содержит настроечный параметр INSTALLED_APPS со списком, содержащим распространенные приложения Django, которые добавляются в&nbsp;ваш проект по умолчанию. Приложения Django содержат модели данных, которые соотносятся с&nbsp;таблицами базы данных. Для того чтобы завершить настройку проекта, необходимо создать таблицы, ассоциированные с&nbsp;моделями стандартных приложений Django, включенных в&nbsp;состав параметра INSTALLED_APPS. Django поставляется вместе с&nbsp;системой, которая помогает управлять миграциями баз данных. Откройте терминал VS Code и выполните следующую команду:</p>\r\n\r\n<p><strong>python manage.py migrate</strong></p>\r\n\r\n<p>Если вы подключили PostgreSQL то первичная миграция может выдать ошибку:</p>\r\n\r\n<p>django.core.exceptions.ImproperlyConfigured: Error loading psycopg2 or psycopg module</p>\r\n\r\n<p>Это означает что у вас не установлен модуль Python&nbsp;psycopg2&nbsp;необходимый для работы с&nbsp;PostgreSQL.</p>\r\n\r\n<p>Выпоняем <strong>pip install&nbsp;psycopg2</strong>&nbsp;</p>\r\n\r\n<p>Затем пробуем вновь. Если все успешно вы должны увидеть примененные миграции базы данных</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/05/image-20240605125423-1.png\" style=\"height:496px; width:712px\" /></p>\r\n\r\n<p>В pgAdmin мы также должны увидеть созданные таблицы</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/05/image-20240605125557-2.png\" style=\"height:844px; width:595px\" /></p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-05T09:09:09.199Z",
    "updated_at": "2024-09-08T16:02:31.429Z",
    "photo": "photo/2024/06/05/DataMigration.png",
    "is_published": true,
    "category": 4,
    "tags": [
      52
    ]
  }
},
{
  "model": "blog.article",
  "pk": 14,
  "fields": {
    "title": "Создание пользователя и базы данных PostgreSQL",
    "slug": "sozdanie-polzovatelya-i-bazyi-dannyih-postgresql",
    "content": "<p>Для работы с PostgreSQL есть специальное приложение -&nbsp;pgAdmin. Его можно скачать с официального сайта -&nbsp;<a href=\"https://www.pgadmin.org/\">https://www.pgadmin.org/</a>. Согласно описанию,&nbsp;</p>\r\n\r\n<p><strong>pgAdmin -</strong>&nbsp;это самая популярная и многофункциональная платформа администрирования и разработки с открытым исходным кодом для PostgreSQL, самой совершенной базы данных с открытым исходным кодом в мире.</p>\r\n\r\n<p>pgAdmin можно использовать в Linux, Unix, macOS и Windows для управления PostgreSQL и EDB Advanced Server 11 и выше.</p>\r\n\r\n<p>После установки, можно создать нового пользователя базы данных и новую базу</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/05/image-20240605112846-2.png\" style=\"height:310px; width:553px\" /></p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/05/image-20240605112920-3.png\" style=\"height:251px; width:701px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/05/image-20240605112956-4.png\" style=\"height:248px; width:700px\" /></p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/05/image-20240605125144-10.png\" style=\"height:397px; width:698px\" /></p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/05/image-20240605112708-1.png\" style=\"height:271px; width:575px\" /></p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/05/image-20240605114942-8.png\" style=\"height:286px; width:702px\" /></p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/05/image-20240605113244-7.png\" style=\"height:436px; width:700px\" /></p>\r\n\r\n<p>Готово!</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-05T10:53:05.634Z",
    "updated_at": "2024-09-08T16:02:09.263Z",
    "photo": "photo/2024/06/05/postgres-icon-12.jpg",
    "is_published": true,
    "category": 4,
    "tags": [
      55
    ]
  }
},
{
  "model": "blog.article",
  "pk": 15,
  "fields": {
    "title": "Запуск сервера разработки Джанго",
    "slug": "zapusk-servera-razrabotki-dzhango",
    "content": "<p>После того как мы <a href=\"/baza-dannyih/sozdanie-polzovatelya-i-bazyi-dannyih-postgresql/\">создали базу данных</a>, настроили с ней <a href=\"/baza-dannyih/nastrojka-soedineniya-s-bazoj-dannyih-v-dzhango/\">соединение</a> и <a href=\"/baza-dannyih/primenenie-pervonachalnyih-migratsij/\">применили первоначальные миграции</a>, уже можно запускать сервер разработки Джанго.</p>\r\n\r\n<p>Django идет в&nbsp;комплекте вместе с&nbsp;облегченным веб-сервером с&nbsp;целью быстрого выполнения вашего исходного кода без необходимости тратить время на настройку производственного сервера. Во время работы сервера разработки он непрерывно проверяет наличие изменений в&nbsp;исходном коде. Он автоматически перезагружается, освобождая от необходимости перезагружать его вручную после изменения кода. Однако есть случаи, когда он может не замечать некоторые действия, такие как добавление новых файлов в&nbsp;проект, поэтому в&nbsp;подобных случаях приходится перезапускать сервер вручную. Запустите сервер разработки, набрав следующую ниже команду в&nbsp;командной оболочке:&nbsp;</p>\r\n\r\n<blockquote>\r\n<p><strong>python manage.py runserver</strong></p>\r\n</blockquote>\r\n\r\n<p>Сделать это можно прямо из терминала VS Code</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/10/image-20240610201204-1.png\" style=\"height:241px; width:765px\" /></p>\r\n\r\n<p>Если пройти по адресу&nbsp;http://127.0.0.1:8000/</p>\r\n\r\n<p>то вы увидите приветственое окно Джанго&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/10/image-20240610201307-2.png\" style=\"height:718px; width:800px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>После открытия страницы выше, вы увидите в терминале какие были запросы к серверу</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/10/image-20240610201532-1.png\" style=\"height:150px; width:743px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>По умолчанию веб-сервер запускается на порту 8000, но в команде запуска можно также указать специфичный порт и файл настроек.</p>\r\n\r\n<blockquote>\r\n<p><strong>python manage.py runserver 127.0.0.1:8001 --settings=mysite.settings</strong></p>\r\n</blockquote>\r\n\r\n<blockquote>\r\n<p>Когда приходится иметь дело с&nbsp;несколькими средами, требующими разных конфигураций, то следует создавать настроечный файл отдельно для каждой среды.</p>\r\n</blockquote>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Данный сервер предназначен для разработки. О том, как разворачивать&nbsp;Django с различными веб-серверами в производственной среде, читайте здесь -&nbsp;<a href=\"https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/\">How to deploy with WSGI | Django documentation | Django (djangoproject.com)</a></p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-10T18:06:54.230Z",
    "updated_at": "2024-09-08T16:01:39.956Z",
    "photo": "photo/2024/06/10/Data-Centre-smaller-for-upload-1140x590.jpg",
    "is_published": true,
    "category": 3,
    "tags": [
      54
    ]
  }
},
{
  "model": "blog.article",
  "pk": 16,
  "fields": {
    "title": "Настроечные параметры проекта",
    "slug": "nastroechnyie-parametryi-proekta",
    "content": "<p>После создания проекта Джанго, мы сразу получаем готовую структуру проекта с определенными папками и файлами.</p>\r\n\r\n<p>Одним из главных файлов проекта является файл настроек - settings.py</p>\r\n\r\n<p>Несколько настроечных параметров уже внесены в&nbsp; указанный файл веб-фреймворком Django, но это лишь часть всех имеющихся параметров. Все настроечные параметры и&nbsp;их значения, которые используются по умолчанию, можно увидеть на странице <a href=\"https://docs.djangoproject.com/en/5.0/ref/settings/\">https://docs.djangoproject.com/en/5.0/ref/settings/</a>.</p>\r\n\r\n<p>Давайте рассмотрим некоторые настроечные параметры проекта.</p>\r\n\r\n<ul>\r\n\t<li><strong>DEBUG&nbsp;</strong>&ndash; это булев параметр, который включает и&nbsp;выключает режим отладки проекта. Если его значение установлено равным True, то Django будет отображать подробные страницы ошибок в&nbsp;случаях, когда приложение выдает неперехваченное исключение. При переходе в&nbsp;производственную среду следует помнить о&nbsp;том, что необходимо устанавливать его значение равным False. Никогда не развертывайте свой сайт в&nbsp;производственной среде с&nbsp;включенной отладкой, поскольку вы предоставите конфиденциальные данные, связанные с&nbsp;проектом.</li>\r\n\t<li><strong>ALLOWED_HOSTS -&nbsp;</strong>не применяется при включенном режиме отладки или при выполнении тестов. При перенесении своего сайта в&nbsp;производственную среду и&nbsp; установке параметра DEBUG равным False в&nbsp; этот настроечный параметр следует добавлять свои домен/хост, чтобы разрешить ему раздавать ваш сайт Django.</li>\r\n\t<li><strong>INSTALLED_APPS&nbsp;</strong>&ndash; это параметр, который придется редактировать во всех проектах. Он сообщает Django о&nbsp;приложениях, которые для этого сайта являются активными. По умолчанию Django вставляет следующие ниже приложения:</li>\r\n</ul>\r\n\r\n<p style=\"margin-left:80px\">&ndash; django.contrib.admin: сайт администрирования;</p>\r\n\r\n<p style=\"margin-left:80px\">&ndash; django.contrib.auth: фреймворк аутентификации;</p>\r\n\r\n<p style=\"margin-left:80px\">&ndash; django.contrib.contenttypes: фреймворк типов контента;</p>\r\n\r\n<p style=\"margin-left:80px\">&ndash; django.contrib.sessions: фреймворк сеансов (сессий);</p>\r\n\r\n<p style=\"margin-left:80px\">&ndash; django.contrib.messages: фреймворк сообщений;</p>\r\n\r\n<p style=\"margin-left:80px\">&ndash; django.contrib.staticfiles: фреймворк управления статическими файлами.</p>\r\n\r\n<ul>\r\n\t<li><strong>MIDDLEWARE&nbsp;</strong>&ndash; подлежащие исполнению промежуточные программные компоненты.</li>\r\n\t<li><strong>ROOT_URLCONF -&nbsp;</strong>указывает модуль Python, в&nbsp;котором определены шаблоны корневых URL-адресов приложения.</li>\r\n\t<li><strong>DATABASES&nbsp;</strong>&ndash; словарь, содержащий настроечные параметры всех баз данных, которые будут использоваться в&nbsp;проекте. Всегда должна существовать база данных, которая будет использоваться по умолчанию. В&nbsp;стандартной конфигурации используется база данных SQLite3, если не указана иная.</li>\r\n\t<li><strong>LANGUAGE_CODE -&nbsp;</strong>определяет заранее заданный языковой код этого сайта Django.</li>\r\n\t<li><strong>USE_TZ -&nbsp;</strong>сообщает Django, что нужно активировать/деактивировать поддержку часовых поясов. Django поставляется вместе с&nbsp;поддержкой дат и&nbsp;времен с&nbsp;учетом часовых поясов. Этот настроечный параметр получает значение True при создании нового проекта с&nbsp;по мощью команды управления startproject.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-10T18:39:56.603Z",
    "updated_at": "2024-09-08T16:01:22.156Z",
    "photo": "photo/2024/06/10/settings.jpg",
    "is_published": true,
    "category": 3,
    "tags": [
      21
    ]
  }
},
{
  "model": "blog.article",
  "pk": 17,
  "fields": {
    "title": "Создание приложения Джанго",
    "slug": "sozdanie-prilozheniya-dzhango",
    "content": "<p>Итак, мы <a href=\"/dzhango/sozdanie-proekta-dzhango/\">создали проект</a>, <a href=\"/dzhango/zapusk-servera-razrabotki-dzhango/\">запустили сервер разработки</a>. Но что же дальше?</p>\r\n\r\n<p>Для дальнейшего развития нашего проекта нам потребуются приложения.&nbsp;</p>\r\n\r\n<p>В&nbsp;Django проектом считается установленный веб-фреймворк Django с&nbsp;несколькими настроечными параметрами.</p>\r\n\r\n<p>Приложение же &ndash; это группа моделей, шаблонов, URL-адресов и представлений. Приложения взаимодействуют с&nbsp;веб-фреймворком с&nbsp;целью обеспечения определенных функциональностей, и их можно переиспользовать в других проектах. Проект можно трактовать как веб-сайт, содержащий несколько приложений, таких как блог, вики или форум, который другие проекты Django тоже могут использовать.</p>\r\n\r\n<p style=\"text-align:center\"><img src=\"/media/uploads/2024/06/10/image-20240610204728-1.png\" style=\"height:365px; width:387px\" /></p>\r\n\r\n<p>Создается новое приложение также просто как и сам проект - всего лишь одной командой.</p>\r\n\r\n<p>Так, например давайте создадим приложение Блог</p>\r\n\r\n<blockquote>\r\n<p><strong>python manage.py startapp blog</strong></p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/06/10/image-20240610205124-1.png\" style=\"height:97px; width:773px\" /></p>\r\n\r\n<p>Опять кажется что ничего не произошло, но если мы проверим структуру нашего проекта то увидим что появилась новая папка blog со вложенными файлами и папками</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/10/image-20240610205253-2.png\" style=\"height:442px; width:310px\" /></p>\r\n\r\n<p>Пройдемся по этим элементам</p>\r\n\r\n<ul>\r\n\t<li><strong>__init__.py</strong>: пустой файл, который сообщает Python, что каталог blog нужно трактовать как пакет Python;</li>\r\n\t<li><strong>admin.py</strong>: здесь вы регистрируете модели, чтобы включать их в&nbsp;состав сайта администрирования&nbsp;&ndash; этот сайт используется опционально, по вашему выбору;</li>\r\n\t<li><strong>apps.py</strong>: содержит главную конфигурацию приложения blog;</li>\r\n\t<li><strong>migrations</strong>: этот каталог будет содержать миграции базы данных приложения. Миграции позволяют Django отслеживать изменения модели и&nbsp;соответствующим образом синхронизировать базу данных. Указанный каталог также содержит пустой файл __init__.py сообщающий о том что это пакет Python;</li>\r\n\t<li><strong>models.py</strong>: содержит относимые к&nbsp;приложению модели данных; все приложения Django должны иметь файл models.py, но его можно оставлять пустым;</li>\r\n\t<li><strong>tests.py</strong>: здесь можно добавлять относимые к&nbsp;приложению тесты;</li>\r\n\t<li><strong>views.py</strong>: здесь расположена логика приложения; каждое представление получает HTTP-запрос, обрабатывает его и&nbsp;возвращает ответ.</li>\r\n</ul>\r\n\r\n<p>Для того чтобы Django мог отслеживать приложение и&nbsp;имел возможность создавать таблицы базы данных для его моделей, вновь созданное приложение необходимо активировать в настроечном файле settings.py обновив настроечный параметр INSTALLED_APPS</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/10/image-20240610212516-1.png\" style=\"height:273px; width:474px\" /></p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-10T18:48:47.854Z",
    "updated_at": "2024-09-08T16:00:56.247Z",
    "photo": "photo/2024/06/10/SCR7.png",
    "is_published": true,
    "category": 3,
    "tags": [
      21,
      53
    ]
  }
},
{
  "model": "blog.article",
  "pk": 18,
  "fields": {
    "title": "Создание модели в Джанго",
    "slug": "sozdanie-modeli-v-dzhango",
    "content": "<p><strong>Модель Django</strong>&nbsp;&ndash; это источник информации и&nbsp;поведения данных. Она состоит из класса Python, который является подклассом django.db.models.Model. Каждой модели ставится в&nbsp;соответствие одна таблица базы данных, где каждый атрибут класса соотносится с&nbsp;полем базы данных. Когда вы будете создавать модель, Django будет предоставлять практичный API, чтобы легко запрашивать объекты в&nbsp;базе данных.</p>\r\n\r\n<p>Таким образом, обычно создание модели в Джанго включает в себя 3 этапа.</p>\r\n\r\n<ol>\r\n\t<li>Описание модели в файле models.py приложения.</li>\r\n\t<li>Генерация миграций базы данных для описанной модели.</li>\r\n\t<li>Применение миграций.</li>\r\n</ol>\r\n\r\n<p>Создадим модель Post нашего приложения Блог. Модель должна описывать таблицу и соответствующие поля в базе данных.</p>\r\n\r\n<p>Модель Post позволит хранить статьи блога в&nbsp;базе данных. Добавим следующие ниже строки в&nbsp;файл models.py приложения blog.</p>\r\n\r\n<blockquote>\r\n<p>from django.db import models</p>\r\n\r\n<p>class Post(models.Model):</p>\r\n\r\n<p style=\"margin-left:40px\">title = models.CharField(max_length=250)</p>\r\n\r\n<p style=\"margin-left:40px\">slug = models.SlugField(max_length=250)</p>\r\n\r\n<p style=\"margin-left:40px\">body = models.TextField()</p>\r\n\r\n<p style=\"margin-left:40px\">def __str__(self):</p>\r\n\r\n<p style=\"margin-left:80px\">return self.title</p>\r\n</blockquote>\r\n\r\n<p>Это модель данных для постов блога. Посты будут иметь заголовок, короткую метку под названием slug и&nbsp;тело поста.</p>\r\n\r\n<p>Давайте взглянем на поля указанной модели:</p>\r\n\r\n<ul>\r\n\t<li><strong>title</strong>: поле заголовка поста. Это поле с&nbsp;типом CharField, которое транслируется в&nbsp;столбец VARCHAR в&nbsp;базе данных SQL;</li>\r\n\t<li><strong>slug</strong>: поле SlugField, которое транслируется в&nbsp;столбец VARCHAR в&nbsp;базе данных SQL. Слаг&nbsp;&ndash; это короткая метка, содержащая только буквы, цифры, знаки подчеркивания или дефисы. Пост с&nbsp;заголовком &laquo;Создание модели в Джанго&raquo; мог бы содержать такой слаг: &laquo;sozdanie-modeli-v-dzhango&raquo;. Обычно поле slug используется для формирования красивых и дружественных для поисковой оптимизации URL-адресов постов блога;</li>\r\n\t<li><strong>body</strong>: поле для хранения тела поста. Это поле с&nbsp;типом TextField, которое транслируется в&nbsp;столбец Text в&nbsp;базе данных SQL.</li>\r\n</ul>\r\n\r\n<p>В модельный класс также добавлен метод <strong>__str__()</strong>. Это метод Python, который применяется по умолчанию и&nbsp;возвращает строковый литерал с&nbsp;удобочитаемым представлением объекта. Django будет использовать этот метод для отображения имени объекта во многих местах, таких например как сайт администрирования.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/10/image-20240610211939-1.png\" style=\"height:308px; width:800px\" /></p>\r\n\r\n<p>Django по умолчанию добавляет поле автоматически увеличивающегося первичного ключа в&nbsp;каждую модель. Тип этого поля указывается в&nbsp;конфигурации каждого приложения либо глобально в&nbsp;настроечном параметре <strong>DEFAULT_AUTO_FIELD</strong>. При создании приложения командой startapp значение параметра DEFAULT_AUTO_FIELD по умолчанию имеет тип <strong>BigAutoField</strong>. Это 64-битное целое число, которое увеличивается автоматически в&nbsp; соответствии с&nbsp;доступными идентификаторами. Если не указывать первичный ключ своей модели, то Django будет добавлять это поле автоматически. В&nbsp;качестве первичного ключа можно также определить одно из полей модели, установив для него параметр primary_key=True.</p>\r\n\r\n<p>Теперь создадим миграции с помощью следующей команды</p>\r\n\r\n<blockquote>\r\n<p><strong>python manage.py makemigrations</strong></p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/06/10/image-20240610213632-1.png\" style=\"height:136px; width:774px\" /></p>\r\n\r\n<p>Как видим создался файл миграции. По сути файл содержит команды тех изменений которые мы хотим добавить в базу данных. Мы можем его открыть и посмотреть содержимое</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/10/image-20240610213759-2.png\" style=\"height:333px; width:800px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Теперь выполним уже знакомую команду и применим миграции</p>\r\n\r\n<blockquote>\r\n<p><strong>python manage.py migrate</strong></p>\r\n</blockquote>\r\n\r\n<p>Команда migrate применяет миграции ко всем приложениям, перечисленным в&nbsp;INSTALLED_APPS. Она синхронизирует базу данных с&nbsp;текущими моделями и&nbsp;существующими миграциями.</p>\r\n\r\n<p>Вот и все - первая модель, миграция и новая таблица в базе данных созданы!</p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-10T19:16:08.573Z",
    "updated_at": "2024-09-08T16:00:27.141Z",
    "photo": "photo/2024/06/10/SCR8.png",
    "is_published": true,
    "category": 3,
    "tags": [
      51,
      52
    ]
  }
},
{
  "model": "blog.article",
  "pk": 19,
  "fields": {
    "title": "Добавление полей даты/времени в модель Джанго",
    "slug": "dobavlenie-polej-datyivremeni-v-model-dzhango",
    "content": "<p>После того как мы <a href=\"/dzhango/sozdanie-modeli-v-dzhango/\">создали модель Post</a> с базовыми полями title, slug и body, мы можем расширить данную модель и добавить некоторые другие полезные поля. Например, у каждой статьи будет дата создания, дата изменения а также дата публикации.</p>\r\n\r\n<p>Добавим импорт модуля timezone - он нам пригодится для хранения даты с учетом часового пояса</p>\r\n\r\n<p><strong>from django.utils import timezone</strong></p>\r\n\r\n<p>А также добавим в модель Post соответствующие поля</p>\r\n\r\n<blockquote>\r\n<p>publish = models.DateTimeField(default=timezone.now)</p>\r\n\r\n<p>created = models.DateTimeField(auto_now_add=True)</p>\r\n\r\n<p>updated = models.DateTimeField(auto_now=True)</p>\r\n</blockquote>\r\n\r\n<p>Теперь выглядит так</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/14/image-20240614182508-1.png\" style=\"height:413px; width:559px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n\t<li><strong>publish</strong>: поле с&nbsp;типом DateTimeField, которое транслируется в&nbsp; столбец DATE TIME в&nbsp; базе данных SQL. Оно будет использоваться для хранения даты и&nbsp;времени публикации поста. По умолчанию значения поля задаются методом Django timezone.now. Обратите внимание, что для того, чтобы использовать этот метод, был импортирован модуль timezone. Метод timezone.now возвращает текущую дату/время в&nbsp;формате, зависящем от часового пояса. Его можно трактовать как версию стандартного метода Python datetime.now с&nbsp;учетом часового пояса;</li>\r\n\t<li><strong>created</strong>: поле с&nbsp;типом DateTimeField. Оно будет использоваться для хранения даты и времени создания поста. При применении параметра auto_now_add дата будет сохраняться автоматически во время создания объекта;</li>\r\n\t<li><strong>updated</strong>: поле с&nbsp;типом DateTimeField. Оно будет использоваться для хранения последней даты и&nbsp;времени обновления поста. При применении параметра auto_now дата будет обновляться автоматически во время сохранения объекта.</li>\r\n</ul>\r\n\r\n<p>Тут важный момент что если настройка USE_TZ=True то дата будет привязана к временной зоне. По умолчанию она UTC.</p>\r\n\r\n<p>Но можно также установить и калининградское время например</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/04/image-20240904165009-1.png\" style=\"height:165px; width:545px\" /></p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-10T19:57:27.005Z",
    "updated_at": "2024-09-08T15:59:08.827Z",
    "photo": "photo/2024/06/14/fotolia_23499258_subscription_xl_3.jpg",
    "is_published": true,
    "category": 3,
    "tags": [
      21,
      50
    ]
  }
},
{
  "model": "blog.article",
  "pk": 20,
  "fields": {
    "title": "Создание Git репозитория для проекта Джанго",
    "slug": "sozdanie-git-repozitoriya-dlya-proekta-dzhango",
    "content": "<p><strong>Git &mdash; это распределённая система контроля версий.</strong></p>\r\n\r\n<p>Она позволяет следить за происходящими изменениями, а также работать над одним заданием одновременно нескольким разработчикам. Например, контроль версий помогает отслеживать исправления в текстовых документах или сохранять версии изменённых файлов.</p>\r\n\r\n<p>Для веб-проектов на Джанго Git очень полезная а порой незаменимая система благодаря которой всегда можно вернуться к предыдущей рабочей версии или внедрять параллельно разный функционал не переживая о том что что-то нужно переделать когда можно просто вернуться к нужной версии вашего проекта.</p>\r\n\r\n<p>В VS code создать Git репозиторий очень просто - есть специальный раздел Source Control и там кнопка Initialize Repository</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/12/image-20240612203213-1.png\" style=\"height:597px; width:317px\" /></p>\r\n\r\n<p>Если открыть папку с проектом то увидите новую скрытую папку .git в которой и будет храниться вся информация о версиях.</p>\r\n\r\n<p>А в самом VS code все файлы теперь отображаются с особыми метками&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/12/image-20240612203904-2.png\" style=\"height:540px; width:328px\" /></p>\r\n\r\n<p>Если удалить папку .git то и Git репозиторий удалится. Давайте так и сделаем. После удаления файлы и папки в разделе VS Code вернулись в прежнее состояние.</p>\r\n\r\n<p>Ту же самую процедуру можно произвести с помощью специальной команды в терминале</p>\r\n\r\n<blockquote>\r\n<p>git init</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/06/12/image-20240612204429-1.png\" style=\"height:216px; width:814px\" /></p>\r\n\r\n<p>Обычно нам не нужно чтобы все файлы попадали в репозиторий. Например, файлы самого редактора VS Code, файлы кеша настройки линтера совсем не обязательны. Для того чтобы перечисленные файлы игнорировались, существует специальный файл .gitignore который должен находиться в корне проекта и выглядеть&nbsp; как-то так</p>\r\n\r\n<p>.vscode</p>\r\n\r\n<p>.pylintrc</p>\r\n\r\n<p>__pycache__/</p>\r\n\r\n<p>Как только мы добавли файл, кол-во индексируемых файлов изменилось</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/12/image-20240612205045-2.png\" style=\"height:277px; width:551px\" /></p>\r\n\r\n<p>Буква U напроти файлов означает Untracked (неотслеживаемый).</p>\r\n\r\n<p>Чтобы перевести сразу все файлы в отслеживаемое состояние можно выполнить команду&nbsp;</p>\r\n\r\n<blockquote>\r\n<p>git add .</p>\r\n</blockquote>\r\n\r\n<p>либо выбрав опцию Stage All changes</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/12/image-20240612210059-3.png\" style=\"height:408px; width:383px\" /></p>\r\n\r\n<p>файлы можно добавлять в отслеживание также по отдельности</p>\r\n\r\n<p>После добавления у файлов буква изменится на A - Added</p>\r\n\r\n<p>Ну и осталось создать commit (своего рода точка сохранения).</p>\r\n\r\n<p>Все добавленные в остлеживание файлы при коммите будут сохранены (запомнены) в соответствующей версии коммита</p>\r\n\r\n<p>Опять-таки можно сделать это через терминал командой&nbsp;</p>\r\n\r\n<blockquote>\r\n<p>git commit -m &quot;сообщение вида - добавлена модель, переопределены настройки, создано приложение и т.п.&quot;</p>\r\n</blockquote>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-12T18:43:01.491Z",
    "updated_at": "2024-09-08T15:57:50.978Z",
    "photo": "photo/2024/06/12/SCR9.png",
    "is_published": true,
    "category": 5,
    "tags": [
      49
    ]
  }
},
{
  "model": "blog.article",
  "pk": 21,
  "fields": {
    "title": "Связка локального Git репозитория с Github",
    "slug": "svyazka-lokalnogo-git-repozitoriya-s-github",
    "content": "<p>Итак, мы <a href=\"/git/sozdanie-git-repozitoriya-dlya-proekta-dzhango/\">создали локальный Git-репозиторий</a>. Теперь хотелось бы иметь возможность сохранить наш проект удаленно, например на хостинге репозиториев <a href=\"https://github.com/\">Github</a>.&nbsp;</p>\r\n\r\n<p><strong>GitHub </strong>&mdash; это сервис для совместной разработки и хостинга проектов. C помощью GitHub над кодом проекта может работать неограниченное количество программистов из любых точек мира. В GitHub есть система контроля (управления) версий Git: сервис позволяет просматривать и контролировать любые изменения кода любым разработчиком и возвращаться к состоянию до изменений.</p>\r\n\r\n<p>Таким, образом связав наш проект с Github, мы в любой момент, даже потеряв локальные данные, можем восстановить их скачав с удаленного репозитория, можем поделиться кодом проекта с другими программистами причем можно работать над проектом совместно.&nbsp;</p>\r\n\r\n<p>Сначала создайте новый аккаунт -&nbsp;<a href=\"https://github.com/signup\">https://github.com/signup</a>.</p>\r\n\r\n<p>Далее создайте новый репозиторий -&nbsp;<a href=\"https://github.com/new\">https://github.com/new</a>.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/14/image-20240614173005-1.png\" style=\"height:458px; width:832px\" /></p>\r\n\r\n<p>Выбирем пункт Private решать кто имеет доступ к репозиторию.</p>\r\n\r\n<p>Так как мы уже создали локальный репозиторий выполним команды из нижнего блока</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/14/image-20240614173258-2.png\" style=\"height:464px; width:800px\" /></p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/14/image-20240614173610-3.png\" style=\"height:277px; width:800px\" /></p>\r\n\r\n<p>Готово!</p>\r\n\r\n<p>Тепеь если обновить страницу репозитория на Github мы увидим все наши файлы попавшие в последний коммит&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/14/image-20240614173804-1.png\" style=\"height:323px; width:803px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-14T15:28:44.283Z",
    "updated_at": "2024-09-08T15:57:01.112Z",
    "photo": "photo/2024/06/14/github.jpg",
    "is_published": true,
    "category": 5,
    "tags": [
      48
    ]
  }
},
{
  "model": "blog.article",
  "pk": 22,
  "fields": {
    "title": "Определение предустановленного порядка  сортировки",
    "slug": "opredelenie-predustanovlennogo-poryadka-sortirovki",
    "content": "<p>Посты блога обычно отображаются на странице в&nbsp;обратном хронологическом порядке (от самых новых к&nbsp;самым старым). В&nbsp;нашей модели мы определим заранее заданный порядок. Он будет применяться при извлечении объектов из базы данных, в&nbsp;случае если в&nbsp;запросе порядок не будет указан.</p>\r\n\r\n<p>Добавим в нашу модель специальный класс Meta</p>\r\n\r\n<blockquote>\r\n<p>&nbsp; &nbsp; class Meta:</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; ordering = [&#39;-publish&#39;]</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/06/14/image-20240614174641-1.png\" style=\"height:360px; width:609px\" /></p>\r\n\r\n<p>Мы используем атрибут ordering, сообщающий Django, что он должен сортировать результаты по полю publish. Указанный порядок будет применяться по умолчанию для запросов к&nbsp;базе данных, когда в&nbsp;запросе не указан конкретный порядок. Убывающий порядок задается с&nbsp;по мощью дефиса перед именем поля: <strong>-publish</strong>. По умолчанию посты будут возвращаться в&nbsp;обратном хронологическом порядке.</p>",
    "created_at": "2024-06-14T15:47:51.958Z",
    "updated_at": "2024-09-08T15:56:15.327Z",
    "photo": "",
    "is_published": true,
    "category": 3,
    "tags": [
      41,
      47
    ]
  }
},
{
  "model": "blog.article",
  "pk": 23,
  "fields": {
    "title": "Добавление индекса базы данных",
    "slug": "dobavlenie-indeksa-bazyi-dannyih",
    "content": "<p><strong>Индекс</strong> - это объект БД, содержащий упорядоченные значения указанных столбцов таблицы и ссылки на физическое размещение записи с данными значениями.<br />\r\nИндекс позволяет ускорить поиск данных в таблице и упорядочивание данных. Обычно пользователи или администраторы БД сами создают необходимые для этого индексы с помощью оператора CREATE INDEX.</p>\r\n\r\n<p>Подробнее об индесках можно почитать <a href=\"https://sql-academy.org/ru/guide/indexes\">здесь</a>.</p>\r\n\r\n<p>Нас же интересует как создать Индекс для нашей баз данных в Джанго?</p>\r\n\r\n<p>Давайте определим индекс базы данных по полю <strong>publish</strong>. Индекс повысит производительность запросов, фильтрующих или упорядочивающих результаты по указанному полю. Мы ожидаем, что многие запросы извлекут преимущества из этого индекса, поскольку для упорядочивания результатов мы по умолчанию используем поле publish.</p>\r\n\r\n<p>Добавим атрибут indexes в наш класс Meta</p>\r\n\r\n<blockquote>\r\n<p>indexes = [</p>\r\n\r\n<p style=\"margin-left:40px\">models.Index(fields=[&#39;-publish&#39;]),</p>\r\n\r\n<p>]</p>\r\n</blockquote>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/14/image-20240614181729-1.png\" style=\"height:146px; width:475px\" /></p>\r\n\r\n<p>Был добавлен индекс по полю publish, а&nbsp;перед именем поля применен дефис, чтобы определить индекс в&nbsp; убывающем порядке.</p>\r\n\r\n<blockquote>\r\n<p>Индексное упорядочивание в&nbsp; MySQL не поддерживается. Если в&nbsp; качестве базы данных вы используете MySQL, то убывающий индекс будет создаваться как обычный индекс.</p>\r\n</blockquote>\r\n\r\n<p>Затем создадим и выполним миграции базы данных.</p>\r\n\r\n<p>Рассмотрите возможность создания индексов для полей, которые часто запрашиваются&nbsp;<br />\r\nметодами filter(), exclude() или order_by(). Поля ForeignKey либо поля с параметром unique=True подразумевают создание индекса.</p>",
    "created_at": "2024-06-14T16:20:41.457Z",
    "updated_at": "2024-09-08T15:55:48.169Z",
    "photo": "photo/2024/06/14/SCR9.png",
    "is_published": true,
    "category": 3,
    "tags": [
      41,
      46
    ]
  }
},
{
  "model": "blog.article",
  "pk": 24,
  "fields": {
    "title": "Добавление поля статуса",
    "slug": "dobavlenie-polya-statusa",
    "content": "<p>Очень часто в&nbsp; функциональность ведения блогов входит хранение постов в&nbsp;виде черновика до тех пор, пока они не будут готовы к&nbsp;публикации. Мы добавим в&nbsp;модель поле статуса, которое позволит управлять статусом постов блога. В&nbsp; постах будут использоваться статусы Draft (Черновик) и&nbsp;Published (Опубликован).</p>\r\n\r\n<p>Добавим в нашу модель Post еще один класс который будет наследоваться от&nbsp;models.TextChoices</p>\r\n\r\n<blockquote>\r\n<p>class Status(models.TextChoices):</p>\r\n\r\n<p style=\"margin-left:40px\">DRAFT = &#39;DF&#39;, &#39;Draft&#39;</p>\r\n\r\n<p style=\"margin-left:40px\">PUBLISHED = &#39;PB&#39;, &#39;Published&#39;</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/06/14/image-20240614184645-2.png\" style=\"height:145px; width:398px\" /></p>\r\n\r\n<p>и добавим непосредственно новое поле status</p>\r\n\r\n<blockquote>\r\n<p>status = models.CharField(max_length=2, choices=Status.choices, default=Status.DRAFT)</p>\r\n</blockquote>\r\n\r\n<p>Теперь поля нашей модели выглядят так</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/14/image-20240614185035-3.png\" style=\"height:221px; width:638px\" /></p>\r\n\r\n<p>значениями выступают DF и&nbsp;PB, а&nbsp;их метками или читаемыми именами являются Draft и&nbsp;Published.</p>\r\n\r\n<p>Перечисляемые типы основаны на объекте enum стандартной библиотеки Python.</p>\r\n\r\n<p>Для того чтобы получать имеющиеся варианты, можно обращаться к&nbsp;вариантам статуса (<strong>Post.Status.choices</strong>), для того чтобы получать удобочитаемые имена&nbsp;&ndash; к&nbsp; меткам статуса (<strong>Post.Status.labels</strong>), и&nbsp; для того чтобы получать фактические значения вариантов&nbsp;&ndash; к&nbsp;значениям статуса (<strong>Post.Status.values</strong>).</p>\r\n\r\n<p>Как обычно после изменения модели, обновим миграции и применим.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/14/image-20240614185237-1.png\" style=\"height:262px; width:767px\" /></p>\r\n\r\n<p>Можно потестивовать используя <a href=\"http://127.0.0.1:8002/dzhango/poleznyij-dzhango-modul-django-extensions-shellplus/\">shell_plus</a>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/04/image-20240904184108-1.png\" style=\"height:477px; width:800px\" /></p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-14T16:51:40.617Z",
    "updated_at": "2024-09-08T15:55:20.757Z",
    "photo": "",
    "is_published": true,
    "category": 3,
    "tags": [
      45
    ]
  }
},
{
  "model": "blog.article",
  "pk": 25,
  "fields": {
    "title": "Добавление взаимосвязи многие-к-одному",
    "slug": "dobavlenie-vzaimosvyazi-mnogie-k-odnomu",
    "content": "<p>Как известно, слово &quot;реляционные&quot; применительно к базам данных идет от английского Relation - то есть Отношение.</p>\r\n\r\n<p>То есть для того чтобы база данных была &quot;реляционной&quot; между ее таблицами должны быть отношения.&nbsp;</p>\r\n\r\n<p>Есть разные типы связей между таблицами. Одной из распространенных является Многие-к-одному. Например у многих статей на сайте может быть один автор. Ну или у одного автора может быть много статей, но никак не наоборот.</p>\r\n\r\n<p>В данной статье мы как раз создадим связь <strong>Многие-к-одному</strong> для нашей модели Post.</p>\r\n\r\n<p>Для упрощения задачи будем использовать специальную модель User из встроенного в Django фреймворка аутентификации который располагается в&nbsp;пакете django.contrib.auth.</p>\r\n\r\n<p>В файле models.py импортируем модель User</p>\r\n\r\n<blockquote>\r\n<p>from django.contrib.auth.models import User</p>\r\n</blockquote>\r\n\r\n<p>Также непосредственно в модель добавим новое поле author</p>\r\n\r\n<blockquote>\r\n<p>author = models.ForeignKey(User, on_delete=models.CASCADE, related_name=&#39;blog_posts&#39;)</p>\r\n</blockquote>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/18/image-20240618153830-1.png\" style=\"height:507px; width:661px\" /></p>\r\n\r\n<p>Поле определяется через класс&nbsp;ForeignKey который создает внешний ключ для таблицы post.</p>\r\n\r\n<p>Параметр on_delete определяет поведение, которое следует применять при удалении объекта, на который есть ссылка. Это поведение не относится конкретно к&nbsp;Django, оно является стандартным для SQL. Использование ключевого слова CASCADE указывает на то, что при удалении пользователя, на которого есть ссылка, база данных также удалит все связанные с&nbsp;ним посты в&nbsp;блоге. Со всеми возможными опциями можно ознакомиться по адресу <a href=\"https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.ForeignKey.on_delete\">https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.ForeignKey.on_delete</a>.</p>\r\n\r\n<p>Мы используем <strong>related_name</strong>, чтобы указывать имя обратной связи, от User к&nbsp;Post. Такой подход позволит легко обращаться к&nbsp;связанным объектам из объекта User, используя обозначение <strong>user.blog_posts</strong>.</p>\r\n\r\n<p>Как обычно после внесения изменений в модель необходимо создать и применить миграции.</p>\r\n\r\n<p>Отметим также, что если бы мы не определили&nbsp;<strong>related_name,&nbsp;</strong>то по умолчанию было бы определено значение вида &lt;model_set&gt;. В нашем случае user.post_set.all()</p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-18T13:33:44.447Z",
    "updated_at": "2024-09-08T15:54:41.891Z",
    "photo": "photo/2024/06/18/SCR2.png",
    "is_published": true,
    "category": 3,
    "tags": [
      8,
      9
    ]
  }
},
{
  "model": "blog.article",
  "pk": 26,
  "fields": {
    "title": "Создание Суперпользователя",
    "slug": "sozdanie-superpolzovatelya",
    "content": "<p>В веб-сленге часто можно встретить выражение <strong>суперпользователь</strong>. Обычно это пользователь с неограниченными правами.</p>\r\n\r\n<p>Подобный пользователь есть в базах данных или в Unix системах (root).&nbsp;</p>\r\n\r\n<p>В Джанго также есть свой Суперпользователь - это пользователь-администратор с&nbsp;самым высоким уровнем разрешений.</p>\r\n\r\n<p>Создается он просто через командную строку следующей командой</p>\r\n\r\n<blockquote>\r\n<p>python manage.py createsuperuser</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/06/18/image-20240618160633-1.png\" style=\"height:263px; width:779px\" /></p>\r\n\r\n<p>Как показано выше надо будет ответить на ряд простых вопросов. В качестве пароля лучше выбрать что-то посложнее но для тестового сайта можно использовать и простой пароль.</p>",
    "created_at": "2024-06-18T14:09:02.739Z",
    "updated_at": "2024-09-08T15:53:51.748Z",
    "photo": "photo/2024/06/18/uperuser.jpg",
    "is_published": true,
    "category": 3,
    "tags": [
      44
    ]
  }
},
{
  "model": "blog.article",
  "pk": 27,
  "fields": {
    "title": "Создание сайта администрирования для моделей",
    "slug": "sozdanie-sajta-administrirovaniya-dlya-modelej",
    "content": "<p>Django идет в&nbsp;комплекте со встроенным интерфейсом администрирования, который широко используется для редактирования контента. Сайт Django формируется динамически путем чтения метаданных моделей и&nbsp;предоставления готового к&nbsp;работе интерфейса для редактирования контента. Его можно использовать прямо &laquo;из коробки&raquo;, сконфигурировав его так, чтобы ваши модели отображались в&nbsp;нем в&nbsp;том виде, в&nbsp;котором вы хотите. Приложение django.contrib.admin уже вставлено в&nbsp;настроечный параметр INSTALLED_APPS, поэтому добавлять его нет необходимости.</p>\r\n\r\n<p>Например, мы <a href=\"/dzhango/sozdanie-modeli-v-dzhango/\">создали модель Post</a> и теперь хотим создавать и редактировать статьи из админки.</p>\r\n\r\n<p>Для начала нужно <a href=\"/dzhango/sozdanie-superpolzovatelya/\">создать суперпользователя</a>.&nbsp;</p>\r\n\r\n<p>Затем запустить сервер разработки и пройти по адресу&nbsp;<a href=\"http://127.0.0.1:8000/admin\">http://127.0.0.1:8000/admin</a>.</p>\r\n\r\n<p>Вы увидете окно входа в админ панель</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/18/image-20240618165312-1.png\" style=\"height:342px; width:436px\" /></p>\r\n\r\n<p>Введите данные суперпользователя</p>\r\n\r\n<p>Но в начале вы увидете лишь возможность редактировать группы и пользователей</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/18/image-20240618165419-1.png\" style=\"height:283px; width:800px\" /></p>\r\n\r\n<p>А как же статьи?</p>\r\n\r\n<p>Для этого нам нужно отредактировать файл admin.py нашего приложения</p>\r\n\r\n<p>импортируем модель Post и зарегистрируем</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/18/image-20240618165727-1.png\" style=\"height:250px; width:664px\" /></p>\r\n\r\n<p>Обновим страницу и увидим что модель редактируема в админке</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/18/image-20240618165807-2.png\" style=\"height:355px; width:644px\" /></p>",
    "created_at": "2024-06-18T14:47:56.095Z",
    "updated_at": "2024-09-08T15:53:59.000Z",
    "photo": "",
    "is_published": true,
    "category": 3,
    "tags": [
      43
    ]
  }
},
{
  "model": "blog.article",
  "pk": 28,
  "fields": {
    "title": "Настройка административной панели Джанго",
    "slug": "nastrojka-administrativnoj-paneli-dzhango",
    "content": "<p>После того как мы <a href=\"/dzhango/sozdanie-sajta-administrirovaniya-dlya-modelej/\">создали административный сайт</a>, мы имеем возможность редактировать наши модели.</p>\r\n\r\n<p>Но это еще не всё! Джанго дает возможность гибкой настройки административного сайта.</p>\r\n\r\n<p>И делается это необычайно просто. Во-первых нужно чуть изменить регистрацию модели в админке.</p>\r\n\r\n<p>Заменим эту запись</p>\r\n\r\n<blockquote>\r\n<p>admin.site.register(Post)</p>\r\n</blockquote>\r\n\r\n<p>на такую</p>\r\n\r\n<blockquote>\r\n<p>@admin.register(Post)<br />\r\nclass PostAdmin(admin.ModelAdmin):<br />\r\n&nbsp; &nbsp; &nbsp; list_display = [&#39;title&#39;, &#39;slug&#39;, &#39;author&#39;, &#39;publish&#39;, &#39;status&#39;]</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/06/19/image-20240619155931-1.png\" style=\"height:240px; width:759px\" /></p>\r\n\r\n<p>Атрибут <strong>list_display </strong>позволяет задавать поля модели, которые вы хотите показывать на странице списка объектов администрирования. Декоратор <strong>@admin.register()</strong> выполняет ту же функцию, что и&nbsp;функция admin.site.register(), которую мы заменили, регистрируя декорируемый им класс ModelAdmin.</p>\r\n\r\n<p>Добавим также другие опции</p>\r\n\r\n<blockquote>\r\n<p>list_filter = [&#39;status&#39;, &#39;created&#39;, &#39;publish&#39;, &#39;author&#39;]</p>\r\n\r\n<p>search_fields = [&#39;title&#39;, &#39;body&#39;]</p>\r\n\r\n<p>prepopulated_fields = {&#39;slug&#39;: (&#39;title&#39;,)}</p>\r\n\r\n<p>raw_id_fields = [&#39;author&#39;]</p>\r\n\r\n<p>date_hierarchy = &#39;publish&#39;</p>\r\n\r\n<p>ordering = [&#39;status&#39;, &#39;publish&#39;]</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/06/19/image-20240619160149-2.png\" style=\"height:361px; width:717px\" /></p>\r\n\r\n<p><strong>list_filter</strong> позволяет фильтровать результаты по полям.</p>\r\n\r\n<p><strong>search_fields</strong> позволяет вести поиск по полям</p>\r\n\r\n<p><strong>date_hierarchy </strong>- навигация по датам</p>\r\n\r\n<p><strong>ordering </strong>- сортировка по полям</p>\r\n\r\n<p><strong>prepopulated_fields </strong>- автоматическое заполнение поля slug на основании поля title причем если начать печатать на кириллице, будет происходить автоматическая транслитерация!</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/19/image-20240619160657-1.png\" style=\"height:244px; width:536px\" /></p>\r\n\r\n<p>raw_id_fields - заменяет выпадающий список с возможными значениями авторов на обычное поле с добавлением id (можно также проводить поиск из списка авторов). Это больше для нагляности возможностей админки.</p>\r\n\r\n<p>Это лишь базовые настройки. Можно настраивать админ панель еще круче но и этих возможностей уже для много вполне достаточно.</p>",
    "created_at": "2024-06-19T14:05:47.543Z",
    "updated_at": "2024-09-08T15:53:27.121Z",
    "photo": "",
    "is_published": true,
    "category": 3,
    "tags": [
      43
    ]
  }
},
{
  "model": "blog.article",
  "pk": 29,
  "fields": {
    "title": "Базовая работа с наборами запросов QuerySet и SQL-менеджерами",
    "slug": "bazovaya-rabota-s-naborami-zaprosov-queryset-i-sql-menedzherami",
    "content": "<p>Встроенный в&nbsp;Django объектно-реляционный преобразователь <strong>ORM (object-relational mapper)</strong>&nbsp;&ndash; это мощный API абстракции базы данных, который позволяет легко создавать, извлекать, обновлять и удалять объекты. ORM-преобразователь дает возможность генерировать запросы на языке SQL, используя объектно-ориентированную парадигму Python. Его можно трактовать как способ взаимодействия с&nbsp;базой данных в&nbsp;Python&rsquo;овском стиле вместо написания сырых SQL-запросов.</p>\r\n\r\n<p>ORM-преобразователь соотносит модели с&nbsp;таблицами базы данных и&nbsp;предоставляет простой Python&rsquo;овский интерфейс взаимодействия с&nbsp;базой данных. ORM-преобразователь генерирует SQL-запросы и&nbsp;соотносит результаты с&nbsp;объектами модели. ORM-преобразователь совместим с&nbsp;реляционными системами управления базами данных <strong>MySQL, PostgreSQL, SQLite, Oracle и&nbsp;MariaDB</strong>.</p>\r\n\r\n<p>Встроенный в&nbsp;Django ORM-преобразователь основан на итерируемых наборах запросов <strong>QuerySet</strong>. Итерируемый набор запросов QuerySet&nbsp;&ndash; это коллекция запросов к&nbsp;базе данных, предназначенных для извлечения объектов из базы данных. К&nbsp;наборам запросов можно применять фильтры, чтобы сужать результаты запросов на основе заданных параметров.</p>\r\n\r\n<p>например,</p>\r\n\r\n<blockquote>\r\n<p>user = User.objects.get(username=&#39;admin&#39;)</p>\r\n</blockquote>\r\n\r\n<p>Метод get() позволяет извлекать из базы данных только один объект. Обратите внимание, что этот метод ожидает результат, совпадающий с&nbsp;запросом. Если база данных не возвращает результатов, то указанный метод вызовет исключение <strong>DoesNotExist</strong>, а&nbsp;если база данных возвращает более одного результата, то он вызовет исключение <strong>MultipleObjectsReturned</strong>. Оба исключения являются атрибутами модельного класса, на котором выполняется запрос.</p>\r\n\r\n<p style=\"text-align:center\"><span style=\"font-size:16px\"><strong>Получить данные из базы легко, а как наоборот записать данные в базу?</strong></span></p>\r\n\r\n<p>Для этого можно использовать метод <strong>save()</strong>.</p>\r\n\r\n<p>Сначала создадим объект модели Post</p>\r\n\r\n<blockquote>\r\n<p>post = Post(title=&#39;Another post&#39;, slug=&#39;another-post&#39;, body=&#39;Post body.&#39;, author=user)</p>\r\n</blockquote>\r\n\r\n<p>затем сохраним в базу - <strong>post.save()</strong>. Все очень просто!</p>\r\n\r\n<p>Приведенное выше действие за кулисами выполняет инструкцию <strong>SQL INSERT</strong>.</p>\r\n\r\n<p>Тоже самое можно сделать за одну операцию используя метод <strong>create</strong>. Вот так:</p>\r\n\r\n<blockquote>\r\n<p>Post.objects.create(title=&#39;One more post&#39;, slug=&#39;one-more-post&#39;, body=&#39;Post body.&#39;, author=user)</p>\r\n</blockquote>\r\n\r\n<p>Обратите внимание что slug в данном случае приходится писать вручную, т.к. автозаполнение работает пока только в админке.</p>\r\n\r\n<p>Для обновления данных (SQL UPDATE), нужно сначала получить объект из базы, затем поменять значение нужных полей и затем сохранить.&nbsp;</p>\r\n\r\n<blockquote>\r\n<p><strong>Вносимые в&nbsp;модельный объект изменения не сохраняются в&nbsp;базе данных до тех пор, пока не будет вызван метод save().</strong></p>\r\n</blockquote>",
    "created_at": "2024-06-19T14:30:08.983Z",
    "updated_at": "2024-09-08T15:52:58.145Z",
    "photo": "photo/2024/06/19/orm.jpg",
    "is_published": true,
    "category": 4,
    "tags": [
      41,
      42
    ]
  }
},
{
  "model": "blog.article",
  "pk": 30,
  "fields": {
    "title": "Работа с ORM Джанго",
    "slug": "rabota-s-orm-dzhango",
    "content": "<p>Прежде чем читать данную статью рекомендуем прочесть про&nbsp;<a href=\"/baza-dannyih/bazovaya-rabota-s-naborami-zaprosov-queryset-i-sql-menedzherami/\">Базовую работу с наборами запросов QuerySet и SQL-менеджерами</a>.&nbsp;</p>\r\n\r\n<p>Каждая модель Django имеет по меньшей мере один модельный менеджер, а&nbsp;менеджер, который применяется по умолчанию, называется <strong>objects</strong>. Набор запросов QuerySet можно получать с&nbsp;помощью модельного менеджера.</p>\r\n\r\n<p>Метод <strong>all </strong>- извлечь все объекты из таблицы.</p>\r\n\r\n<blockquote>\r\n<p>all_posts = Post.objects.all()</p>\r\n</blockquote>\r\n\r\n<p>Причем нужно отметить что&nbsp;Наборы запросов QuerySet в Django являются ленивыми, то есть они вычисляются только тогда, когда это приходится делать. Подобное поведение придает&nbsp;наборам запросов QuerySet большую эффективность.</p>\r\n\r\n<p>Метод <strong>filter </strong>- фильтровать объекты - что-то типа SQL WHERE.</p>\r\n\r\n<blockquote>\r\n<p>Post.objects.filter(publish__year=2022)</p>\r\n</blockquote>\r\n\r\n<blockquote>\r\n<p>Обратите внимание на двойное подчеркивание.&nbsp;Запросы с&nbsp;операциями поиска в&nbsp;полях формируются с&nbsp;использованием двух знаков подчеркивания, например <strong>publish__year</strong>, но те же обозначения также используются для обращения к&nbsp;полям ассоциированных моделей, например <strong>author__username</strong>.</p>\r\n</blockquote>\r\n\r\n<p>метод filter применяется к набору QuerySet и возвращает набор. Поэтому его можно применять по цепочке типа</p>\r\n\r\n<blockquote>\r\n<p>Post.objects.filter(publish__year=2022).filter(author__username=&#39;admin&#39;)&nbsp;</p>\r\n</blockquote>\r\n\r\n<p>Метода <strong>exclude </strong>- исключить из набора определенные записи</p>\r\n\r\n<blockquote>\r\n<p>Post.objects.filter(publish__year=2022).exclude(title__startswith=&#39;Why&#39;)</p>\r\n</blockquote>\r\n\r\n<p>Метода <strong>order_by </strong>- сортировать объекты. По умолчанию сортировка по возрастанию. Для сортировки по убыванию нужно испозовать префикс с&nbsp;отрицательным знаком.</p>\r\n\r\n<blockquote>\r\n<p>Post.objects.order_by(&#39;title&#39;)</p>\r\n</blockquote>\r\n\r\n<p>Метод <strong>delete </strong>- удаляет объект.</p>\r\n\r\n<blockquote>\r\n<p>post = Post.objects.get(id=1)</p>\r\n\r\n<p>post.delete()</p>\r\n</blockquote>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-19T14:47:29.882Z",
    "updated_at": "2024-09-08T15:52:28.450Z",
    "photo": "photo/2024/06/19/orm_zRkTvPy.jpg",
    "is_published": true,
    "category": 4,
    "tags": [
      41,
      42
    ]
  }
},
{
  "model": "blog.article",
  "pk": 31,
  "fields": {
    "title": "Создание модельных менеджеров",
    "slug": "sozdanie-modelnyih-menedzherov",
    "content": "<p>Итак, мы уже имеем представление о том <a href=\"/baza-dannyih/rabota-s-orm-dzhango/\">как работать с ORM Джанго</a>. И мы знаем что&nbsp;менеджер, который применяется по умолчанию, называется <strong>objects</strong>. Джанго также позволяет создавать собственные модельные менеджеры. Их еще называют менеджеры контекста или SQL-менеджеры. Менеджер по умолчанию используется например так</p>\r\n\r\n<blockquote>\r\n<p>all_posts = Post.objects.all()</p>\r\n</blockquote>\r\n\r\n<p>Данный код вернет абсолютно все имеющиеся статьи из базы данных. Это равносильно SQL запросу&nbsp;</p>\r\n\r\n<p>SELECT * from blog_post (префикс blog появился т.к. приложение мы назвали blog).</p>\r\n\r\n<p>А вот так мы можем получить все посты со статусом Published</p>\r\n\r\n<blockquote>\r\n<p>all_published_posts =&nbsp;Post.objects.filter(status=Post.Status.PUBLISHED)</p>\r\n</blockquote>\r\n\r\n<p>Но зачастую нам для отображения на сайте будут нужны лишь опубликованные статьи и чтобы всякий раз не фильровать дополнительно запрос, можно создать отдельный менеджер который сразу будет выдавать опубликованные статьи.</p>\r\n\r\n<p>Отредактируем файл models.py приложения blog, добавив следующий код</p>\r\n\r\n<blockquote>\r\n<p>class PublishedManager(models.Manager):<br />\r\n&nbsp; &nbsp; &nbsp;def get_queryset(self):<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;return super().get_queryset().filter(status=Post.Status.PUBLISHED)</p>\r\n</blockquote>\r\n\r\n<p>Непосредственно в модель Post добавим следующий код</p>\r\n\r\n<blockquote>\r\n<p>objects = models.Manager() # менеджер, применяемый по умолчанию<br />\r\npublished = PublishedManager() # наш кастомный менеджер</p>\r\n</blockquote>\r\n\r\n<p>Если менеджер в&nbsp;модели не определен, то Django автоматически создает для нее стандартный менеджер objects. Если в&nbsp;своей модели вы объявляете какие-либо менеджеры, но также хотите сохранить менеджер objects, то вы должны добавить его в&nbsp;свою модель явным образом. В&nbsp;приведенном выше исходном коде мы добавили в&nbsp; модель Post стандартный менеджер objects и&nbsp; конкретно-прикладной менеджер published.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/19/image-20240619174227-1.png\" style=\"height:628px; width:717px\" /></p>\r\n\r\n<p>Теперь наряду с objects мы можем получать данные так</p>\r\n\r\n<blockquote>\r\n<p>Post.published.all()</p>\r\n</blockquote>",
    "created_at": "2024-06-19T15:35:40.304Z",
    "updated_at": "2024-09-08T15:51:29.912Z",
    "photo": "photo/2024/06/19/orm_ZumG1JX.jpg",
    "is_published": true,
    "category": 4,
    "tags": [
      41,
      42
    ]
  }
},
{
  "model": "blog.article",
  "pk": 32,
  "fields": {
    "title": "Разработка представлений списка и детальной информации в Джанго",
    "slug": "razrabotka-predstavlenij-spiska-i-detalnoj-informatsii-v-dzhango",
    "content": "<p>В веб-разработке при использовании фреймворков достаточно распространенной архитектурой приложений (или паттерном проектирования) является MVC - <strong>Model-View-Controller</strong>.</p>\r\n\r\n<ul>\r\n\t<li><strong>Model </strong>(модель) обычно отвечает за работу с базой данных - это обычно меппинг между реальными таблицами и сущностями во фреймворке с возможностью делать выборки данных, добавлять и обновлять данные.&nbsp;</li>\r\n\t<li><strong>View </strong>(вью/представление) - это слой отображения данных на страницах сайта. Во вьюшках мы обычно можем наблюдать спшлоной HTML с вкраплениями динамических данных и джаваскрипт.</li>\r\n\t<li><strong>Controller</strong>&nbsp;(контроллер) обычно отвечает за маршрутизацию и обработку запросов к сайту и выборку данных из модели с дальнейшей передачей управления во View.</li>\r\n</ul>\r\n\r\n<p>Django имеет схожую архитектуру но несколько иную. Ее можно назвать <strong>MTV - Model-Template-View</strong>.</p>\r\n\r\n<p>&bull; <strong>модель&nbsp;</strong>&ndash; определяет логическую структуру данных и&nbsp;является обработчиком данных между базой данных и&nbsp;их представлением;</p>\r\n\r\n<p>&bull; <strong>шаблон&nbsp;</strong>&ndash; это слой представления. В&nbsp;Django используется система текстовых шаблонов, в&nbsp;которой хранится все, что браузер прорисовывает на страницах;</p>\r\n\r\n<p>&bull; <strong>представление&nbsp;</strong>&ndash; взаимодействует с&nbsp;базой данных через модель и&nbsp;передает данные в&nbsp;шаблон для их прорисовки и&nbsp;просмотра. Сам веб-фреймворк выступает в&nbsp;качестве контроллера. Он отправляет запрос в&nbsp;надлежащее представление в&nbsp;соответствии с&nbsp;конфигурацией URL-адреса</p>\r\n\r\n<p>Об этом уже говорилось в статье <a href=\"/dzhango/obschij-obzor-dzhango/\">Общий обзор Джанго</a>.</p>\r\n\r\n<p>В данной же статье поговорим о том как создавать <strong>представления в Джанго</strong> (Views)</p>\r\n\r\n<p>Добавим в файл views.py приложения blog следующий код</p>\r\n\r\n<blockquote>\r\n<p>from django.shortcuts import render<br />\r\nfrom .models import Post<br />\r\ndef post_list(request):<br />\r\n&nbsp; &nbsp;&nbsp;posts = Post.published.all()<br />\r\n&nbsp; &nbsp;&nbsp;return render(request, &#39;blog/post/list.html&#39;, {&#39;posts&#39;: posts})</p>\r\n</blockquote>\r\n\r\n<p>В данном представлении мы используем функцию <strong>render</strong>. Функция сокращенного доступа render() учитывает контекст запроса, поэтому любая переменная, установленная процессорами контекста шаблона, доступна данному шаблону. Процессоры контекста шаблона&nbsp;&ndash; это просто вызываемые объекты (функции, методы и&nbsp;классы), которые назначают контекст переменным.</p>\r\n\r\n<p>Проще говоря контекст - это данные которые нам доступны в шаблонах (наших будущих HTML файлах).</p>\r\n\r\n<p>Для отображения одного конкретного поста используем следующий код</p>\r\n\r\n<blockquote>\r\n<p>from django.http import Http404<br />\r\ndef post_detail(request, id):<br />\r\n&nbsp; &nbsp; &nbsp;try:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;post = Post.published.get(id=id)<br />\r\n&nbsp; &nbsp; &nbsp;except Post.DoesNotExist:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;raise Http404(&quot;No Post found.&quot;)<br />\r\n&nbsp; &nbsp; &nbsp;return render(request, &#39;blog/post/detail.html&#39;, {&#39;post&#39;: post})</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/06/21/image-20240621180630-1.png\" style=\"height:427px; width:731px\" /></p>",
    "created_at": "2024-06-21T15:47:56.785Z",
    "updated_at": "2024-09-08T15:50:22.317Z",
    "photo": "photo/2024/06/21/Django-Views.png",
    "is_published": true,
    "category": 3,
    "tags": [
      23
    ]
  }
},
{
  "model": "blog.article",
  "pk": 33,
  "fields": {
    "title": "Функция get_object_or_404",
    "slug": "funktsiya-getobjector404",
    "content": "<p>Мы уже знаем <a href=\"/dzhango/razrabotka-predstavlenij-spiska-i-detalnoj-informatsii-v-dzhango/\">как создавать представления списка и детальной информации</a>.&nbsp;</p>\r\n\r\n<p>Там мы использовали конструкцию try ... except для получения записи из таблицы данных о запрашиваемом посте, либо выбрасывали исключения что страница не найдена. В джанго есть специальная функция заменяющая эту конструкцию.</p>\r\n\r\n<p>Эта функция которая вполне хорошо говорит сама за себя -&nbsp;<strong>get_object_or_404</strong>.&nbsp;</p>\r\n\r\n<p>Т.к. функция импортируется из django.shortcuts то ее еще называют функцией быстрого доступа</p>\r\n\r\n<blockquote>\r\n<p>from django.shortcuts import get_object_or_404</p>\r\n</blockquote>\r\n\r\n<p>Заменим в коде также конструкцию&nbsp; try ... except на</p>\r\n\r\n<blockquote>\r\n<p>post = get_object_or_404(Post, id=id, status=Post.Status.PUBLISHED)</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/06/21/image-20240621202838-1.png\" style=\"height:367px; width:757px\" /></p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-21T18:30:03.612Z",
    "updated_at": "2024-09-08T15:49:33.612Z",
    "photo": "photo/2024/06/21/get_object.png",
    "is_published": true,
    "category": 3,
    "tags": [
      40,
      41
    ]
  }
},
{
  "model": "blog.article",
  "pk": 34,
  "fields": {
    "title": "Добавление шаблонов URL-адресов представлений",
    "slug": "dobavlenie-shablonov-url-adresov-predstavlenij",
    "content": "<p>Одной из важнейших тем Джанго являются шаблоны URL адресов. Что это такое? Когда мы пытаемся открыть определенную страницу сайта, Джанго должен понимать какую именно информацию запросили, как ее получить из базы данных, обработать и как отобразить. И первым этапом в этом процессе происходит проверка URL на соответствие шаблону.&nbsp;</p>\r\n\r\n<p>Шаблоны URL адресов должны размещаться в файлах urls.py приложений.</p>\r\n\r\n<p>Есть также основной файл urls.py нашего проекта. Он находится в корне проекта и уже содержит шаблоны для административной панели.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/21/image-20240621204440-1.png\" style=\"height:584px; width:772px\" /></p>\r\n\r\n<p>Теперь же мы хотим создать шаблоны для нашего приложения blog.</p>\r\n\r\n<p>Итак, мы <a href=\"/dzhango/razrabotka-predstavlenij-spiska-i-detalnoj-informatsii-v-dzhango/\">создали представления списка и детальной информации</a>.&nbsp;</p>\r\n\r\n<p>Создадим для них соответствующие URL-шаблоны. Для этого в папке нашего приложеня blog создаем файл urls.py.</p>\r\n\r\n<p>И добавим туда следующий код</p>\r\n\r\n<blockquote>\r\n<p>from django.urls import path<br />\r\nfrom . import views<br />\r\n<br />\r\napp_name = &#39;blog&#39;<br />\r\n<br />\r\nurlpatterns = [<br />\r\n&nbsp; &nbsp;&nbsp;# представления поста<br />\r\n&nbsp; &nbsp;&nbsp;path(&#39;&#39;, views.post_list, name=&#39;post_list&#39;),<br />\r\n&nbsp; &nbsp;&nbsp;path(&#39;&lt;int:id&gt;/&#39;, views.post_detail, name=&#39;post_detail&#39;),<br />\r\n]</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/06/21/image-20240621205239-2.png\" style=\"height:393px; width:800px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В приведенном выше исходном коде определяется именное пространство приложения с&nbsp;помощью переменной <strong>app_name</strong>. Такой подход позволяет упорядочивать URL-адреса по приложениям и при обращении к&nbsp; ним использовать имя.</p>\r\n\r\n<p>С&nbsp;помощью <strong>функции path()</strong> определяются два разных шаблона. Первый шаблон URL-адреса не принимает никаких аргументов и&nbsp;соотносится с&nbsp;представлением post_list. Второй шаблон соотносится с&nbsp;представлением <strong>post_detail</strong> и&nbsp;принимает только один <strong>аргумент id</strong>, который совпадает с&nbsp;целым числом, заданным целым числом <strong>конвертора путей int</strong>. Для захвата значений из URL-адреса используются угловые скобки. Любое значение, указанное в&nbsp; шаблоне URL-адреса как &lt;parameter&gt; , записывается в&nbsp;качестве строкового литерала. Для конкретного сопоставления и&nbsp;возврата целого числа используются конверторы путей, такие как <strong>&lt;int:year&gt;</strong>. Например, <strong>&lt;slug:post&gt;</strong> будет, в частности, совпадать со слагом (строковым литералом, который может содержать только буквы, цифры, подчеркивания или дефисы).</p>\r\n\r\n<p>Все предоставляемые веб-фреймворком Django конверторы путей можно посмотреть по адресу <a href=\"https://docs.djangoproject.com/en/5.0/topics/http/urls/#path-converters\" target=\"_blank\">https://docs.djangoproject.com/en/5.0/topics/http/urls/#path-converters</a>. Если функции path() и&nbsp; конверторов будет недостаточно, то вместо них можно использовать <strong>re_path()</strong>, чтобы определять сложные шаблоны URL-адресов с&nbsp;помощью регулярных выражений Python. Подробнее об определении шаблонов URL-адресов с&nbsp;по мощью регулярных выражений можно узнать по адресу <a href=\"https://docs.djangoproject.com/en/5.0/ref/urls/#django.urls.re_path\" target=\"_blank\">https://docs.djangoproject.com/en/5.0/ref/urls/#django.urls.re_path</a>.&nbsp;</p>\r\n\r\n<blockquote>\r\n<p>Создание файла urls.py для каждого приложения&nbsp;&ndash; это наилучший способ сделать ваши приложения пригодными для реиспользования в&nbsp;других проектах.</p>\r\n</blockquote>\r\n\r\n<p>Теперь нам осталось только добавить наши созданные пути в основной файл urls.py.</p>\r\n\r\n<p>Импортируем специальную функцию include</p>\r\n\r\n<blockquote>\r\n<p>from django.urls import path, include</p>\r\n</blockquote>\r\n\r\n<p>и добавим в urlpatterns строку</p>\r\n\r\n<blockquote>\r\n<p>path(&#39;blog/&#39;, include(&#39;blog.urls&#39;, namespace=&#39;blog&#39;)),</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/06/24/image-20240624201928-1.png\" style=\"height:560px; width:800px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Тут необходимо подметить то что переменная <strong>app_name </strong>которую мы указываем в urls.py конкретного приложения и <strong>namespace</strong> параметр который мы указываем в функции <strong>include</strong> главного файла urls.py - это по сути одно и тоже. Это возможность в дальнейшем использовать данное значение длч уточнения пространства имен наших УРЛ.</p>\r\n\r\n<p>Как например мы в дальнейшем сделаем для формирования абсолютного УРЛ</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/04/image-20240904233617-1.png\" style=\"height:129px; width:814px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-21T18:55:51.747Z",
    "updated_at": "2024-09-08T15:50:49.775Z",
    "photo": "photo/2024/06/21/maxresdefault.jpg",
    "is_published": true,
    "category": 3,
    "tags": [
      23,
      26,
      29,
      39
    ]
  }
},
{
  "model": "blog.article",
  "pk": 35,
  "fields": {
    "title": "Создание шаблонов представлений",
    "slug": "sozdanie-shablonov-predstavlenij",
    "content": "<p>Мы создали <a href=\"/dzhango/razrabotka-predstavlenij-spiska-i-detalnoj-informatsii-v-dzhango/\">представления для наших статей</a> а также описали <a href=\"/dzhango/dobavlenie-shablonov-url-adresov-predstavlenij/\">URL шаблоны</a> для них.</p>\r\n\r\n<p>Теперь собственно необходимо отобразить данные на сайте. Для этого в Джанго существует очень гибкая система шаблонов (<strong>Templates</strong>) - один из китов аббревиатуры MTV. С помощью шаблонов можно отображать данные используя весь богатый спектр HTML, CSS, JavaScript и т.д. Все что нужно - это следовать определенной структуре расположения самих файлов в проекте и их связей. Создадим следующую структуру внутри папки приложения blog:</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/24/image-20240624203904-1.png\" style=\"height:364px; width:326px\" /></p>\r\n\r\n<p>Заметим что пока созданные файлы пустые.</p>\r\n\r\n<p>Напомним что шаблоны URL у нас выглядят так</p>\r\n\r\n<p>Главный url.py проекта Djangoblog</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/24/image-20240624204904-4.png\" style=\"height:172px; width:585px\" /></p>\r\n\r\n<p>и url.py приложения blog</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/24/image-20240624204843-3.png\" style=\"height:278px; width:653px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Как видно из шаблонов URL нам уже доступны следующие страницы:</p>\r\n\r\n<p>http://127.0.0.1:8000/admin/ - это еуже знакомый вход в админку.</p>\r\n\r\n<p>http://127.0.0.1:8000/blog/ - наш блог с потенциальными статьями</p>\r\n\r\n<p>А в наших представлениях мы уже прописали какие именно шаблоны нужно использовать (мы соответствующие файлы как раз создали).</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/27/image-20240627205410-1.png\" style=\"height:226px; width:704px\" /></p>\r\n\r\n<p>Прелесть шаблонов Джанго в том что они могут наследоваться друг от друга.</p>\r\n\r\n<p>То есть для нужной страницы можно отображать только необходимый контент а вся дублирующаяся информация остается в родительском файле.</p>\r\n\r\n<p>Реализуется это через специальный синтаксис шаблонизатора - спец блоки.</p>\r\n\r\n<p>Так например добавим в базовый шаблон base.html такой код</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/27/image-20240627210407-2.png\" style=\"height:353px; width:793px\" /></p>\r\n\r\n<p>а в list.html такой</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/27/image-20240627210433-3.png\" style=\"height:387px; width:854px\" /></p>\r\n\r\n<p>Уже из самого кода понятно что list.html наследует все что в базовом файле и переопределяет содержимое спец блоков!</p>\r\n\r\n<p>Теперь если мы добавим пару статей в админке и откроем&nbsp;http://127.0.0.1:8001/blog/</p>\r\n\r\n<p>то увидим что-то вроде</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/27/image-20240627211353-1.png\" style=\"height:331px; width:476px\" /></p>\r\n\r\n<p>Все работает благодаря тому что что мы прописали пути шаблонов в представлении а Джанго ищет файлы шаблонов именно в папках &quot;<strong>templates</strong>&quot; наших приложений. Поэтому кстати рекоммендуется дублировать название папки приложения внутри template. То есть делать так - <strong>blog</strong>/templates/<strong>blog</strong>/... Таким образом если названия файлов шаблонов будут дублироваться для разных приложений у нас не возникнет конфликтов.&nbsp;</p>\r\n\r\n<p>Но что если мы хотим хранить все файлы шаблонов в одном месте?&nbsp;</p>\r\n\r\n<p>Для этого в настройках Джанго нужно указать где именно еще искать файлы шаблонов.</p>\r\n\r\n<p>Для этого подправим опцию DIRS настройки&nbsp;TEMPLATES</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/06/image-20240906174910-1.png\" style=\"height:343px; width:768px\" /></p>\r\n\r\n<p>Теперь можно создать папку templates в корне проекта и перенести туда все наши шаблоны.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/06/image-20240906175007-2.png\" style=\"height:276px; width:282px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-24T18:49:48.210Z",
    "updated_at": "2024-09-08T15:46:18.480Z",
    "photo": "",
    "is_published": true,
    "category": 3,
    "tags": [
      23,
      38
    ]
  }
},
{
  "model": "blog.article",
  "pk": 36,
  "fields": {
    "title": "Статические файлы в Джанго",
    "slug": "staticheskie-fajlyi-v-dzhango",
    "content": "<p>С одной стороны тема статических файлов проста. Во многих обучающих материалах описывается что нужно создать папку static внутри приложений. Затем складировать туда статику и потом в шаблонах подгружать через тег <strong>{% load static %}</strong>.</p>\r\n\r\n<p>И затем использовать такое подключение так: <strong>&lt;link href=&quot;{% static &#39;css/style.css&#39; %}&quot; rel=&quot;stylesheet&quot; /&gt;</strong>.</p>\r\n\r\n<p>Но важный момент заключается в том что так будут подгружаться файлы в режиме debug = True. Причем через встроенный сервер разработки. При этом по умолчанию Джанго в режиме отладки умеет искать статические файлы только в папках static наших приложений. Если мы хотим сохранять статику в других папках то существует специальная настройка&nbsp;</p>\r\n\r\n<blockquote>\r\n<p>STATICFILES_DIRS = [<br />\r\n&nbsp; &nbsp; &nbsp;BASE_DIR / &#39;blog/static&#39;<br />\r\n]</p>\r\n</blockquote>\r\n\r\n<p>В режиме debug=False Джанго уже не будет искать статические файлы вообще.</p>\r\n\r\n<p>Чтобы они подключились в режиме debug=False нужно запускать сервер так:</p>\r\n\r\n<blockquote>\r\n<p>python manage.py runserver 127.0.0.1:8000 --insecure</p>\r\n</blockquote>\r\n\r\n<p>А уже на реальном сервере лучше всего настраивать все через NGINX и собирать всю статику разбросанную по проекту в одном каталоге. Для этого существует специальная настройка&nbsp;<strong>STATIC_ROOT</strong>.</p>\r\n\r\n<blockquote>\r\n<p>STATIC_ROOT = BASE_DIR / &#39;static&#39;</p>\r\n</blockquote>\r\n\r\n<p>Чтобы все статические файлы были собрано в главное директории есть специальная команда</p>\r\n\r\n<blockquote>\r\n<p>python manage.py collectstatic</p>\r\n</blockquote>\r\n\r\n<p>Нужно иметь в виду что если не установить значение <strong>STATIC_ROOT&nbsp;</strong>то команда collectstatic выдаст ошибку</p>\r\n\r\n<blockquote>\r\n<p>django.core.exceptions.ImproperlyConfigured: You&#39;re using the staticfiles app without having set the STATIC_ROOT setting to a filesystem path.</p>\r\n</blockquote>\r\n\r\n<p>Прокси-сервер NGINX отдает статику напрямую а другие HTTP запросы отправляет к серверу приложений uWSGI. Настройки NGINX выглядят при этом как-то так</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/27/image-20240627233007-1.png\" style=\"height:392px; width:443px\" /></p>\r\n\r\n<p>А схема производственной среды будет такая</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/27/image-20240627233051-2.png\" style=\"height:235px; width:846px\" /></p>\r\n\r\n<p>Ну и небольшое пояснение по поводу настроечных параметров чтобы не было путаницы</p>\r\n\r\n<p>STATIC_ROOT - место хранения на диске ваших статичных файлов (js, стили, изображения)<br />\r\nSTATIC_URL - префикс url&#39;a до этих файлов<br />\r\n<br />\r\nMEDIA_ROOT - место хранения на диске файлов, загружаемых пользователями<br />\r\nMEDIA_URL - префикс url&#39;a до этих файлов</p>\r\n\r\n<p><u><em>Дополнение 1</em></u></p>\r\n\r\n<p>При подключении статических файлов чтобы изменения вступили в силу может потребоваться перезагрузка сервера.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-06-27T21:10:58.003Z",
    "updated_at": "2024-09-08T15:45:25.121Z",
    "photo": "photo/2024/06/27/static.png",
    "is_published": true,
    "category": 3,
    "tags": [
      21,
      35,
      36,
      37
    ]
  }
},
{
  "model": "blog.article",
  "pk": 37,
  "fields": {
    "title": "Интернационализация и локализация в Джанго",
    "slug": "internatsionalizatsiya-i-lokalizatsiya-v-dzhango",
    "content": "<p>Слова &laquo;<strong>интернационализация</strong>&raquo; и &laquo;<strong>локализация</strong>&raquo; часто вызывают путаницу; вот упрощенное определение:</p>\r\n\r\n<p><em>интернационализация</em> -&nbsp; Подготовка программного обеспечения к локализации. Обычно выполняется разработчиками.</p>\r\n\r\n<p><em>локализация </em>-&nbsp;Написание переводов и местных форматов. Обычно выполняется переводчиками.</p>\r\n\r\n<p>Таким образом интернационализация в Джанго - это сама возможность адаптировать сайты под разные языки. И речь не просто о том чтобы переводить тесты на другой язык, но и также о том как показывать различные данные такие как например формат даты в том виде как их используют в конкретном регионе.&nbsp;</p>\r\n\r\n<p>Локализация в Джанго - это соответственно применение на сайте тех самых возможностей интернационализации.</p>\r\n\r\n<p>Так как по умолчанию Джанго использует английский язык, а нам удобно все перевести на русский в этой статье подробно и пошагово разберем как это сделать.</p>\r\n\r\n<p>Когда мы <a href=\"/dzhango/sozdanie-shablonov-predstavlenij/\">создавали базовые шаблоны представлений</a>, мы даже в html атрибуте lang указали en</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/28/image-20240628185053-1.png\" style=\"height:73px; width:227px\" /></p>\r\n\r\n<p>Благодаря этому атрибуту браузер пытается отображать разные HTML теги в соответствии с принятыми стандартами того или иного языка. Например это хорошо видно для тега q (quotes), который обычно используется для обрамления цитат кавычками.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/28/image-20240628185342-2.png\" style=\"height:350px; width:476px\" /></p>\r\n\r\n<p>Давайте первым делом заменим этот атрибут на ru. И сразу видим изменения</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/28/image-20240628185546-3.png\" style=\"height:346px; width:408px\" /></p>\r\n\r\n<p>Также теперь поправим шаблоны и статьи так чтобы отображалось максимум текста на русском.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/28/image-20240628192301-4.png\" style=\"height:359px; width:467px\" /></p>\r\n\r\n<p>Уже лучше, но все равно дата прописана по английски.&nbsp;</p>\r\n\r\n<p>Поменяем настроечный параметр - вместо&nbsp;LANGUAGE_CODE = &#39;en-us&#39; пропишем&nbsp;LANGUAGE_CODE = &#39;ru-RU&#39;</p>\r\n\r\n<p>И сразу дата стала какой нужно</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/28/image-20240628193250-5.png\" style=\"height:343px; width:467px\" /></p>\r\n\r\n<p>Кроме дат также будут меняться и форматы чисел.</p>\r\n\r\n<p>Так, например, если передать в шаблон переменную&nbsp;million = intcomma(1000000), то для US будет отображаться как&nbsp;1,000,000</p>\r\n\r\n<p>Для RU -&nbsp;1&nbsp;000&nbsp;000&nbsp;</p>\r\n\r\n<p>Но помимо этого Админ-панель также изменилась&nbsp;</p>\r\n\r\n<p>Было</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/28/image-20240628193331-6.png\" style=\"height:368px; width:800px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Стало&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/06/28/image-20240628193426-7.png\" style=\"height:365px; width:800px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Обратим внимание что формат даты поменялся автоматически, т.к. у нас версия Джанго - 5.0.</p>\r\n\r\n<p>До 5-й версии в Джанго был специальный параметр&nbsp;USE_L10N = True указывавший нужно ли включать локализацию форматов или нет. Потом от этого параметра отказались и теперь в случае переключения языкового кода&nbsp;LANGUAGE_CODE форматы переопределяются под нужный язык.</p>\r\n\r\n<p>Чтож, вот собственно и все. В админке лишь пару мест остались непереведенными</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/09/image-20240709171901-1.png\" style=\"height:367px; width:800px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Это уже настраивается в коде.</p>\r\n\r\n<p>Так, наше приложение называется Blog, но мы может в конфигурационном файле blog/apps.py</p>\r\n\r\n<p>прописать&nbsp;verbose_name = &#39;Блог&#39;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/09/image-20240709172700-2.png\" style=\"height:260px; width:627px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Также в Meta классе модели Post можно указать&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; verbose_name = &#39;Статья&#39;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; verbose_name_plural = &#39;Статьи&#39;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/09/image-20240709172744-3.png\" style=\"height:338px; width:598px\" /></p>\r\n\r\n<p>И вуаля! Админка полностью на русском языке, что оень радует</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/09/image-20240709172817-4.png\" style=\"height:354px; width:629px\" /></p>",
    "created_at": "2024-06-28T16:47:36.802Z",
    "updated_at": "2024-09-08T15:44:18.479Z",
    "photo": "photo/2024/06/28/translate.jpg",
    "is_published": true,
    "category": 3,
    "tags": [
      21,
      33,
      34
    ]
  }
},
{
  "model": "blog.article",
  "pk": 38,
  "fields": {
    "title": "Цикл запроса/ответа в Джанго",
    "slug": "tsikl-zaprosaotveta-v-dzhango",
    "content": "<p>Давайте рассмотрим цикл запроса/ответа Django, воспользуясь приложением Блог, которое описано в предыдущих статьях. Следующая ниже схема показывает упрощенный пример того, как Django обрабатывает HTTP-запросы и&nbsp;генерирует HTTP-ответы. Рассмотрим процесс запроса/ответа Django.</p>\r\n\r\n<p>1. Веб-браузер запрашивает страницу по ее URL-адресу, например https://domain.com/blog/33/. Веб-сервер получает HTTP-запрос и&nbsp;передает его Django.</p>\r\n\r\n<p>2. Django пробегает по всем шаблонам URL-адресов, определенным в&nbsp;конфигурации шаблонов URL-адресов. Он проверяет каждый шаблон на соответствие заданному пути URL-адреса в&nbsp;порядке их появления и&nbsp;останавливается на первом, который совпадает с&nbsp;запрошенным URL-адресом. В&nbsp;данном случае шаблон /blog/&lt;id&gt;/ соответствует пути /blog/33/.</p>\r\n\r\n<p>3. Django импортирует представление совпавшего шаблона URL-адреса и&nbsp;исполняет его, передавая экземпляр класса HttpRequest и&nbsp;именованные либо позиционные аргументы. Представление использует модели, чтобы извлечь информацию из базы данных. С&nbsp;помощью встроенного в&nbsp;Django ORM-преобразователя наборы запросов QuerySets транслируются в&nbsp;SQL и&nbsp;исполняются в&nbsp;базе данных.</p>\r\n\r\n<p>4. В представлении используется функция render(), которая прорисовывает шаблон HTML, передав в&nbsp;него объект Post в&nbsp;качестве контекстной переменной.</p>\r\n\r\n<p>5. Прорисованный контент возвращается представлением в&nbsp;виде объекта HttpResponse, по умолчанию с&nbsp;типом контента text/html.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/09/image-20240709174202-1.png\" style=\"height:727px; width:800px\" /></p>",
    "created_at": "2024-07-09T15:42:36.413Z",
    "updated_at": "2024-09-08T15:43:16.502Z",
    "photo": "photo/2024/07/09/x_ce97464ae1.jpg",
    "is_published": true,
    "category": 3,
    "tags": [
      31,
      32
    ]
  }
},
{
  "model": "blog.article",
  "pk": 39,
  "fields": {
    "title": "Канонические URL-адреса для моделей",
    "slug": "kanonicheskie-url-adresa-dlya-modelej",
    "content": "<p>Итак, мы уже знаем <a href=\"/dzhango/dobavlenie-shablonov-url-adresov-predstavlenij/\">как добавлять шаблоны URL-адресов</a>. В дальнейшем по шаблону Джанго понимает какой URL адрес направить на какое представление чтобы отобразить нужную информацию. Но что если нам нужно наоборот, узнать какой URL-адрес будет для отображения например детальной информации об объекте модели? Для этого в Джанго есть канонические URL-адреса.</p>\r\n\r\n<p>Добавляются они в модели в виде специального метода <strong>get_absolute_url</strong>. За основу конечно берется шаблон URL-адреса.</p>\r\n\r\n<p>Например, для поста блога у нас шаблон такой -&nbsp;<strong>path(&#39;&lt;int:id&gt;/&#39;, views.post_detail, name=&#39;post_detail&#39;)</strong>,</p>\r\n\r\n<p>Теперь в модели можно прописать&nbsp;</p>\r\n\r\n<blockquote>\r\n<p>&nbsp;def get_absolute_url(self):<br />\r\n&nbsp; &nbsp; return reverse(&#39;blog:post_detail&#39;,&nbsp;args=[self.id])</p>\r\n</blockquote>\r\n\r\n<p>reverse - это так называемый URL-резолвер, импортируется из django.urls.</p>\r\n\r\n<p>В нашем случае <strong>blog </strong>из&nbsp;blog:post_detail - это пространство имен которое мы можем указать как для конкретного приложения в файле УРЛ</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/06/image-20240906184923-1.png\" style=\"height:356px; width:655px\" /></p>\r\n\r\n<p>Или непосредственно в атрибуте <strong>namespace </strong>при использовании include:</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/06/image-20240906185023-2.png\" style=\"height:143px; width:590px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>И теперь в шаблонах вместо&nbsp;<strong>&lt;a href=&quot;{% url &#39;blog:post_detail&#39; post.id %}&quot;&gt;</strong></p>\r\n\r\n<p>можно использовать <strong>&lt;a href=&quot;{{ post.get_absolute_url }}&quot;&gt;</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-07-09T16:05:42.908Z",
    "updated_at": "2024-09-08T15:42:36.285Z",
    "photo": "photo/2024/07/09/SCR1.png",
    "is_published": true,
    "category": 3,
    "tags": [
      26,
      29,
      30
    ]
  }
},
{
  "model": "blog.article",
  "pk": 40,
  "fields": {
    "title": "Создание SEO-url в Джанго",
    "slug": "sozdanie-seo-url-v-dzhango",
    "content": "<p><strong>URL</strong> обозначает <strong>Uniform Resource Locator</strong>. URL это лишь адрес, который выдан уникальному ресурсу в интернете. В теории, каждый корректный URL ведёт на уникальный ресурс. Такими ресурсами могут быть HTML-страница, CSS-файл, изображение и т.д.</p>\r\n\r\n<p>И обычно поисковые системы отдают предпочтение таким URL которые сами в себе передают информацию о содержании страницы.</p>\r\n\r\n<p>К примеру мы <a href=\"/dzhango/dobavlenie-shablonov-url-adresov-predstavlenij/\">при создании шаблонов URL адресов</a> для отображения поста использовали его ID.</p>\r\n\r\n<p>Соответственно, страницы постов выглядят как-то так -&nbsp;http://127.0.0.1:8000/blog/2580/.&nbsp; Согласитесь совсем не информативно?</p>\r\n\r\n<p>Гораздо лучше если это будет вроде&nbsp;http://127.0.0.1:8000/dzhango/sozdanie-shablonov-predstavlenij/.&nbsp;</p>\r\n\r\n<p>Для создания подобного рода URL адресов испольуют те самые Слаги (slug). Одно такое поле мы <a href=\"/dzhango/sozdanie-modeli-v-dzhango/\">уже создавали</a>.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/12/image-20240712213305-1.png\" style=\"height:110px; width:834px\" /></p>\r\n\r\n<p>Но в наше прежней реализации поле Slug не уникально и поэтому мы потенциально можем создавать статьи с одинаковыми названиями и соотвтественно&nbsp; слагами,т.к. они генерируются на основании заголовков.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/12/image-20240712213621-2.png\" style=\"height:371px; width:692px\" /></p>\r\n\r\n<p>Да, у этих статей будут разные id, но все же нам нужен другой функционал.</p>\r\n\r\n<p>Добавим спеицальный атрибут&nbsp;<strong>unique_for_date=&#39;publish&#39;</strong></p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/12/image-20240712213741-3.png\" style=\"height:285px; width:696px\" /></p>\r\n\r\n<p>Теперь при использовании параметра <strong>unique_for_date </strong>поле <strong>slug </strong>должно быть уникальным для даты, сохраненной в&nbsp;поле publish. Обратите внимание, что поле publish является экземпляром класса <strong>DateTimeField</strong>, но проверка на уникальность значений будет выполняться только по дате (не по времени). Django будет предотвращать сохранение нового поста с&nbsp;тем же именем, что и у существующего поста на заданную дату публикации. В&nbsp; результате мы обеспечили уникальность слагов для даты публикации, поэтому теперь можно извлекать одиночные посты по полям publish и&nbsp;slug.</p>\r\n\r\n<p>Напомним что при любом изменении модели необходимо создать и применить миграции</p>\r\n\r\n<p>Пропишем теперь новый вид УРЛ-шаблона который мы будем использовать</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/12/image-20240712214240-1.png\" style=\"height:120px; width:800px\" /></p>\r\n\r\n<p>Шаблон URL-адреса представления post_detail принимает следующие ниже аргументы:</p>\r\n\r\n<p>&bull; <strong>year</strong>: требуется целое число;<br />\r\n&bull; <strong>month</strong>: требуется целое число;<br />\r\n&bull; <strong>day</strong>: требуется целое число;<br />\r\n&bull; <strong>post</strong>: требуется слаг (строка, содержащая только буквы, цифры, знаки подчеркивания или дефисы).</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Далее нужно поправить представление чтобы оно уже обрабатывало новые входящие параметры</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/12/image-20240712214627-2.png\" style=\"height:265px; width:642px\" /></p>\r\n\r\n<p>Канонический УРЛ-адрес поста также необходимо подправить с учетом новых данных</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/12/image-20240712214736-3.png\" style=\"height:130px; width:803px\" /></p>\r\n\r\n<p>Вот собственно и все!</p>\r\n\r\n<p>Осталось запустить сервер и проверить ссылки.</p>\r\n\r\n<p>Должно получится как-то так -&nbsp;http://127.0.0.1:8001/blog/2024/7/9/pervyj-post/</p>",
    "created_at": "2024-07-09T16:28:53.131Z",
    "updated_at": "2024-09-08T15:41:18.232Z",
    "photo": "photo/2024/07/09/SCR2.png",
    "is_published": true,
    "category": 3,
    "tags": [
      26,
      27,
      28
    ]
  }
},
{
  "model": "blog.article",
  "pk": 41,
  "fields": {
    "title": "Добавление постраничной навигации в Джанго",
    "slug": "dobavlenie-postranichnoj-navigatsii-v-dzhango",
    "content": "<p>В Django есть встроенный класс постраничной разбивки, который позволяет легко управлять постранично разбитыми данными, при этом имеется возможность определять число объектов, которое необходимое возвращать в&nbsp;расчете на страницу, и&nbsp;извлекать записи, соответствующие запрошенной пользователем странице.</p>\r\n\r\n<p>Для этого в представлении используется специальный класс Пагинатор</p>\r\n\r\n<blockquote>\r\n<p>from django.core.paginator import Paginator</p>\r\n</blockquote>\r\n\r\n<p>В методе выведения списка постов нужно передать данные из базы в Пагинатор так</p>\r\n\r\n<blockquote>\r\n<p>&nbsp; &nbsp; posts_list = Post.published.all()<br />\r\n&nbsp; &nbsp; # Постраничная разбивка с 3 постами на страницу<br />\r\n&nbsp; &nbsp; paginator = Paginator(posts_list, 3)<br />\r\n&nbsp; &nbsp; page_number = request.GET.get(&quot;page&quot;, 1)<br />\r\n&nbsp; &nbsp; posts = paginator.page(page_number)</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/07/12/image-20240712215932-1.png\" style=\"height:223px; width:651px\" /></p>\r\n\r\n<p>а внутри папки templates создаем файл pagination.html с таким содержимым</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/12/image-20240712220429-2.png\" style=\"height:231px; width:800px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>а в темплейте list.html добавляем&nbsp;<strong>{% include &quot;pagination.html&quot; with page=posts %}</strong>.</p>\r\n\r\n<p>И вот уже у нас есть пагинация</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/12/image-20240712221708-1.png\" style=\"height:610px; width:589px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Отметим что мы испольщовали запись&nbsp;&nbsp;with page=posts. В данном случае именно posts содержит данные о постах на требуемой странице (posts = paginator.page(page_number)).&nbsp;</p>\r\n\r\n<p>Это получилось в связи с тем что мы использовали класс Paginator напрямую в нашем представлении основанном на функции (Function Based View). Когда же используется Class Based View, то пагинатор там уже идет как бы &#39;встроенный&#39;.</p>\r\n\r\n<p>И нужно лишь указать кол-во постов на страницу (paginate_by) и использовать контекстную переменную page_obj -&nbsp;with page=page_obj. Так как встроенное в Django типовое представление ListView передает запрошенную страницу в переменную с именем page_obj.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/06/image-20240906191430-1.png\" style=\"height:96px; width:770px\" /></p>\r\n\r\n<p>Подробнее можно почитать здесь - <a href=\"/dzhango/razrabotka-predstavlenij-django-na-osnove-klassov/\">Представления основанные на классах</a>.</p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-07-12T20:04:40.964Z",
    "updated_at": "2024-09-08T15:40:21.881Z",
    "photo": "photo/2024/07/12/pagination.jpg",
    "is_published": true,
    "category": 3,
    "tags": [
      24,
      25
    ]
  }
},
{
  "model": "blog.article",
  "pk": 42,
  "fields": {
    "title": "Разработка представлений Django на основе классов",
    "slug": "razrabotka-predstavlenij-django-na-osnove-klassov",
    "content": "<p>Представления на основе классов являются альтернативным функциям способом реализации представлений как объектов Python. Поскольку представление&nbsp;&ndash; это функция, которая принимает веб-запрос и&nbsp;возвращает веб-ответ, то существует возможность определять представления как методы класса. Django предоставляет базовые классы-представления, которые можно использовать для реализации своих собственных представлений. Все они наследуют от класса View, который служит для диспетчеризации HTTP-методов и&nbsp;других распространенных функциональностей.</p>\r\n\r\n<p><strong>Зачем использовать представления на основе классов</strong>?</p>\r\n\r\n<p>Представления на основе классов обладают некоторыми преимуществами по сравнению с&nbsp;представлениями на основе функций, которые удобны для конкретных случаев использования. Представления на основе классов позволяют:</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; организовывать исходный код, относящийся к&nbsp; HTTP-методам, таким как GET, POST или PUT, в&nbsp;отдельные методы, не используя ветвление по условию;</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; использовать множественное наследование, чтобы создавать реиспользуемые классы-представления (также именуемые примесями, примесными классами или миксинами).</p>\r\n\r\n<p>Так, например, можно заменить <a href=\"/dzhango/razrabotka-predstavlenij-spiska-i-detalnoj-informatsii-v-dzhango/\">представления на основе функций</a>, таким образом:</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/16/image-20240716202400-1.png\" style=\"height:260px; width:477px\" />&nbsp;</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; атрибут <strong>queryset </strong>используется для того, чтобы иметь конкретно-прикладной набор запросов QuerySet, не извлекая все объекты. Вместо определения атрибута queryset мы могли бы указать <strong>model=Post</strong>, и&nbsp;Django сформировал бы для нас типовой набор запросов <strong>Post.objects.all()</strong>;</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; контекстная переменная posts используется для результатов запроса. Если не указано имя контекстного объекта <strong>context_object_name</strong>, то по умолчанию используется переменная <strong>object_list</strong>;</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; в атрибуте <strong>paginate_by </strong>задается постраничная разбивка результатов с&nbsp;возвратом трех объектов на страницу;</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; конкретно-прикладной шаблон используется для прорисовки страницы шаблоном <strong>template_name</strong>. Если шаблон не задан, то по умолчанию ListView будет использовать <strong>blog/post_list.html</strong>.</p>\r\n\r\n<p>Для того чтобы постраничная разбивка продолжала работать, необходимо использовать правильный объект страницы, который передается в&nbsp;шаблон. Встроенное в&nbsp;Django типовое представление ListView передает запрошенную страницу в&nbsp;переменную с&nbsp;именем <strong>page_obj</strong>. В&nbsp;связи с&nbsp;этим необходимо соответствующим образом отредактировать шаблон <strong>post/list.html</strong>.&nbsp;</p>\r\n\r\n<p>То есть, было&nbsp;{% include &quot;pagination.html&quot; with page=<strong>posts </strong>%}</p>\r\n\r\n<p>стало -&nbsp;{% include &quot;pagination.html&quot; with page=<strong>page_obj </strong>%}</p>\r\n\r\n<p>Обработка исключений в этом случае немного отличается. Если попытаться загрузить страницу вне диапазона или передать нецелочисленное значение в параметре page, то представление вернет HTTP-ответ с кодом состояния, равным 404 (Страница не найдена).</p>",
    "created_at": "2024-07-16T18:31:05.605Z",
    "updated_at": "2024-09-08T15:39:24.722Z",
    "photo": "photo/2024/07/16/SCR1.png",
    "is_published": true,
    "category": 3,
    "tags": [
      23,
      24,
      25
    ]
  }
},
{
  "model": "blog.article",
  "pk": 43,
  "fields": {
    "title": "Разработка форм с помощью Django",
    "slug": "razrabotka-form-s-pomoschyu-django",
    "content": "<p>Django имеет встроенный <strong>фреймворк форм</strong>, который позволяет легко создавать формы. Фреймворк форм упрощает определение полей формы, указывает их внешний вид на странице и способы валидации ими входных данных. Встроенный в&nbsp;Django фреймворк форм предлагает гибкий способ прорисовки форм в&nbsp;исходном коде HTML и&nbsp;оперирования данными. Django поставляется с&nbsp;двумя базовыми классами для разработки форм:</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; <strong>Form</strong>: позволяет компоновать стандартные формы путем определения полей и&nbsp;валидаций;</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; <strong>ModelForm</strong>: позволяет компоновать формы, привязанные к&nbsp;экземплярам модели. Он предоставляет все функциональности базового класса Form, но поля формы можно объявлять явным образом или автоматически генерировать из полей модели. Форму можно использовать для создания либо редактирования экземпляров модели.</p>\r\n\r\n<p>На примере <a href=\"/dzhango/sozdanie-prilozheniya-dzhango/\">приложения Блог</a>, создадим форму отправки поста на сайте.</p>\r\n\r\n<p>Сначала внутри каталога приложения blog создайте файл forms.py и&nbsp;добавьте в&nbsp;него следующий ниже исходный код:</p>\r\n\r\n<blockquote>\r\n<p>from django import forms</p>\r\n\r\n<p>class EmailPostForm(forms.Form):<br />\r\n&nbsp; &nbsp; name = forms.CharField(max_length=25)<br />\r\n&nbsp; &nbsp; email = forms.EmailField()<br />\r\n&nbsp; &nbsp; to = forms.EmailField()<br />\r\n&nbsp; &nbsp; comments = forms.CharField(required=False, widget=forms.Textarea)</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/07/16/image-20240716213650-1.png\" style=\"height:269px; width:800px\" /></p>\r\n\r\n<blockquote>\r\n<p>Формы могут находиться в&nbsp;любом месте проекта Django. По традиции их помещают внутри файла forms.py в&nbsp;каждом приложении.</p>\r\n</blockquote>\r\n\r\n<p>Форма содержит следующие ниже поля:</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; <strong>name</strong>: экземпляр класса CharField с&nbsp;максимальной длиной 25 символов, который будет использоваться для имени человека, отправляющего пост;</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; <strong>email</strong>: экземпляр класса EmailField. Здесь используется адрес электронной почты человека, отправившего рекомендуемый пост;</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; <strong>to</strong>: экземпляр класса EmailField. Здесь используется адрес электронной почты получателя, который будет получать электронное письмо с&nbsp;рекомендуемым постом;</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; <strong>comments</strong>: экземпляр класса CharField. Он используется для комментариев, которые будут вставляться в&nbsp;электронное письмо с&nbsp;рекомендуемым постом. Это поле сделано опциональным путем установки required равным значению False, при этом был задан конкретно-прикладной виджет прорисовки поля.</p>\r\n\r\n<p style=\"text-align:center\"><strong><span style=\"font-size:16px\">Работа с&nbsp;формами в&nbsp;представлениях</span></strong></p>\r\n\r\n<p>Мы определили форму для рекомендации постов по электронной почте. Теперь требуется представление, чтобы создавать экземпляр формы и&nbsp;работать с&nbsp;передачей формы на обработку. Отредактируйте файл views.py приложения blog, добавив следующий ниже исходный код:</p>\r\n\r\n<blockquote>\r\n<p>from .forms import EmailPostForm</p>\r\n\r\n<p>def post_share(request, post_id):<br />\r\n&nbsp; &nbsp; # Извлечь пост по идентификатору id<br />\r\n&nbsp; &nbsp; post = get_object_or_404(Post, id=post_id, status=Post.Status.PUBLISHED)<br />\r\n&nbsp; &nbsp; if request.method == &#39;POST&#39;: # Форма была передана на обработку<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; form = EmailPostForm(request.POST)<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;if form.is_valid(): # Поля формы успешно прошли валидацию<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;cd = form.cleaned_data # ... отправить электронное письмо<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;else: form = EmailPostForm()<br />\r\n&nbsp; &nbsp;&nbsp;return render(request, &#39;blog/post/share.html&#39;, {&#39;post&#39;: post, &#39;form&#39;: form})</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/07/16/image-20240716214712-1.png\" style=\"height:380px; width:771px\" /></p>\r\n\r\n<blockquote>\r\n<p>Если данные формы не проходят валидацию, то cleaned_data будет содержать только валидные поля.</p>\r\n</blockquote>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-07-16T19:39:47.392Z",
    "updated_at": "2024-09-08T15:38:31.799Z",
    "photo": "photo/2024/07/16/form.png",
    "is_published": true,
    "category": 3,
    "tags": [
      10,
      12,
      22
    ]
  }
},
{
  "model": "blog.article",
  "pk": 44,
  "fields": {
    "title": "Отправка электронных писем с помощью Django",
    "slug": "otpravka-elektronnyih-pisem-s-pomoschyu-django",
    "content": "<p>Отправка электронных писем в&nbsp;Django очень проста. Для того чтобы отправлять электронные письма с&nbsp;по мощью Django, необходимо иметь локальный SMTP-сервер (работающий по простому протоколу передачи почты) либо обращаться к&nbsp;внешнему SMTP-серверу, например к&nbsp;своему поставщику услуг электронной почты. Следующие ниже настроечные параметры позволяют определять конфигурацию SMTP, чтобы отправлять электронные письма с&nbsp;помощью Django:</p>\r\n\r\n<p>&bull; EMAIL_HOST: хост SMTP-сервера; по умолчанию используется localhost;</p>\r\n\r\n<p>&bull; EMAIL_PORT: SMTP-порт; по умолчанию равен 25;</p>\r\n\r\n<p>&bull; EMAIL_HOST_USER: пользовательское имя для SMTP-сервера;</p>\r\n\r\n<p>&bull; EMAIL_HOST_PASSWORD: пароль для SMTP-сервера;</p>\r\n\r\n<p>&bull; EMAIL_USE_TLS: следует ли использовать защищенное соединение транспортного слоя (TLS) ;</p>\r\n\r\n<p>&bull; EMAIL_USE_SSL: следует ли использовать неявное защищенное соединение SSL.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Так, например, если у вас есть учетная запись Gmail, то вы можете отредактировать файл settings.py&nbsp;проекта, добавив следующий ниже исходный код:</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/19/image-20240719172000-1.png\" style=\"height:168px; width:433px\" /></p>\r\n\r\n<p>Но есть один важный нюанс. Задавать пароли непосредственно в настройках небезопасно и неправильно.</p>\r\n\r\n<p>Для установки критически важных настроечных параметров лучше использовать переменные окружения.</p>\r\n\r\n<p>Например так</p>\r\n\r\n<p>EMAIL_HOST_USER = get_env_var(&#39;EMAIL_HOST_USER&#39;)<br />\r\nEMAIL_HOST_PASSWORD = get_env_var(&#39;EMAIL_HOST_PASSWORD&#39;)</p>\r\n\r\n<p>функцию&nbsp;get_env_var можно также добавить в settings.py</p>\r\n\r\n<blockquote>\r\n<p>import os<br />\r\nfrom django.core.exceptions import ImproperlyConfigured</p>\r\n\r\n<p>def get_env_var(var_name):<br />\r\n&nbsp; &nbsp; try:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; return os.environ[var_name]<br />\r\n&nbsp; &nbsp; except KeyError as exc:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; error_msg = f&#39;Set the {var_name} environment variable&#39;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; raise ImproperlyConfigured(error_msg) from exc</p>\r\n</blockquote>\r\n\r\n<p>Что такое TLS - читайте <a href=\"/tehnologii/ssl-i-tls/\">здесь</a>.</p>\r\n\r\n<p>Если вы не можете использовать SMTP-сервер, то можно сообщить Django, что нужно писать электронные письма в&nbsp;консоль, добавив в&nbsp;файл settings.py следующий ниже настроечный параметр:<br />\r\n<strong>EMAIL_BACKEND = &#39;django.core.mail.backends.console.EmailBackend&#39;</strong></p>\r\n\r\n<p>И можно проверить так в терминале</p>\r\n\r\n<p>python manage.py shell<br />\r\n&gt;&gt;&gt; from django.core.mail import send_mail<br />\r\n&gt;&gt;&gt; send_mail(&#39;Django mail&#39;,&#39;Test&#39;, &#39;from@gmail.com&#39;,[&#39;to@mail.com&#39;], fail_silently=False)</p>\r\n\r\n<p>Функция<strong> send_mail()</strong> принимает тему, сообщение, отправителя и список получателей в&nbsp;качестве требуемых аргументов. Устанавливая опциональный аргумент fail_silently=False, мы сообщаем ей, что если электронное письмо невозможно отправить, нужно вызывать исключение. Если результат, который вы видите, равен 1, значит, ваше электронное письмо было успешно отправлено.</p>\r\n\r\n<p>Итак, Джанго уже может отправлять письма. И это замечательно. Теперь рассмотрим как это делать через формы на сайте.</p>\r\n\r\n<p>Предварительно мы уже <a href=\"/dzhango/razrabotka-form-s-pomoschyu-django/\">разработали форму с помощью Джанго</a>.&nbsp;</p>\r\n\r\n<p>Видоизменим файл views.py добавив следующий код</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/22/image-20240722161921-1.png\" style=\"height:366px; width:800px\" /></p>\r\n\r\n<p>Для формирования URL поста мы использовали сначала метод <strong>get_absolute_url</strong>. Он сформирует УРЛ поста на сайте но не полный (без HTTP-схемы и хоста). Для этого мы уже используем&nbsp;<strong>request.build_absolute_uri</strong>.</p>\r\n\r\n<p>Теперь добавим шаблон УРЛ для нашей страницы отправки сообщения</p>\r\n\r\n<blockquote>\r\n<p>path(&#39;&lt;int:post_id&gt;/share/&#39;, views.post_share, name=&#39;post_share&#39;),</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/07/22/image-20240722200322-1.png\" style=\"height:151px; width:800px\" /></p>\r\n\r\n<p>Также создадим шаблон представлдения share.html</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/22/image-20240722200734-2.png\" style=\"height:380px; width:800px\" /></p>\r\n\r\n<p>И наконец на странице детальной информации добавим ссылку на нашу новую форму</p>\r\n\r\n<blockquote>\r\n<p>&nbsp;&lt;p&gt;<br />\r\n&nbsp; &nbsp; &lt;a href=&quot;{% url &quot;blog:post_share&quot; post.id %}&quot;&gt;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;Поделиться этим постом<br />\r\n&nbsp; &nbsp; &lt;/a&gt;<br />\r\n&nbsp;&lt;/p&gt;</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/07/22/image-20240722201350-3.png\" style=\"height:309px; width:800px\" /></p>\r\n\r\n<p>Всй должно работать!</p>\r\n\r\n<p>Для того чтобы&nbsp;протестировать валидацию формы Django с использованием современного&nbsp;браузера, можно пропустить валидацию формы браузером, добавив атрибут&nbsp;<strong>novalidate </strong>в элемент HTML <strong>&lt;form&gt;</strong>. Например,<br />\r\n<strong>&lt;form method=&quot;post&quot; novalidate&gt;</strong>.&nbsp;</p>",
    "created_at": "2024-07-17T20:34:28.572Z",
    "updated_at": "2024-09-08T15:37:31.900Z",
    "photo": "photo/2024/07/17/123.png",
    "is_published": true,
    "category": 3,
    "tags": [
      12,
      21,
      22
    ]
  }
},
{
  "model": "blog.article",
  "pk": 45,
  "fields": {
    "title": "Сетевая модель OSI",
    "slug": "setevaya-model-osi",
    "content": "<p><strong>Модель OSI (Open System Interconnection)</strong>, или эталонная модель взаимодействия открытых систем описывает, как устройства в&nbsp;локальных и&nbsp;глобальных сетях обмениваются данными и&nbsp;что происходит с&nbsp;этими данными. Её&nbsp;предложили в&nbsp;1984&nbsp;году инженеры из&nbsp;Международной организации по&nbsp;стандартизации (ISO), которая работала над единым стандартом передачи данных по&nbsp;интернету.</p>\r\n\r\n<p>При этом сама по&nbsp;себе эталонная модель&nbsp;&mdash; не&nbsp;стандарт интернета, как, например, TCP/IP; её&nbsp;можно сравнить с&nbsp;фреймворками в&nbsp;мире языков программирования: в&nbsp;OSI &laquo;из&nbsp;коробки&raquo; доступны разные веб-стандарты&nbsp;&mdash; UDP, HTTP, FTP, Telnet и&nbsp;другие. Всего таких протоколов&nbsp;&mdash; более 100&nbsp;штук.</p>\r\n\r\n<p>Модель OSI включает семь слоёв, или уровней,&nbsp;&mdash; причём каждый из&nbsp;них выполняет определённую функцию: например, передать данные или представить их&nbsp;в&nbsp;понятном для человека виде на&nbsp;компьютере. Кстати, у&nbsp;каждого слоя&nbsp;&mdash; свой набор протоколов.</p>\r\n\r\n<p>Самый нижний слой отвечает за&nbsp;физическое представление данных, то&nbsp;есть за&nbsp;то, как данные передаются по&nbsp;проводам или с&nbsp;помощью радиоволн, а&nbsp;самый верхний&nbsp;&mdash; за&nbsp;то, как приложения взаимодействуют с&nbsp;сетью.</p>\r\n\r\n<h2><strong>1-й уровень OSI&nbsp;&mdash; физический </strong><br />\r\n<strong>(L1, physical layer)</strong></h2>\r\n\r\n<p>На&nbsp;самом нижнем уровне модели OSI данные представляют собой физические объекты&nbsp;&mdash; ток, свет или радиоволны. Они передаются по&nbsp;проводам или с&nbsp;помощью беспроводных сигналов.</p>\r\n\r\n<p>Этот слой работает с&nbsp;кабелями, контактами в&nbsp;разъёмах, модуляцией сигнала, кодированием единиц и&nbsp;нулей и&nbsp;другими низкоуровневыми штуками. По&nbsp;сути, первый уровень&nbsp;&mdash; это уровень проводов и&nbsp;физических способов передачи сигнала. Минимальная абстракция.</p>\r\n\r\n<p>Самый известный протокол на&nbsp;физическом уровне&nbsp;&mdash; Ethernet. Он&nbsp;описывает, как сигналы кодируются и&nbsp;передаются по&nbsp;проводам. Кроме него есть Bluetooth, Wi-Fi и&nbsp;ИК-порт, которые также содержат инструкции для передачи данных.</p>\r\n\r\n<p>Устройства физического уровня&nbsp;&mdash; концентраторы и&nbsp;репитеры. Они работают с&nbsp;физическим сигналом &laquo;втупую&raquo; и&nbsp;не&nbsp;вникают в&nbsp;его логику: получили данные&nbsp;&mdash; передали их&nbsp;дальше по&nbsp;проводу.</p>\r\n\r\n<h2><strong>2-й уровень OSI&nbsp;&mdash; канальный </strong><br />\r\n<strong>(L2, data link layer)</strong></h2>\r\n\r\n<p>Над физическим уровнем располагается канальный. Его задача&nbsp;&mdash; проверить целостность полученных данных и&nbsp;исправить ошибки. Этот уровень &laquo;поумнее&raquo; предыдущего: он&nbsp;уже понимает, что разные амплитуды напряжений отвечают разным битам&nbsp;&mdash; нулям и&nbsp;единицам. А&nbsp;ещё канальный уровень умеет кодировать сигналы в&nbsp;биты и&nbsp;передавать их&nbsp;дальше.</p>\r\n\r\n<p>Полученные с&nbsp;нижнего уровня данные делятся на&nbsp;фреймы, или кадры. Каждый фрейм состоит из&nbsp;служебной информации&nbsp;&mdash; например, адреса отправителя и&nbsp;адреса получателя,&nbsp;&mdash; а&nbsp;также самих данных.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Получается что-то вроде почтового конверта. На&nbsp;лицевой стороне у&nbsp;него написано, от&nbsp;кого пришло письмо, а&nbsp;внутри находится само письмо (в&nbsp;нашем случае данные).</p>\r\n\r\n<p>Лицевая сторона конверта&nbsp;&mdash; это MAC-адрес устройства, которое отправило нам информацию. Он&nbsp;нужен, чтобы идентифицировать устройства в&nbsp;локальной сети, состоит из&nbsp;48&nbsp;или 64&nbsp;бит и&nbsp;выглядит примерно так:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Ещё один важный факт о&nbsp;MAC-адресах: когда на&nbsp;заводе собирают ноутбук или смартфон, ему сразу&nbsp;же присваивают определённый MAC-адрес, который потом уже никак нельзя поменять. MAC-адрес настольных ПК&nbsp;зашит в&nbsp;сетевую карту, поэтому его можно изменить, только заменив эту самую карту.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>С&nbsp;помощью команды <u>ifconfig</u> можно узнать MAC-адрес вашего Macbook или компьютера на&nbsp;Linux. В&nbsp;Windows нужно ввести команду <u>ipconfig</u>.</p>\r\n\r\n<p>Канальный уровень не&nbsp;так прост&nbsp;&mdash; он&nbsp;делится ещё на&nbsp;два подуровня:</p>\r\n\r\n<ul>\r\n\t<li>уровень управления логическим каналом&nbsp;&mdash; LLC (logical link control);</li>\r\n\t<li>уровень управления доступом к&nbsp;среде&nbsp;&mdash; тот самый MAC (media access control).</li>\r\n</ul>\r\n\r\n<p>Первый подуровень нужен для взаимодействия с&nbsp;верхним уровнем, сетевым, а&nbsp;второй&nbsp;&mdash; для взаимодействия с&nbsp;нижним, физическим.</p>\r\n\r\n<p>Устройства канального уровня&nbsp;&mdash; коммутаторы и&nbsp;мосты. Они нужны, чтобы передавать фреймы нужному адресату. Протоколы канального уровня&nbsp;&mdash; PPP, CDP.</p>\r\n\r\n<h2><strong>3-й уровень OSI&nbsp;&mdash; сетевой </strong><br />\r\n<strong>(L3, network layer)</strong></h2>\r\n\r\n<p>Этот уровень отвечает за&nbsp;маршрутизацию данных внутри сети между компьютерами. Здесь уже появляются такие термины, как &laquo;маршрутизаторы&raquo; и&nbsp;&laquo;IP-адреса&raquo;.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Маршрутизаторы позволяют разным сетям общаться друг с&nbsp;другом: они используют MAC-адреса, чтобы построить путь от&nbsp;одного устройства к&nbsp;другому.</p>\r\n\r\n<p>Данные на&nbsp;сетевом уровне представляются в&nbsp;виде пакетов. Такие пакеты похожи на&nbsp;фреймы из&nbsp;канального уровня, но&nbsp;используют другие адреса получателя и&nbsp;отправителя&nbsp;&mdash; IP-адреса.</p>\r\n\r\n<p>Чтобы получить IP-адрес обоих устройств (отправителя и&nbsp;получателя), существует протокол ARP (address resolution protocol). Он&nbsp;умеет конвертировать MAC- в&nbsp;IP-адрес и&nbsp;наоборот.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>4-й уровень OSI&nbsp;&mdash; транспортный </strong><br />\r\n<strong>(L4, transport layer)</strong></h2>\r\n\r\n<p>Из&nbsp;названия понятно, что на&nbsp;этом уровне происходит передача данных по&nbsp;сети. Так и&nbsp;есть. Два главных протокола здесь&nbsp;&mdash; TCP и&nbsp;UDP. Они как раз и&nbsp;отвечают за&nbsp;то, как именно будут передаваться данные.</p>\r\n\r\n<p>TCP (Transmission Control Protocol)&nbsp;&mdash; это протокол, который гарантирует доставку данных в&nbsp;корректном виде. Он&nbsp;жёстко следит за&nbsp;каждым битом информации, но&nbsp;работает гораздо медленнее&nbsp;UDP.</p>\r\n\r\n<p>Например, когда вы&nbsp;вводите логин и&nbsp;пароль при входе в&nbsp;социальную сеть, очень важно, чтобы все символы отправились в&nbsp;определённой последовательности. Если какие-то потеряются или изменятся, вы&nbsp;просто не&nbsp;сможете авторизоваться. Поэтому протокол TCP использует разные методы проверок&nbsp;&mdash; например, <a href=\"https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F_%D1%81%D1%83%D0%BC%D0%BC%D0%B0\" target=\"_blank\">контрольные суммы</a>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>А&nbsp;вот в&nbsp;видео или аудио небольшие потери некритичны, зато важна скорость передачи данных. Для таких задач как раз и&nbsp;придумали протокол UDP (user datagram protocol). Он&nbsp;уже не&nbsp;проверяет цельность битов, его задача&nbsp;&mdash; как можно быстрее передать данные с&nbsp;одного устройства на&nbsp;другое.</p>\r\n\r\n<p>В&nbsp;протоколе TCP данные делятся на&nbsp;сегменты. Каждый сегмент&nbsp;&mdash; часть пакета. Сегменты нужны, чтобы передавать информацию по&nbsp;сети, учитывая её&nbsp;пропускную способность.</p>\r\n\r\n<p>Например, если вы&nbsp;передаёте данные с&nbsp;компьютера, у&nbsp;которого пропускная способность 100&nbsp;Мб/c, на&nbsp;смартфон с&nbsp;пропускной способность 10&nbsp;Мб/c, то&nbsp;данные разделятся так, чтобы не&nbsp;застревать в&nbsp;самом медленном устройстве.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Ещё сегментация важна для надёжности. Один большой пакет может потеряться или направиться не&nbsp;тому адресату. А&nbsp;маленькие пакеты снижают риск подобных ошибок и&nbsp;даже позволяют проверять их&nbsp;количество. Если какой-то сегмент не&nbsp;получилось доставить, протокол TCP может запросить его у&nbsp;отправителя снова. Так обеспечивается надёжность.</p>\r\n\r\n<p>В&nbsp;UDP данные делятся на&nbsp;датаграммы&nbsp;&mdash; это примерно то&nbsp;же, что и&nbsp;пакет, только датаграммы автономны. Каждая датаграмма имеет всё необходимое, чтобы дойти до&nbsp;получателя. Поэтому они не&nbsp;зависят от&nbsp;сети и&nbsp;могут доставляться по&nbsp;разным маршрутам и&nbsp;в&nbsp;произвольном порядке.</p>\r\n\r\n<h2><strong>5-й уровень OSI&nbsp;&mdash; сеансовый </strong><br />\r\n<strong>(L5, session layer)</strong></h2>\r\n\r\n<p>Начиная с&nbsp;этого уровня и&nbsp;выше, данные имеют уже нормальный вид&nbsp;&mdash; например, привычных нам JPEG- или MP3-файлов. Задача сети на&nbsp;этих уровнях&nbsp;&mdash; представить информацию в&nbsp;понятном для человека виде и&nbsp;сделать так, чтобы пользователь мог её&nbsp;как-то &laquo;потрогать&raquo;.</p>\r\n\r\n<p>Сеансовый уровень управляет соединениями, или сессиями. Типичный пример&nbsp;&mdash; звонок по&nbsp;Skype или Zoom. Когда вы&nbsp;звоните другому человеку, между вашими компьютерами устанавливается соединение, по&nbsp;которому передаются аудио и&nbsp;видео. Если такое соединение разорвать, то&nbsp;и&nbsp;ваш звонок прервётся.</p>\r\n\r\n<p>На&nbsp;сеансовом уровне очень важно, чтобы соединение правильно установилось и&nbsp;поддерживалось. То&nbsp;есть механизмы протоколов должны проверить, что у&nbsp;обоих собеседников есть нужные кодеки и&nbsp;сигнал между устройствами присутствует.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>6-й уровень OSI&nbsp;&mdash; уровень представления данных </strong><br />\r\n<strong>(L6, presentation layer)</strong></h2>\r\n\r\n<p>На&nbsp;этом уровне происходит преобразование форматов данных&nbsp;&mdash; их&nbsp;кодирование и&nbsp;сжатие. Например, полученные данные могут превратиться в&nbsp;GIF- или MP4-файл. То&nbsp;же самое происходит и&nbsp;в&nbsp;обратном порядке: когда пользователь отправляет файл другому человеку, данные сначала конвертируются в&nbsp;биты и&nbsp;сжимаются, а&nbsp;потом уже передаются на&nbsp;транспортный уровень.</p>\r\n\r\n<p>Помимо кодировки и&nbsp;сжатия на&nbsp;уровне представления, данные могут шифроваться&nbsp;&mdash; если, конечно, это необходимо.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>7-й уровень OSI&nbsp;&mdash; прикладной </strong><br />\r\n<strong>(L7, application layer)</strong></h2>\r\n\r\n<p>Последний уровень модели OSI&nbsp;&mdash; прикладной. На&nbsp;нём находятся сетевые службы, которые помогают без проблем сёрфить в&nbsp;интернете.</p>\r\n\r\n<p>Прикладной уровень похож на&nbsp;некий графический интерфейс для всей модели OSI&nbsp;&mdash; с&nbsp;его помощью пользователь взаимодействует с&nbsp;другими уровнями, даже не&nbsp;подозревая об&nbsp;этом. Этот интерфейс называется сетевым.</p>\r\n\r\n<p>Самые популярные из&nbsp;сетевых интерфейсов&nbsp;&mdash; это HTTP, HTTPS, FTP и&nbsp;SMTP. А&nbsp;&laquo;устройства&raquo; здесь&nbsp;&mdash; это уже программы: Zoom, Telegram, браузеры.</p>\r\n\r\n<p>Информация взята с&nbsp;<a href=\"https://skillbox.ru/media/code/chto-takoe-model-osi-i-zachem-ona-nuzhna-prepariruem-sloyenyy-pirog-interneta/\">https://skillbox.ru/media/code/chto-takoe-model-osi-i-zachem-ona-nuzhna-prepariruem-sloyenyy-pirog-interneta/</a></p>",
    "created_at": "2024-07-18T14:36:18.539Z",
    "updated_at": "2024-09-08T15:35:46.820Z",
    "photo": "photo/2024/07/18/osi.png",
    "is_published": true,
    "category": 6,
    "tags": [
      19,
      20
    ]
  }
},
{
  "model": "blog.article",
  "pk": 46,
  "fields": {
    "title": "SSL и TLS",
    "slug": "ssl-i-tls",
    "content": "<p><strong>SSL</strong>,<strong> </strong>или<strong> secure sockets layer</strong>,&nbsp;&mdash; это протокол, который шифрует и&nbsp;защищает данные во&nbsp;время их&nbsp;передачи по&nbsp;интернету. Для этого он&nbsp;использует специальные криптографические ключи, изменяющие данные до&nbsp;неузнаваемости.</p>\r\n\r\n<p><strong>TLS</strong>, или <strong>transport layer security</strong>,&nbsp;&mdash; это протокол, который защищает данные во&nbsp;время их&nbsp;передачи по&nbsp;Сети. Он&nbsp;работает на&nbsp;четвёртом, транспортном, уровне <a href=\"/tehnologii/setevaya-model-osi/\">сетевой модели OSI</a>, где отвечает за&nbsp;создание безопасных сессий обмена данными между браузером и&nbsp;сервером.</p>\r\n\r\n<p>Понять, что сайт использует TLS, легко: если его адрес начинается с&nbsp;<u>http<strong>s</strong></u>, а&nbsp;рядом красуется символ замочка&nbsp;&mdash; значит, ваши данные защищены.</p>\r\n\r\n<p>Аббревиатура HTTP<strong>S</strong> означает, что сайт использует защищённую версию протокола HTTP&nbsp;&mdash; Hypertext Transfer Protocol <strong>Secure</strong>. По&nbsp;сути, это и&nbsp;есть обычный HTTP, только нашпигованный средствами защиты, за&nbsp;которые как раз и&nbsp;отвечает&nbsp;TLS.</p>\r\n\r\n<p>И&nbsp;<strong>TLS, и&nbsp;SSL</strong> выполняют одну и&nbsp;ту&nbsp;же работу&nbsp;&mdash; создают соединения и&nbsp;защищают передачу данных по&nbsp;ним. Разница лишь в&nbsp;том, что TLS более современный, надёжный и&nbsp;безопасный.</p>\r\n\r\n<p>Оригинально суть процесса описана здесь -&nbsp;<a href=\"https://www.youtube.com/watch?v=nsyLWDtWXk0\">https://www.youtube.com/watch?v=nsyLWDtWXk0</a></p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-07-18T15:59:48.395Z",
    "updated_at": "2024-09-08T15:34:42.458Z",
    "photo": "photo/2024/07/18/setevye-protokoly-peredachi-dannykh-9.png",
    "is_published": true,
    "category": 6,
    "tags": [
      17,
      18
    ]
  }
},
{
  "model": "blog.article",
  "pk": 47,
  "fields": {
    "title": "CSRF уязвимость и защита в Джанго",
    "slug": "csrf-uyazvimost-i-zaschita-v-dzhango",
    "content": "<p><strong>CSRF (Cross-Site Request Forgery)</strong>&nbsp;или по-русски межсайтовая подделка запроса - это одна из распространенных уязвимостей для сайтов. Это вид атаки на сайт, которая производится с помощью мошеннического сайта или скрипта, который заставляет браузер пользователя выполнить нежелательное действие на доверенном сайте, на котором пользователь авторизован.</p>\r\n\r\n<p>Обычно для этого пользователь должен перейти по мошеннической ссылке (которая может быть изменена с помощью сокращателя ссылок).</p>\r\n\r\n<p>Например Вася, авторизованный на сайте банка, проверяет свою почту. Он может перейти по фишинговой ссылке, которая включает запрос на перевод денег на аккаунт мошенника.</p>\r\n\r\n<p>Благодаря тому, что он авторизован на сайте банка, тот обработает запрос на перевод.</p>\r\n\r\n<p>Одним из методов защиты от подобных атак является использование специальных <strong>CSRF-токенов</strong>.</p>\r\n\r\n<p>Сервер генерирует случайный уникальный токен для браузера пользователя и проверяет его для каждого запроса.</p>\r\n\r\n<p>Токен находится в скрытом поле, должен быть непредсказуемым случайным числом и иметь небольшое время жизни, без возможности переиспользования.<br />\r\n<br />\r\nИменно такой метод защиты используется в Джанго.</p>\r\n\r\n<p><strong>Как пользоваться</strong></p>\r\n\r\n<p>Чтобы воспользоваться преимуществами защиты CSRF в ваших представлениях, выполните следующие действия:</p>\r\n\r\n<p>&nbsp; &nbsp; По умолчанию промежуточное ПО CSRF активировано в MIDDLEWARE настройках. Если вы переопределите этот параметр, помните, что он <strong>&#39;django.middleware.csrf.CsrfViewMiddleware&#39;</strong> должен быть перед любым промежуточным программным обеспечением просмотра, которое предполагает, что CSRF-атаки были устранены.</p>\r\n\r\n<p>&nbsp; &nbsp; В любом шаблоне, который использует форму POST, используйте csrf_token тег внутри &lt;form&gt;элемента, если форма предназначена для внутреннего URL-адреса, например:</p>\r\n\r\n<p>&nbsp; &nbsp; &lt;form method=&quot;post&quot;&gt;<strong>{% csrf_token %}</strong></p>\r\n\r\n<p>Подробнее можете посмотреть <a href=\"https://djangodoc.ru/3.2/ref/csrf/\">здесь</a>.&nbsp;<br />\r\n&nbsp;</p>",
    "created_at": "2024-07-22T19:52:59.157Z",
    "updated_at": "2024-09-08T15:33:56.668Z",
    "photo": "photo/2024/07/22/CSRF_Preview.jpg",
    "is_published": true,
    "category": 6,
    "tags": [
      14,
      15,
      16
    ]
  }
},
{
  "model": "blog.article",
  "pk": 48,
  "fields": {
    "title": "Разработка системы комментариев в Джанго (Создание форм из моделей)",
    "slug": "razrabotka-sistemyi-kommentariev-v-dzhango-sozdanie-form-iz-modelej",
    "content": "<p>В предыдущих статьях можно ознакомиться с материалами на тему создания приложения Блог.</p>\r\n\r\n<p>Например, <a href=\"/dzhango/otpravka-elektronnyih-pisem-s-pomoschyu-django/\">отправка электронных писем</a>. В этой статье опишем как к существующим статьям блога добавить возможность оставлять комментарии.&nbsp;</p>\r\n\r\n<p>Для того чтобы разработать такую систему, понадобится:</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; модель комментария, чтобы хранить комментарии пользователей к&nbsp;постам;</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; форма, которая позволяет пользователям передавать комментарии на обработку и&nbsp;управляет валидацией данных;</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; представление, которое обрабатывает форму и&nbsp;сохраняет новый комментарий в&nbsp;базе данных;</p>\r\n\r\n<p style=\"margin-left:40px\">&bull; список комментариев и форма, чтобы добавлять новый комментарий, который может быть вставлен в&nbsp;шаблон детальной информации о&nbsp;посте.</p>\r\n\r\n<p>Добавим такой код в models.py</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/23/image-20240723155712-1.png\" style=\"height:422px; width:800px\" /></p>\r\n\r\n<p>Как обычно нужно создать миграции и применить их.</p>\r\n\r\n<p>Далее нужно добавить комментарии в админку.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/25/image-20240725213248-1.png\" style=\"height:290px; width:707px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Теперь необходимо создать форму позволяющую добавлять комментарий к посту.</p>\r\n\r\n<p>В статье &quot;<a href=\"/dzhango/razrabotka-form-s-pomoschyu-django/\">Разработка форм в Джанго</a>&quot; мы коснулись этой темы но создали лишь обычную форму не связанную с моделью.</p>\r\n\r\n<p>Теперь же ситуация иная - нужна форма связанная с моделью (<strong>ModelForm</strong>).</p>\r\n\r\n<p>Отредактируем forms.py файл</p>\r\n\r\n<blockquote>\r\n<p>from .models import Comment<br />\r\nclass CommentForm(forms.ModelForm):<br />\r\n&nbsp; &nbsp;&nbsp;class Meta:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;model = Comment<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;fields = [&#39;name&#39;, &#39;email&#39;, &#39;body&#39;]</p>\r\n</blockquote>\r\n\r\n<p>Как видим, для того чтобы создать форму из модели, надо в&nbsp;Meta-классе формы просто указать модель, для которой следует компоновать форму. Django проведет интроспекцию модели и&nbsp;динамически скомпонует соответствующую форму.</p>\r\n\r\n<p>Каждому типу поля модели соответствует заранее заданный тип поля формы. Атрибуты полей модели учитываются при валидации формы. По умолчанию Django создает поле формы для каждого содержащегося в&nbsp;модели поля. Однако, используя атрибут <strong>fields</strong>, можно сообщать поля, которые следует включать в&nbsp;форму, либо, используя атрибут <strong>exclude</strong>, сообщать поля, которые следует исключать, задавая поля в&nbsp;явном виде. В&nbsp;форме <strong>CommentForm </strong>мы включили поля name, email и&nbsp;body в&nbsp;явном виде. Это единственные поля, которые будут включены в&nbsp;форму.</p>\r\n\r\n<p>Далее добавим следующий код в представление</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/25/image-20240725215835-1.png\" style=\"height:440px; width:742px\" /></p>\r\n\r\n<p>декоратор&nbsp;@require_POST говорит о том что представление будет обрабатывать только HTTP POST запросы.</p>\r\n\r\n<p>Создадим УРЛ-шаблон</p>\r\n\r\n<blockquote>\r\n<p>path(&#39;&lt;int:post_id&gt;/comment/&#39;, views.post_comment, name=&#39;post_comment&#39;),</p>\r\n</blockquote>\r\n\r\n<p>Теперь к шаблонам.</p>\r\n\r\n<p>Добавим следующие файлы&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/26/image-20240726204039-1.png\" style=\"height:579px; width:372px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Со следующим содержимым</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/26/image-20240726204102-2.png\" style=\"height:359px; width:707px\" /></p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/26/image-20240726204134-3.png\" style=\"height:192px; width:734px\" /></p>\r\n\r\n<p>Ну и конечно чтобы отображать комментарии к посту мы должны их передать в шаблон из представления детальной информации о посте</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/26/image-20240726204543-4.png\" style=\"height:464px; width:711px\" /></p>\r\n\r\n<p>Выведем количество комментариев к посту</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/26/image-20240726204823-5.png\" style=\"height:422px; width:900px\" /></p>\r\n\r\n<p>Далее добавим непосредственно блок с комментариями а также форму добавления комментария</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/26/image-20240726210008-7.png\" style=\"height:266px; width:800px\" /></p>\r\n\r\n<p>Должно получиться как-то так</p>\r\n\r\n<p><img src=\"/media/uploads/2024/07/26/image-20240726210257-8.png\" style=\"height:712px; width:556px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-07-23T13:59:25.753Z",
    "updated_at": "2024-09-08T15:32:19.467Z",
    "photo": "photo/2024/07/23/SCR1.png",
    "is_published": true,
    "category": 3,
    "tags": [
      10,
      11,
      12,
      13
    ]
  }
},
{
  "model": "blog.article",
  "pk": 49,
  "fields": {
    "title": "Получение данных из связанных таблиц в Джанго",
    "slug": "poluchenie-dannyih-iz-svyazannyih-tablits-v-dzhango",
    "content": "<p>В статье про <a href=\"/dzhango/razrabotka-sistemyi-kommentariev-v-dzhango/\">разработку системы комментариев</a> мы создали связь <strong>многие-к-одному</strong>. У поста может быть много комментариев, но у комментария лишь один пост к которому он относится. Для этого в модели Comment мы определили такое поле</p>\r\n\r\n<blockquote>\r\n<p>post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name=&#39;comments&#39;)</p>\r\n</blockquote>\r\n\r\n<p>Таким образом чтобы обратиться к посту комментария, нужно просто обратиться к этому полю - <strong>comment.post</strong>.</p>\r\n\r\n<p>А теперь обращаем внимание на атрибут <strong>related_name</strong>. Именно он говорит о том как можно обратиться из объекта Post к связанным комментариям. В нашем случае это будет <strong>post.comments.all()</strong>. Если же мы не укажем атрибут related_name, то по умолчанию получить комментарии поста можно будет так - <strong>post.comment_set.all()</strong>.&nbsp;</p>",
    "created_at": "2024-07-25T19:28:32.624Z",
    "updated_at": "2024-09-08T15:29:38.026Z",
    "photo": "",
    "is_published": true,
    "category": 3,
    "tags": [
      8,
      9
    ]
  }
},
{
  "model": "blog.article",
  "pk": 50,
  "fields": {
    "title": "Полезный Джанго модуль - django-extensions (shell_plus)",
    "slug": "poleznyij-dzhango-modul-django-extensions-shellplus",
    "content": "<p>При разработке проекта мы часто используем разные утилиты помогающие в написании кода, проектировании, исследовании.</p>\r\n\r\n<p>Одной из таких полезных утилит является полезный Джанго модуль&nbsp;django-extensions -&nbsp;<a href=\"https://django-extensions.readthedocs.io\">https://django-extensions.readthedocs.io</a></p>\r\n\r\n<p>Данный модуль обладает потрясающим множеством разнообразных функций.&nbsp;</p>\r\n\r\n<p>Рассмотрим лишь одну из них - <strong>shell_plus</strong>.</p>\r\n\r\n<p>По умолчанию в Джанго уже есть встроенная утилита Питон консоли (shell)</p>\r\n\r\n<p>Запускается так</p>\r\n\r\n<blockquote>\r\n<p>python manage.py shell</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/09/04/image-20240904183205-1.png\" style=\"height:153px; width:800px\" /></p>\r\n\r\n<p>Но как видим модели не подключаются автоматически и их нужно импортировать вручную.</p>\r\n\r\n<p>Тут нам на помощь приходит&nbsp;<strong>django-extensions</strong>!</p>\r\n\r\n<p>Установим так</p>\r\n\r\n<blockquote>\r\n<pre>\r\npip install django-extensions</pre>\r\n</blockquote>\r\n\r\n<p>Добавим в настройки&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/04/image-20240904183534-2.png\" style=\"height:320px; width:382px\" /></p>\r\n\r\n<p>И теперь можем пользоваться shell_plus так</p>\r\n\r\n<blockquote>\r\n<p>python manage.py shell_plus</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/09/04/image-20240904183642-3.png\" style=\"height:436px; width:899px\" /></p>\r\n\r\n<p>Как видим модели импортировались и их можно сразу использовать для тестирования кода!</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-09-04T16:37:40.760Z",
    "updated_at": "2024-09-08T16:36:25.675Z",
    "photo": "",
    "is_published": true,
    "category": 3,
    "tags": [
      5,
      6,
      7
    ]
  }
},
{
  "model": "blog.article",
  "pk": 51,
  "fields": {
    "title": "Тегирование в Джанго",
    "slug": "tegirovanie-v-dzhango",
    "content": "<p>Очень распространенной функциональностью в&nbsp;блогах является категоризация постов посредством тегов. Тег&nbsp;&ndash; это просто ключевое слово либо короткое словосочетание, которое можно назначать постам. В дальнейшем статьи с одинаковыми тегами можно группировать. Таким образом мы сталкиваемся со связью <strong>многие-ко-многим</strong>. Когда у статьи могут быть разные теги и в то же время один тег может быть добавлен ко множеству статей. Такую возможность называют тегированием и для Джанго даже разработан сторонний модуль&nbsp;<a href=\"https://django-taggit.readthedocs.io\"><strong>django-taggit</strong></a>. И этот модуль работает прекрасно за одним исключением. Если теги написаны на кириллице то и тег будет сформирован на кириллице. А это обычно не то что нужно если у нас остальные УРЛ на сайте написаны латиницей. Поэтому мы будем кастомизировать данный модуль -&nbsp;<a href=\"https://django-taggit.readthedocs.io/en/latest/custom_tagging.html\">https://django-taggit.readthedocs.io/en/latest/custom_tagging.html</a>. В случае кастомизации уже новые таблицы не будут принадлежать самому модулю. И поэтому мы можем создать абсолютно новое приложение и импортировать там django-taggit классы.</p>\r\n\r\n<p>Назовем новое приложение keywords</p>\r\n\r\n<blockquote>\r\n<p>django-admin startapp keywords</p>\r\n</blockquote>\r\n\r\n<p>Добавим его в INSTALLED_APPS</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907211638-1.png\" style=\"height:297px; width:357px\" /></p>\r\n\r\n<p>Далее в models.py файл пропишем следующий код в соответствии с инструкцией по кастомизации.</p>\r\n\r\n<blockquote>\r\n<p>from django.utils.text import slugify</p>\r\n\r\n<p>from taggit.models import TagBase, GenericTaggedItemBase</p>\r\n\r\n<p>def translit_to_eng(s: str) -&gt; str:</p>\r\n\r\n<p>&nbsp; &nbsp; d = {</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &quot;а&quot;: &quot;a&quot;,&quot;б&quot;: &quot;b&quot;,&quot;в&quot;: &quot;v&quot;,&quot;г&quot;: &quot;g&quot;,&quot;д&quot;: &quot;d&quot;,&quot;е&quot;: &quot;e&quot;,&quot;ё&quot;: &quot;yo&quot;,</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &quot;ж&quot;: &quot;zh&quot;,&quot;з&quot;: &quot;z&quot;,&quot;и&quot;: &quot;i&quot;,&quot;к&quot;: &quot;k&quot;,&quot;л&quot;: &quot;l&quot;,&quot;м&quot;: &quot;m&quot;,&quot;н&quot;: &quot;n&quot;,</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &quot;о&quot;: &quot;o&quot;,&quot;п&quot;: &quot;p&quot;,&quot;р&quot;: &quot;r&quot;,&quot;с&quot;: &quot;s&quot;,&quot;т&quot;: &quot;t&quot;,&quot;у&quot;: &quot;u&quot;,&quot;ф&quot;: &quot;f&quot;,</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &quot;х&quot;: &quot;h&quot;,&quot;ц&quot;: &quot;c&quot;,&quot;ч&quot;: &quot;ch&quot;,&quot;ш&quot;: &quot;sh&quot;,&quot;щ&quot;: &quot;shch&quot;,&quot;ь&quot;: &quot;&quot;,</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &quot;ы&quot;: &quot;y&quot;,&quot;ъ&quot;: &quot;&quot;,&quot;э&quot;: &quot;r&quot;,&quot;ю&quot;: &quot;yu&quot;,&quot;я&quot;: &quot;ya&quot;,</p>\r\n\r\n<p>&nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp; &nbsp; return &quot;&quot;.join(map(lambda x: d[x] if d.get(x, False) else x, s.lower()))</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>class TranslitTag(TagBase):</p>\r\n\r\n<p>&nbsp; &nbsp; def slugify(self, tag, i=None):</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; slug = super().slugify(tag, i)</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; return slugify(translit_to_eng(slug))</p>\r\n\r\n<p><br />\r\nclass TaggedWithTranslitTag(GenericTaggedItemBase):</p>\r\n\r\n<p>&nbsp; &nbsp; tag = models.ForeignKey(</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; TranslitTag,</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; on_delete=models.CASCADE,</p>\r\n\r\n<p>&nbsp; &nbsp; &nbsp; &nbsp; related_name=&quot;%(app_label)s_%(class)s_items&quot;,</p>\r\n\r\n<p>&nbsp; &nbsp; )</p>\r\n</blockquote>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Мы кастомизировали&nbsp;slugify метод так что теперь при сохранении объекта происходит транслит названия тега.</p>\r\n\r\n<p>Сам принцип работы taggit основан на GenericForeignKey и contenttypes фреймворке -&nbsp;<a href=\"https://docs.djangoproject.com/en/5.1/ref/contrib/contenttypes/\">https://docs.djangoproject.com/en/5.1/ref/contrib/contenttypes/</a>.&nbsp;</p>\r\n\r\n<p>По сути в базе данных появляются 2 новые таблицы&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907214652-2.png\" style=\"height:65px; width:334px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>С такой конфигурацией</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907214803-3.png\" style=\"height:197px; width:533px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907214821-4.png\" style=\"height:240px; width:477px\" /></p>\r\n\r\n<p>То есть есть теги с их транслитирированными слагами. А также промежуточная таблица которая может ссылаться на любую модель в нашем проекте.</p>\r\n\r\n<p>Так что нам осталось добавить следующий код в модель Post</p>\r\n\r\n<blockquote>\r\n<p>from taggit.managers import TaggableManager<br />\r\nfrom keywords.models import TaggedWithTranslitTag</p>\r\n</blockquote>\r\n\r\n<blockquote>\r\n<p>tags = TaggableManager(through=TaggedWithTranslitTag)</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907220009-5.png\" style=\"height:457px; width:688px\" /></p>\r\n\r\n<p>Причем taggit упрощает получение данных нежели если бы мы реализовывали все с нуля через&nbsp;</p>\r\n\r\n<p>GenericForeignKey.</p>\r\n\r\n<p>Так мы просто можем использовать такую запись и она автоматические создаст нужные теги и свяжет их с постом.</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907220251-6.png\" style=\"height:106px; width:578px\" /></p>\r\n\r\n<p>Далее добавим теги в админку</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907220331-7.png\" style=\"height:262px; width:545px\" /></p>\r\n\r\n<p>Теперь они отображаются в админке</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907220421-8.png\" style=\"height:213px; width:577px\" /></p>\r\n\r\n<p>Также появились записи в промежуточной таблице</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907220458-9.png\" style=\"height:297px; width:590px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Подправим также отображение записей самих статей в админке так</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907220658-10.png\" style=\"height:376px; width:800px\" /></p>\r\n\r\n<p>Вообще говоря можно в tag_list можно передать просто список list(obj.tags.all()). И теги будут также отображаться через запятую.</p>\r\n\r\n<p>Отображение в админке теперь такое</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907220749-11.png\" style=\"height:179px; width:800px\" /></p>\r\n\r\n<p>А при добавлении статьи само поле теперь такое (можно добавлять теги через запятую)</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907220837-12.png\" style=\"height:140px; width:485px\" /></p>\r\n\r\n<p>Казалось бы круто, но в этом подходе есть много минусов. Здесь описывается почему -&nbsp;<a href=\"https://lukeplant.me.uk/blog/posts/avoid-django-genericforeignkey/\">https://lukeplant.me.uk/blog/posts/avoid-django-genericforeignkey/</a>. Наверное taggit модуль один из редких случаев когда использование GenericForeignKey оправдано. Но и то если предполагается использование тегов для многих моделей. А так, если мы уверены что теги например будут только у статей то гораздо лучше сделать обычную связь многие-к-одному или многие-ко-многим через ManyToMany ключ.&nbsp;</p>\r\n\r\n<p>Так что данная статья больше ознакомительная, показывающая возможности Джанго.</p>\r\n\r\n<p>Поэтому продолжим разбор taggit.</p>\r\n\r\n<p>В списке статей можно отобразить и соответствующие теги</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907225307-1.png\" style=\"height:147px; width:778px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Далее мы можем создать страницу списка статей для определенного тега</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907230034-2.png\" style=\"height:219px; width:618px\" /></p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907230121-3.png\" style=\"height:75px; width:772px\" /></p>\r\n\r\n<p>Добавим также соответствующий шаблон УРЛ</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907230400-4.png\" style=\"height:242px; width:1024px\" /></p>\r\n\r\n<p>В шаблоне списка пропишем такой код</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907230656-5.png\" style=\"height:137px; width:538px\" /></p>\r\n\r\n<p>Само отображение тегов можно сделать сразу со ссылками на соответствующую страницу</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/07/image-20240907230824-6.png\" style=\"height:184px; width:616px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>",
    "created_at": "2024-09-06T21:01:55.905Z",
    "updated_at": "2024-09-08T18:14:55.984Z",
    "photo": "photo/2024/09/06/tag.jpg",
    "is_published": true,
    "category": 3,
    "tags": [
      2,
      3,
      4
    ]
  }
},
{
  "model": "blog.article",
  "pk": 52,
  "fields": {
    "title": "Файл не реагирует на добавление в .gitignore",
    "slug": "fajl-ne-reagiruet-na-dobavlenie-v-gitignore",
    "content": "<p>Бывает такое что файл добавлен в .gitignore файл но все равно его изменения продолжают отслеживаться.</p>\r\n\r\n<p>Такое случается когда изначально файл не был в Гитигнор и его уже добавляли в изменения.</p>\r\n\r\n<p>В таком случае этот файл нужно удалить (не физически из проекта а именно из гит).</p>\r\n\r\n<p>Делается это просто одной командой</p>\r\n\r\n<blockquote>\r\n<p>git rm -r --cached &lt;file&gt;</p>\r\n</blockquote>",
    "created_at": "2024-09-08T08:07:23.503Z",
    "updated_at": "2024-09-08T15:25:13.544Z",
    "photo": "photo/2024/09/08/gitignore.png",
    "is_published": true,
    "category": 5,
    "tags": [
      1
    ]
  }
},
{
  "model": "blog.article",
  "pk": 53,
  "fields": {
    "title": "Имя столбца в таблице админ-панели Джанго",
    "slug": "imya-stolbtsa-v-tablitse-admin-paneli-dzhango",
    "content": "<p>В статье посвященной <a href=\"/dzhango/tegirovanie-v-dzhango/\">тегированию</a> мы смогли добавить в админке в список статей отдельный столбец для тегов.</p>\r\n\r\n<p>Теги отлично отображаются в виде списка разделенного запятыми. Но название столбца отображается латиницей.</p>\r\n\r\n<p>При этом если для полей модели всегда можно добавить атрибут&nbsp;verbose_name который потом будет отображаться в админке с нашим новым полем так сделать не получится. Специально для таких случаев есть особое свойство&nbsp;<strong>short_description</strong>.</p>\r\n\r\n<p>Определяется это свойство так</p>\r\n\r\n<p>tag_list.short_description = &quot;Теги&quot;</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/08/image-20240908202037-1.png\" style=\"height:472px; width:718px\" /></p>",
    "created_at": "2024-09-08T18:21:13.806Z",
    "updated_at": "2024-09-08T18:23:29.757Z",
    "photo": "photo/2024/09/08/admin.png",
    "is_published": true,
    "category": 3,
    "tags": [
      2,
      43
    ]
  }
},
{
  "model": "blog.article",
  "pk": 54,
  "fields": {
    "title": "Вывод похожих статей",
    "slug": "vyivod-pohozhih-statej",
    "content": "<p>Одним из распространенных методов рекоммендации статей для пользователей является блок &quot;Похожие статьи&quot;.</p>\r\n\r\n<p>Но как мы можем определить какие статьи являются похожими? В этом нам поможет <a href=\"/dzhango/tegirovanie-v-dzhango/\">тегирование</a>.&nbsp;</p>\r\n\r\n<p>Посты на схожие темы будут иметь несколько общих тегов. Мы разработаем функциональность отображения схожих постов по числу имеющихся у&nbsp;них общих тегов. Причем, чем больше одинаковых тегов, тем схожими будут статьи.</p>\r\n\r\n<p>Все это будем делать в нашем приложении Блог.</p>\r\n\r\n<p>В файле views.py lля подсчета количества тегов импортируем&nbsp;функцию агрегирования count</p>\r\n\r\n<blockquote>\r\n<p>from django.db.models import Count</p>\r\n</blockquote>\r\n\r\n<p>И добавим следующий код для получения похожих статей</p>\r\n\r\n<blockquote>\r\n<p>post_tags_ids = post.tags.values_list(&quot;id&quot;, flat=True)<br />\r\nsimilar_posts = Post.published.filter(tags__in=post_tags_ids).exclude(id=post.id)<br />\r\nsimilar_posts = similar_posts.annotate(same_tags=Count(&quot;tags&quot;)).order_by(&quot;-same_tags&quot;, &quot;-publish&quot;)[:4]</p>\r\n</blockquote>\r\n\r\n<p><img src=\"/media/uploads/2024/09/09/image-20240909155046-1.png\" style=\"height:405px; width:794px\" /></p>\r\n\r\n<p>Алгоритм выборки следующий:</p>\r\n\r\n<p>Сначала мы получаем ID всех тегов для конкретного поста.&nbsp;values_list() возвращает кортежи со&nbsp;<br />\r\nзначениями заданных полей. Ему передается параметр flat=True, чтобы&nbsp;<br />\r\nполучить одиночные значения, такие как [1, 2, 3, ...], а не одноэлементые кортежи, такие как [(1,), (2,), (3,) ...].</p>\r\n\r\n<p>Потом берем все статьи у которых есть такие же теги. И сортируем их по количеству тегов от большего к меньшему.</p>\r\n\r\n<p>И наконец добавим HTML блок на страницу статьи</p>\r\n\r\n<p><img src=\"/media/uploads/2024/09/09/image-20240909170516-4.png\" style=\"height:289px; width:735px\" /></p>",
    "created_at": "2024-09-09T13:44:35.497Z",
    "updated_at": "2024-09-09T15:05:44.686Z",
    "photo": "photo/2024/09/09/similar.jpg",
    "is_published": true,
    "category": 3,
    "tags": [
      2,
      41,
      57
    ]
  }
},
{
  "model": "blog.tagpost",
  "pk": 1,
  "fields": {
    "tag": "gitignore",
    "slug": "gitignore"
  }
},
{
  "model": "blog.tagpost",
  "pk": 2,
  "fields": {
    "tag": "теги",
    "slug": "tegi"
  }
},
{
  "model": "blog.tagpost",
  "pk": 3,
  "fields": {
    "tag": "django-taggit",
    "slug": "django-taggit"
  }
},
{
  "model": "blog.tagpost",
  "pk": 4,
  "fields": {
    "tag": "GenericForeignKey",
    "slug": "genericforeignkey"
  }
},
{
  "model": "blog.tagpost",
  "pk": 5,
  "fields": {
    "tag": "django-extensions",
    "slug": "django-extensions"
  }
},
{
  "model": "blog.tagpost",
  "pk": 6,
  "fields": {
    "tag": "shell_plus",
    "slug": "shell_plus"
  }
},
{
  "model": "blog.tagpost",
  "pk": 7,
  "fields": {
    "tag": "shell",
    "slug": "shell"
  }
},
{
  "model": "blog.tagpost",
  "pk": 8,
  "fields": {
    "tag": "related_name",
    "slug": "related_name"
  }
},
{
  "model": "blog.tagpost",
  "pk": 9,
  "fields": {
    "tag": "ForeignKey",
    "slug": "foreignkey"
  }
},
{
  "model": "blog.tagpost",
  "pk": 10,
  "fields": {
    "tag": "ModelForm",
    "slug": "modelform"
  }
},
{
  "model": "blog.tagpost",
  "pk": 11,
  "fields": {
    "tag": "comments",
    "slug": "comments"
  }
},
{
  "model": "blog.tagpost",
  "pk": 12,
  "fields": {
    "tag": "формы",
    "slug": "formy"
  }
},
{
  "model": "blog.tagpost",
  "pk": 13,
  "fields": {
    "tag": "require",
    "slug": "require"
  }
},
{
  "model": "blog.tagpost",
  "pk": 14,
  "fields": {
    "tag": "уязвимость",
    "slug": "uyazvimost"
  }
},
{
  "model": "blog.tagpost",
  "pk": 15,
  "fields": {
    "tag": "csrf",
    "slug": "csrf"
  }
},
{
  "model": "blog.tagpost",
  "pk": 16,
  "fields": {
    "tag": "MIDDLEWARE",
    "slug": "middleware"
  }
},
{
  "model": "blog.tagpost",
  "pk": 17,
  "fields": {
    "tag": "ssl",
    "slug": "ssl"
  }
},
{
  "model": "blog.tagpost",
  "pk": 18,
  "fields": {
    "tag": "tls",
    "slug": "tls"
  }
},
{
  "model": "blog.tagpost",
  "pk": 19,
  "fields": {
    "tag": "OSI",
    "slug": "osi"
  }
},
{
  "model": "blog.tagpost",
  "pk": 20,
  "fields": {
    "tag": "сети",
    "slug": "seti"
  }
},
{
  "model": "blog.tagpost",
  "pk": 21,
  "fields": {
    "tag": "settings",
    "slug": "settings"
  }
},
{
  "model": "blog.tagpost",
  "pk": 22,
  "fields": {
    "tag": "email",
    "slug": "email"
  }
},
{
  "model": "blog.tagpost",
  "pk": 23,
  "fields": {
    "tag": "view",
    "slug": "view"
  }
},
{
  "model": "blog.tagpost",
  "pk": 24,
  "fields": {
    "tag": "классы",
    "slug": "klassy"
  }
},
{
  "model": "blog.tagpost",
  "pk": 25,
  "fields": {
    "tag": "pagination",
    "slug": "pagination"
  }
},
{
  "model": "blog.tagpost",
  "pk": 26,
  "fields": {
    "tag": "URL",
    "slug": "url"
  }
},
{
  "model": "blog.tagpost",
  "pk": 27,
  "fields": {
    "tag": "SEO",
    "slug": "seo"
  }
},
{
  "model": "blog.tagpost",
  "pk": 28,
  "fields": {
    "tag": "slug",
    "slug": "slug"
  }
},
{
  "model": "blog.tagpost",
  "pk": 29,
  "fields": {
    "tag": "namespace",
    "slug": "namespace"
  }
},
{
  "model": "blog.tagpost",
  "pk": 30,
  "fields": {
    "tag": "reverse",
    "slug": "reverse"
  }
},
{
  "model": "blog.tagpost",
  "pk": 31,
  "fields": {
    "tag": "request",
    "slug": "request"
  }
},
{
  "model": "blog.tagpost",
  "pk": 32,
  "fields": {
    "tag": "response",
    "slug": "response"
  }
},
{
  "model": "blog.tagpost",
  "pk": 33,
  "fields": {
    "tag": "translation",
    "slug": "translation"
  }
},
{
  "model": "blog.tagpost",
  "pk": 34,
  "fields": {
    "tag": "locale",
    "slug": "locale"
  }
},
{
  "model": "blog.tagpost",
  "pk": 35,
  "fields": {
    "tag": "static",
    "slug": "static"
  }
},
{
  "model": "blog.tagpost",
  "pk": 36,
  "fields": {
    "tag": "styles",
    "slug": "styles"
  }
},
{
  "model": "blog.tagpost",
  "pk": 37,
  "fields": {
    "tag": "load",
    "slug": "load"
  }
},
{
  "model": "blog.tagpost",
  "pk": 38,
  "fields": {
    "tag": "templates",
    "slug": "templates"
  }
},
{
  "model": "blog.tagpost",
  "pk": 39,
  "fields": {
    "tag": "конвертер",
    "slug": "konverter"
  }
},
{
  "model": "blog.tagpost",
  "pk": 40,
  "fields": {
    "tag": "shortcuts",
    "slug": "shortcuts"
  }
},
{
  "model": "blog.tagpost",
  "pk": 41,
  "fields": {
    "tag": "ORM",
    "slug": "orm"
  }
},
{
  "model": "blog.tagpost",
  "pk": 42,
  "fields": {
    "tag": "manager",
    "slug": "manager"
  }
},
{
  "model": "blog.tagpost",
  "pk": 43,
  "fields": {
    "tag": "admin",
    "slug": "admin"
  }
},
{
  "model": "blog.tagpost",
  "pk": 44,
  "fields": {
    "tag": "user",
    "slug": "user"
  }
},
{
  "model": "blog.tagpost",
  "pk": 45,
  "fields": {
    "tag": "TextChoices",
    "slug": "textchoices"
  }
},
{
  "model": "blog.tagpost",
  "pk": 46,
  "fields": {
    "tag": "index",
    "slug": "index"
  }
},
{
  "model": "blog.tagpost",
  "pk": 47,
  "fields": {
    "tag": "ordering",
    "slug": "ordering"
  }
},
{
  "model": "blog.tagpost",
  "pk": 48,
  "fields": {
    "tag": "Github",
    "slug": "github"
  }
},
{
  "model": "blog.tagpost",
  "pk": 49,
  "fields": {
    "tag": "VS code",
    "slug": "vs-code"
  }
},
{
  "model": "blog.tagpost",
  "pk": 50,
  "fields": {
    "tag": "date",
    "slug": "date"
  }
},
{
  "model": "blog.tagpost",
  "pk": 51,
  "fields": {
    "tag": "models",
    "slug": "models"
  }
},
{
  "model": "blog.tagpost",
  "pk": 52,
  "fields": {
    "tag": "migrations",
    "slug": "migrations"
  }
},
{
  "model": "blog.tagpost",
  "pk": 53,
  "fields": {
    "tag": "приложение",
    "slug": "prilozhenie"
  }
},
{
  "model": "blog.tagpost",
  "pk": 54,
  "fields": {
    "tag": "tools",
    "slug": "tools"
  }
},
{
  "model": "blog.tagpost",
  "pk": 55,
  "fields": {
    "tag": "PostgreSQL",
    "slug": "postgresql"
  }
},
{
  "model": "blog.tagpost",
  "pk": 56,
  "fields": {
    "tag": "ACID",
    "slug": "acid"
  }
},
{
  "model": "blog.tagpost",
  "pk": 57,
  "fields": {
    "tag": "count",
    "slug": "count"
  }
},
{
  "model": "subscription.subscription",
  "pk": 1,
  "fields": {
    "email": "nuriev_rishat@mail.ru",
    "date": "2024-05-29T13:39:42.834Z"
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 3,
  "fields": {
    "hits": 1,
    "modified": "2024-05-27T08:14:06.284Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 3
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 4,
  "fields": {
    "hits": 1,
    "modified": "2024-05-27T08:58:06.015Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 4
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 5,
  "fields": {
    "hits": 1,
    "modified": "2024-05-27T09:26:51.517Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 5
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 6,
  "fields": {
    "hits": 2,
    "modified": "2024-09-02T16:30:03.203Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 6
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 7,
  "fields": {
    "hits": 2,
    "modified": "2024-09-02T16:31:29.264Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 7
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 8,
  "fields": {
    "hits": 3,
    "modified": "2024-09-02T16:32:40.683Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 8
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 9,
  "fields": {
    "hits": 3,
    "modified": "2024-09-02T16:34:00.847Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 9
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 10,
  "fields": {
    "hits": 1,
    "modified": "2024-05-31T11:33:33.112Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 10
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 11,
  "fields": {
    "hits": 1,
    "modified": "2024-06-05T07:56:56.710Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 12
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 12,
  "fields": {
    "hits": 1,
    "modified": "2024-06-05T10:56:12.597Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 14
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 13,
  "fields": {
    "hits": 1,
    "modified": "2024-06-05T10:56:15.548Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 13
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 14,
  "fields": {
    "hits": 2,
    "modified": "2024-09-02T16:36:49.632Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 15
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 15,
  "fields": {
    "hits": 2,
    "modified": "2024-09-02T16:37:54.777Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 16
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 16,
  "fields": {
    "hits": 3,
    "modified": "2024-09-04T14:17:00.724Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 17
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 17,
  "fields": {
    "hits": 4,
    "modified": "2024-09-04T14:32:39.913Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 18
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 18,
  "fields": {
    "hits": 2,
    "modified": "2024-09-08T08:02:12.032Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 20
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 19,
  "fields": {
    "hits": 1,
    "modified": "2024-06-14T15:38:18.600Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 21
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 20,
  "fields": {
    "hits": 2,
    "modified": "2024-09-04T14:36:07.726Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 19
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 21,
  "fields": {
    "hits": 2,
    "modified": "2024-09-04T16:10:49.893Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 24
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 22,
  "fields": {
    "hits": 2,
    "modified": "2024-09-04T18:34:04.186Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 25
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 23,
  "fields": {
    "hits": 2,
    "modified": "2024-09-04T20:45:37.738Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 26
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 24,
  "fields": {
    "hits": 2,
    "modified": "2024-09-04T20:46:18.107Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 27
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 25,
  "fields": {
    "hits": 1,
    "modified": "2024-06-19T14:34:39.756Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 29
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 26,
  "fields": {
    "hits": 1,
    "modified": "2024-06-19T15:06:17.972Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 30
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 27,
  "fields": {
    "hits": 4,
    "modified": "2024-09-04T20:58:04.235Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 32
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 28,
  "fields": {
    "hits": 3,
    "modified": "2024-09-04T21:05:38.197Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 34
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 29,
  "fields": {
    "hits": 3,
    "modified": "2024-10-04T18:08:27.162Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 36
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 30,
  "fields": {
    "hits": 4,
    "modified": "2024-09-06T14:02:49.671Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 35
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 31,
  "fields": {
    "hits": 2,
    "modified": "2024-09-06T16:10:27.967Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 37
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 32,
  "fields": {
    "hits": 2,
    "modified": "2024-09-06T16:39:32.476Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 38
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 33,
  "fields": {
    "hits": 2,
    "modified": "2024-09-06T17:02:04.299Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 40
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 34,
  "fields": {
    "hits": 2,
    "modified": "2024-09-06T17:05:51.024Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 41
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 35,
  "fields": {
    "hits": 1,
    "modified": "2024-07-18T15:50:37.095Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 45
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 36,
  "fields": {
    "hits": 2,
    "modified": "2024-09-06T18:16:33.153Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 46
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 37,
  "fields": {
    "hits": 2,
    "modified": "2024-09-06T18:15:41.459Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 44
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 38,
  "fields": {
    "hits": 2,
    "modified": "2024-09-06T18:12:18.491Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 43
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 39,
  "fields": {
    "hits": 2,
    "modified": "2024-09-06T18:20:20.957Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 48
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 40,
  "fields": {
    "hits": 1,
    "modified": "2024-09-02T15:31:48.210Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 49
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 41,
  "fields": {
    "hits": 1,
    "modified": "2024-09-04T14:38:31.917Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 22
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 42,
  "fields": {
    "hits": 1,
    "modified": "2024-09-04T15:09:29.205Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 23
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 43,
  "fields": {
    "hits": 1,
    "modified": "2024-09-04T16:39:03.716Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 50
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 44,
  "fields": {
    "hits": 1,
    "modified": "2024-09-04T20:47:31.115Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 28
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 45,
  "fields": {
    "hits": 1,
    "modified": "2024-09-04T21:04:50.863Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 33
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 46,
  "fields": {
    "hits": 1,
    "modified": "2024-09-06T16:41:23.705Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 39
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 47,
  "fields": {
    "hits": 1,
    "modified": "2024-09-06T17:14:47.634Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 42
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 48,
  "fields": {
    "hits": 1,
    "modified": "2024-09-07T20:47:29.670Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 51
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 49,
  "fields": {
    "hits": 1,
    "modified": "2024-09-09T15:31:16.867Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 54
  }
},
{
  "model": "hitcount.hitcount",
  "pk": 50,
  "fields": {
    "hits": 1,
    "modified": "2024-09-09T15:58:31.828Z",
    "content_type": [
      "blog",
      "article"
    ],
    "object_pk": 53
  }
},
{
  "model": "hitcount.hit",
  "pk": 3,
  "fields": {
    "created": "2024-05-27T08:14:06.314Z",
    "ip": "127.0.0.1",
    "session": "kszzvwp9ro2pr435jjyhnp24qx3axiu3",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 3
  }
},
{
  "model": "hitcount.hit",
  "pk": 4,
  "fields": {
    "created": "2024-05-27T08:58:06.050Z",
    "ip": "127.0.0.1",
    "session": "5li2u9ddczex02y51hllqbwkfj4iwqgi",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 4
  }
},
{
  "model": "hitcount.hit",
  "pk": 5,
  "fields": {
    "created": "2024-05-27T09:26:51.550Z",
    "ip": "127.0.0.1",
    "session": "5li2u9ddczex02y51hllqbwkfj4iwqgi",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 5
  }
},
{
  "model": "hitcount.hit",
  "pk": 6,
  "fields": {
    "created": "2024-05-27T09:59:18.174Z",
    "ip": "127.0.0.1",
    "session": "5li2u9ddczex02y51hllqbwkfj4iwqgi",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 6
  }
},
{
  "model": "hitcount.hit",
  "pk": 7,
  "fields": {
    "created": "2024-05-30T14:49:51.753Z",
    "ip": "127.0.0.1",
    "session": "hq5xiqdvh9si5xupnxk8xfl2xu05p7ar",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 7
  }
},
{
  "model": "hitcount.hit",
  "pk": 8,
  "fields": {
    "created": "2024-05-30T15:51:14.917Z",
    "ip": "127.0.0.1",
    "session": "hq5xiqdvh9si5xupnxk8xfl2xu05p7ar",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 8
  }
},
{
  "model": "hitcount.hit",
  "pk": 9,
  "fields": {
    "created": "2024-05-31T10:59:02.678Z",
    "ip": "127.0.0.1",
    "session": "hq5xiqdvh9si5xupnxk8xfl2xu05p7ar",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 9
  }
},
{
  "model": "hitcount.hit",
  "pk": 10,
  "fields": {
    "created": "2024-05-31T11:33:33.143Z",
    "ip": "127.0.0.1",
    "session": "hq5xiqdvh9si5xupnxk8xfl2xu05p7ar",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 10
  }
},
{
  "model": "hitcount.hit",
  "pk": 11,
  "fields": {
    "created": "2024-06-05T07:56:56.737Z",
    "ip": "127.0.0.1",
    "session": "hq5xiqdvh9si5xupnxk8xfl2xu05p7ar",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 11
  }
},
{
  "model": "hitcount.hit",
  "pk": 12,
  "fields": {
    "created": "2024-06-05T10:56:12.624Z",
    "ip": "127.0.0.1",
    "session": "hq5xiqdvh9si5xupnxk8xfl2xu05p7ar",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 12
  }
},
{
  "model": "hitcount.hit",
  "pk": 13,
  "fields": {
    "created": "2024-06-05T10:56:15.576Z",
    "ip": "127.0.0.1",
    "session": "hq5xiqdvh9si5xupnxk8xfl2xu05p7ar",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 13
  }
},
{
  "model": "hitcount.hit",
  "pk": 14,
  "fields": {
    "created": "2024-06-10T18:07:14.859Z",
    "ip": "127.0.0.1",
    "session": "hq5xiqdvh9si5xupnxk8xfl2xu05p7ar",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 14
  }
},
{
  "model": "hitcount.hit",
  "pk": 15,
  "fields": {
    "created": "2024-06-10T18:29:28.536Z",
    "ip": "127.0.0.1",
    "session": "ilid075o850fwxu6k5syivybw0h44hnm",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 9
  }
},
{
  "model": "hitcount.hit",
  "pk": 16,
  "fields": {
    "created": "2024-06-10T18:40:05.282Z",
    "ip": "127.0.0.1",
    "session": "ilid075o850fwxu6k5syivybw0h44hnm",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 15
  }
},
{
  "model": "hitcount.hit",
  "pk": 17,
  "fields": {
    "created": "2024-06-10T18:56:49.493Z",
    "ip": "127.0.0.1",
    "session": "ilid075o850fwxu6k5syivybw0h44hnm",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 16
  }
},
{
  "model": "hitcount.hit",
  "pk": 18,
  "fields": {
    "created": "2024-06-10T19:16:14.451Z",
    "ip": "127.0.0.1",
    "session": "ilid075o850fwxu6k5syivybw0h44hnm",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 17
  }
},
{
  "model": "hitcount.hit",
  "pk": 19,
  "fields": {
    "created": "2024-06-12T19:16:25.159Z",
    "ip": "127.0.0.1",
    "session": "ilid075o850fwxu6k5syivybw0h44hnm",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 18
  }
},
{
  "model": "hitcount.hit",
  "pk": 20,
  "fields": {
    "created": "2024-06-14T15:38:18.629Z",
    "ip": "127.0.0.1",
    "session": "ilid075o850fwxu6k5syivybw0h44hnm",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 19
  }
},
{
  "model": "hitcount.hit",
  "pk": 21,
  "fields": {
    "created": "2024-06-14T15:41:12.871Z",
    "ip": "127.0.0.1",
    "session": "ilid075o850fwxu6k5syivybw0h44hnm",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 20
  }
},
{
  "model": "hitcount.hit",
  "pk": 22,
  "fields": {
    "created": "2024-06-14T16:52:56.030Z",
    "ip": "127.0.0.1",
    "session": "ilid075o850fwxu6k5syivybw0h44hnm",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 21
  }
},
{
  "model": "hitcount.hit",
  "pk": 23,
  "fields": {
    "created": "2024-06-18T13:36:59.546Z",
    "ip": "127.0.0.1",
    "session": "ilid075o850fwxu6k5syivybw0h44hnm",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 22
  }
},
{
  "model": "hitcount.hit",
  "pk": 24,
  "fields": {
    "created": "2024-06-18T14:00:08.248Z",
    "ip": "127.0.0.1",
    "session": "ilid075o850fwxu6k5syivybw0h44hnm",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 17
  }
},
{
  "model": "hitcount.hit",
  "pk": 25,
  "fields": {
    "created": "2024-06-18T14:36:08.676Z",
    "ip": "127.0.0.1",
    "session": "ilid075o850fwxu6k5syivybw0h44hnm",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 23
  }
},
{
  "model": "hitcount.hit",
  "pk": 26,
  "fields": {
    "created": "2024-06-18T14:58:20.235Z",
    "ip": "127.0.0.1",
    "session": "6i6ztr6ik8t05ietm78nordrt8uu5jf4",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 24
  }
},
{
  "model": "hitcount.hit",
  "pk": 27,
  "fields": {
    "created": "2024-06-19T14:34:39.788Z",
    "ip": "127.0.0.1",
    "session": "6i6ztr6ik8t05ietm78nordrt8uu5jf4",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 25
  }
},
{
  "model": "hitcount.hit",
  "pk": 28,
  "fields": {
    "created": "2024-06-19T15:06:18.001Z",
    "ip": "127.0.0.1",
    "session": "6i6ztr6ik8t05ietm78nordrt8uu5jf4",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 26
  }
},
{
  "model": "hitcount.hit",
  "pk": 29,
  "fields": {
    "created": "2024-06-21T15:46:05.261Z",
    "ip": "127.0.0.1",
    "session": "6i6ztr6ik8t05ietm78nordrt8uu5jf4",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 8
  }
},
{
  "model": "hitcount.hit",
  "pk": 30,
  "fields": {
    "created": "2024-06-21T18:19:10.485Z",
    "ip": "127.0.0.1",
    "session": "6i6ztr6ik8t05ietm78nordrt8uu5jf4",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 27
  }
},
{
  "model": "hitcount.hit",
  "pk": 31,
  "fields": {
    "created": "2024-06-24T18:11:45.680Z",
    "ip": "127.0.0.1",
    "session": "6i6ztr6ik8t05ietm78nordrt8uu5jf4",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 28
  }
},
{
  "model": "hitcount.hit",
  "pk": 32,
  "fields": {
    "created": "2024-06-27T21:11:04.075Z",
    "ip": "127.0.0.1",
    "session": "6i6ztr6ik8t05ietm78nordrt8uu5jf4",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 29
  }
},
{
  "model": "hitcount.hit",
  "pk": 33,
  "fields": {
    "created": "2024-06-28T16:49:14.737Z",
    "ip": "127.0.0.1",
    "session": "6i6ztr6ik8t05ietm78nordrt8uu5jf4",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 30
  }
},
{
  "model": "hitcount.hit",
  "pk": 34,
  "fields": {
    "created": "2024-07-09T15:04:52.417Z",
    "ip": "127.0.0.1",
    "session": "5avf1tylkvy2yk6oort5wc4rzjcgbic7",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 31
  }
},
{
  "model": "hitcount.hit",
  "pk": 35,
  "fields": {
    "created": "2024-07-09T15:42:49.336Z",
    "ip": "127.0.0.1",
    "session": "5avf1tylkvy2yk6oort5wc4rzjcgbic7",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 32
  }
},
{
  "model": "hitcount.hit",
  "pk": 36,
  "fields": {
    "created": "2024-07-09T15:47:39.404Z",
    "ip": "127.0.0.1",
    "session": "5avf1tylkvy2yk6oort5wc4rzjcgbic7",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 28
  }
},
{
  "model": "hitcount.hit",
  "pk": 37,
  "fields": {
    "created": "2024-07-09T15:51:30.549Z",
    "ip": "127.0.0.1",
    "session": "5avf1tylkvy2yk6oort5wc4rzjcgbic7",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 30
  }
},
{
  "model": "hitcount.hit",
  "pk": 38,
  "fields": {
    "created": "2024-07-09T16:09:23.658Z",
    "ip": "127.0.0.1",
    "session": "5avf1tylkvy2yk6oort5wc4rzjcgbic7",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 27
  }
},
{
  "model": "hitcount.hit",
  "pk": 39,
  "fields": {
    "created": "2024-07-09T16:09:58.490Z",
    "ip": "127.0.0.1",
    "session": "5avf1tylkvy2yk6oort5wc4rzjcgbic7",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 17
  }
},
{
  "model": "hitcount.hit",
  "pk": 40,
  "fields": {
    "created": "2024-07-09T16:29:33.597Z",
    "ip": "127.0.0.1",
    "session": "5avf1tylkvy2yk6oort5wc4rzjcgbic7",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 33
  }
},
{
  "model": "hitcount.hit",
  "pk": 41,
  "fields": {
    "created": "2024-07-12T20:04:50.856Z",
    "ip": "127.0.0.1",
    "session": "5avf1tylkvy2yk6oort5wc4rzjcgbic7",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 34
  }
},
{
  "model": "hitcount.hit",
  "pk": 42,
  "fields": {
    "created": "2024-07-16T18:19:15.430Z",
    "ip": "127.0.0.1",
    "session": "5avf1tylkvy2yk6oort5wc4rzjcgbic7",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 30
  }
},
{
  "model": "hitcount.hit",
  "pk": 43,
  "fields": {
    "created": "2024-07-16T18:19:27.924Z",
    "ip": "127.0.0.1",
    "session": "5avf1tylkvy2yk6oort5wc4rzjcgbic7",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 27
  }
},
{
  "model": "hitcount.hit",
  "pk": 44,
  "fields": {
    "created": "2024-07-16T19:33:49.087Z",
    "ip": "127.0.0.1",
    "session": "5avf1tylkvy2yk6oort5wc4rzjcgbic7",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 16
  }
},
{
  "model": "hitcount.hit",
  "pk": 45,
  "fields": {
    "created": "2024-07-18T15:50:37.123Z",
    "ip": "127.0.0.1",
    "session": "5avf1tylkvy2yk6oort5wc4rzjcgbic7",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 35
  }
},
{
  "model": "hitcount.hit",
  "pk": 46,
  "fields": {
    "created": "2024-07-19T15:20:43.888Z",
    "ip": "127.0.0.1",
    "session": "5avf1tylkvy2yk6oort5wc4rzjcgbic7",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 36
  }
},
{
  "model": "hitcount.hit",
  "pk": 47,
  "fields": {
    "created": "2024-07-22T13:41:14.000Z",
    "ip": "127.0.0.1",
    "session": "jsr92whm8229nw5zvm5q48e7dbbvetik",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 37
  }
},
{
  "model": "hitcount.hit",
  "pk": 48,
  "fields": {
    "created": "2024-07-22T14:04:43.440Z",
    "ip": "127.0.0.1",
    "session": "jsr92whm8229nw5zvm5q48e7dbbvetik",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 38
  }
},
{
  "model": "hitcount.hit",
  "pk": 49,
  "fields": {
    "created": "2024-07-25T18:46:20.731Z",
    "ip": "127.0.0.1",
    "session": "jsr92whm8229nw5zvm5q48e7dbbvetik",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "user": [
      "admin"
    ],
    "hitcount": 39
  }
},
{
  "model": "hitcount.hit",
  "pk": 50,
  "fields": {
    "created": "2024-09-02T15:31:48.244Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 40
  }
},
{
  "model": "hitcount.hit",
  "pk": 51,
  "fields": {
    "created": "2024-09-02T16:30:03.236Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 6
  }
},
{
  "model": "hitcount.hit",
  "pk": 52,
  "fields": {
    "created": "2024-09-02T16:31:29.296Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 7
  }
},
{
  "model": "hitcount.hit",
  "pk": 53,
  "fields": {
    "created": "2024-09-02T16:32:40.714Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 8
  }
},
{
  "model": "hitcount.hit",
  "pk": 54,
  "fields": {
    "created": "2024-09-02T16:34:00.878Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 9
  }
},
{
  "model": "hitcount.hit",
  "pk": 55,
  "fields": {
    "created": "2024-09-02T16:36:49.666Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 14
  }
},
{
  "model": "hitcount.hit",
  "pk": 56,
  "fields": {
    "created": "2024-09-02T16:37:54.807Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 15
  }
},
{
  "model": "hitcount.hit",
  "pk": 57,
  "fields": {
    "created": "2024-09-04T14:17:00.754Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 16
  }
},
{
  "model": "hitcount.hit",
  "pk": 58,
  "fields": {
    "created": "2024-09-04T14:32:39.945Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 17
  }
},
{
  "model": "hitcount.hit",
  "pk": 59,
  "fields": {
    "created": "2024-09-04T14:36:07.757Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 20
  }
},
{
  "model": "hitcount.hit",
  "pk": 60,
  "fields": {
    "created": "2024-09-04T14:38:31.945Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 41
  }
},
{
  "model": "hitcount.hit",
  "pk": 61,
  "fields": {
    "created": "2024-09-04T15:09:29.233Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 42
  }
},
{
  "model": "hitcount.hit",
  "pk": 62,
  "fields": {
    "created": "2024-09-04T16:10:49.926Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 21
  }
},
{
  "model": "hitcount.hit",
  "pk": 63,
  "fields": {
    "created": "2024-09-04T16:39:03.747Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 43
  }
},
{
  "model": "hitcount.hit",
  "pk": 64,
  "fields": {
    "created": "2024-09-04T18:34:04.222Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 22
  }
},
{
  "model": "hitcount.hit",
  "pk": 65,
  "fields": {
    "created": "2024-09-04T20:45:37.768Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 23
  }
},
{
  "model": "hitcount.hit",
  "pk": 66,
  "fields": {
    "created": "2024-09-04T20:46:18.138Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 24
  }
},
{
  "model": "hitcount.hit",
  "pk": 67,
  "fields": {
    "created": "2024-09-04T20:47:31.144Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 44
  }
},
{
  "model": "hitcount.hit",
  "pk": 68,
  "fields": {
    "created": "2024-09-04T20:58:04.268Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 27
  }
},
{
  "model": "hitcount.hit",
  "pk": 69,
  "fields": {
    "created": "2024-09-04T21:04:50.896Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 45
  }
},
{
  "model": "hitcount.hit",
  "pk": 70,
  "fields": {
    "created": "2024-09-04T21:05:38.228Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 28
  }
},
{
  "model": "hitcount.hit",
  "pk": 71,
  "fields": {
    "created": "2024-09-06T14:02:49.709Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 30
  }
},
{
  "model": "hitcount.hit",
  "pk": 72,
  "fields": {
    "created": "2024-09-06T15:55:38.972Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 29
  }
},
{
  "model": "hitcount.hit",
  "pk": 73,
  "fields": {
    "created": "2024-09-06T16:10:27.997Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 31
  }
},
{
  "model": "hitcount.hit",
  "pk": 74,
  "fields": {
    "created": "2024-09-06T16:39:32.508Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 32
  }
},
{
  "model": "hitcount.hit",
  "pk": 75,
  "fields": {
    "created": "2024-09-06T16:41:23.734Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 46
  }
},
{
  "model": "hitcount.hit",
  "pk": 76,
  "fields": {
    "created": "2024-09-06T17:02:04.329Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 33
  }
},
{
  "model": "hitcount.hit",
  "pk": 77,
  "fields": {
    "created": "2024-09-06T17:05:51.056Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 34
  }
},
{
  "model": "hitcount.hit",
  "pk": 78,
  "fields": {
    "created": "2024-09-06T17:14:47.663Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 47
  }
},
{
  "model": "hitcount.hit",
  "pk": 79,
  "fields": {
    "created": "2024-09-06T18:12:18.522Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 38
  }
},
{
  "model": "hitcount.hit",
  "pk": 80,
  "fields": {
    "created": "2024-09-06T18:15:41.490Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 37
  }
},
{
  "model": "hitcount.hit",
  "pk": 81,
  "fields": {
    "created": "2024-09-06T18:16:33.184Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 36
  }
},
{
  "model": "hitcount.hit",
  "pk": 82,
  "fields": {
    "created": "2024-09-06T18:20:20.986Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 39
  }
},
{
  "model": "hitcount.hit",
  "pk": 83,
  "fields": {
    "created": "2024-09-07T20:47:29.713Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 48
  }
},
{
  "model": "hitcount.hit",
  "pk": 84,
  "fields": {
    "created": "2024-09-08T08:02:12.063Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 18
  }
},
{
  "model": "hitcount.hit",
  "pk": 85,
  "fields": {
    "created": "2024-09-09T15:31:16.907Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 49
  }
},
{
  "model": "hitcount.hit",
  "pk": 86,
  "fields": {
    "created": "2024-09-09T15:58:31.868Z",
    "ip": "127.0.0.1",
    "session": "qz4h44d6yhua0pgtoqd940iydmpjjblh",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0",
    "user": [
      "admin"
    ],
    "hitcount": 50
  }
},
{
  "model": "hitcount.hit",
  "pk": 88,
  "fields": {
    "created": "2024-10-04T18:08:27.168Z",
    "ip": "127.0.0.1",
    "session": "m0zlet8v9lkkz8wfuhqktcqfr15h1ace",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/129.0.0.0",
    "user": null,
    "hitcount": 29
  }
},
{
  "model": "captcha.captchastore",
  "pk": 45,
  "fields": {
    "challenge": "XHJU",
    "response": "xhju",
    "hashkey": "1a7ae8043294858fd1e1204c5cb6b495e5b22bc2",
    "expiration": "2024-05-29T13:52:49.375Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 46,
  "fields": {
    "challenge": "ZZIV",
    "response": "zziv",
    "hashkey": "5bcf2b92aa53d6b2b4ef41d88e5e8d2f60b4e8e6",
    "expiration": "2024-05-30T14:32:15.801Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 47,
  "fields": {
    "challenge": "JNCX",
    "response": "jncx",
    "hashkey": "f0e2c91cb37387176387014a61498deb09fb0979",
    "expiration": "2024-05-30T14:36:24.826Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 48,
  "fields": {
    "challenge": "DJZM",
    "response": "djzm",
    "hashkey": "62cd6e263f745bf018cdc2f7264805904441fddd",
    "expiration": "2024-05-30T14:54:33.524Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 49,
  "fields": {
    "challenge": "GMTU",
    "response": "gmtu",
    "hashkey": "d77ec36d19d82a8c248cad1b23c434a41eca9552",
    "expiration": "2024-05-30T14:54:51.978Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 50,
  "fields": {
    "challenge": "COCD",
    "response": "cocd",
    "hashkey": "f2fc295a7307c099afc71f5401d3ceea456031aa",
    "expiration": "2024-05-30T14:55:09.159Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 51,
  "fields": {
    "challenge": "TSCV",
    "response": "tscv",
    "hashkey": "b8aa45afaf6a1e1ad1eb33b4013ef988f5310bc5",
    "expiration": "2024-05-30T14:56:08.578Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 52,
  "fields": {
    "challenge": "WCKH",
    "response": "wckh",
    "hashkey": "bd78c4b34efb815b911e42ba2d0ca58a83aca8eb",
    "expiration": "2024-05-30T15:09:00.867Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 53,
  "fields": {
    "challenge": "IGPM",
    "response": "igpm",
    "hashkey": "d7dc8d0da808145cd0f0bbb14a9f00d5d890b880",
    "expiration": "2024-05-30T15:09:11.407Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 54,
  "fields": {
    "challenge": "SOTY",
    "response": "soty",
    "hashkey": "3809870346452969d49ec5da686c126bb35a9780",
    "expiration": "2024-05-30T15:14:42.761Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 55,
  "fields": {
    "challenge": "HMNB",
    "response": "hmnb",
    "hashkey": "8ab62789a4ab327f7615e1235a930634a3aaef3f",
    "expiration": "2024-05-30T15:15:23.320Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 56,
  "fields": {
    "challenge": "XJQF",
    "response": "xjqf",
    "hashkey": "6a1fefa94192fcd8ab31277818298b459713fd08",
    "expiration": "2024-05-30T15:18:50.477Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 57,
  "fields": {
    "challenge": "IONG",
    "response": "iong",
    "hashkey": "dcbdda8260d0bd9252dbdc5e5cd1bd0504d930c8",
    "expiration": "2024-05-30T15:44:17.696Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 58,
  "fields": {
    "challenge": "GDRD",
    "response": "gdrd",
    "hashkey": "3afdfeb8178ced3f35a5d3c82fc911b1be037c2a",
    "expiration": "2024-05-30T15:56:10.823Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 59,
  "fields": {
    "challenge": "WOJL",
    "response": "wojl",
    "hashkey": "e29a1e65fac5dbd7b66612410f6d4bce684b7e0f",
    "expiration": "2024-05-30T15:56:15.124Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 60,
  "fields": {
    "challenge": "AFMP",
    "response": "afmp",
    "hashkey": "f82858fd3c8587eeade4c694d12d285df45d2d59",
    "expiration": "2024-05-30T16:39:01.628Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 61,
  "fields": {
    "challenge": "ZNAJ",
    "response": "znaj",
    "hashkey": "b56913b97cca9f31040790beb61a28db50865932",
    "expiration": "2024-05-30T16:39:26.723Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 62,
  "fields": {
    "challenge": "EPZZ",
    "response": "epzz",
    "hashkey": "02d2228bfed5eabddc4ffdad11663515c842620a",
    "expiration": "2024-05-31T10:46:44.386Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 63,
  "fields": {
    "challenge": "XJJK",
    "response": "xjjk",
    "hashkey": "e32274bb79a6e1850a600304835b14711fb3f52c",
    "expiration": "2024-05-31T10:46:49.762Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 64,
  "fields": {
    "challenge": "AJSE",
    "response": "ajse",
    "hashkey": "4531b8dc8fe65f49724870960aa66f288d48075d",
    "expiration": "2024-05-31T10:46:55.508Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 65,
  "fields": {
    "challenge": "CTSA",
    "response": "ctsa",
    "hashkey": "a9570a4c2c0bc6ad94a63e4221e728fa5653c18b",
    "expiration": "2024-05-31T10:49:53.023Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 66,
  "fields": {
    "challenge": "WGZK",
    "response": "wgzk",
    "hashkey": "12bd5c48083a4b20278e02cedb427c3bd6db0956",
    "expiration": "2024-05-31T10:55:34.673Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 67,
  "fields": {
    "challenge": "ETBP",
    "response": "etbp",
    "hashkey": "32a95b449984c3636b2e015b30453be57f949d34",
    "expiration": "2024-05-31T10:58:48.334Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 68,
  "fields": {
    "challenge": "IPTD",
    "response": "iptd",
    "hashkey": "7ec95cb9f4a1db7837142dd2ffa3878a19539d2c",
    "expiration": "2024-05-31T10:58:56.055Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 69,
  "fields": {
    "challenge": "GUVJ",
    "response": "guvj",
    "hashkey": "b34622a2b0d2495984df61eb57fcfd0b54d40b3f",
    "expiration": "2024-05-31T10:58:57.726Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 70,
  "fields": {
    "challenge": "BBNA",
    "response": "bbna",
    "hashkey": "942926867f0c12c8327c3246b0f0d35913a93af6",
    "expiration": "2024-05-31T10:59:00.653Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 71,
  "fields": {
    "challenge": "CRMR",
    "response": "crmr",
    "hashkey": "d80f0de4c90bfe1403684e33d4d4fa57dc04bbc1",
    "expiration": "2024-05-31T11:03:59.462Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 72,
  "fields": {
    "challenge": "GUYY",
    "response": "guyy",
    "hashkey": "bc5543403c37ade0b4fef771f8da7a6b4ec61427",
    "expiration": "2024-05-31T11:04:02.927Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 73,
  "fields": {
    "challenge": "PESB",
    "response": "pesb",
    "hashkey": "d47baa67024cff1432d1e4ef456d21803a0a780a",
    "expiration": "2024-05-31T11:04:06.753Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 74,
  "fields": {
    "challenge": "YVHS",
    "response": "yvhs",
    "hashkey": "ab980f8d05b413691a0a6a91882bbfa0f5c48a3c",
    "expiration": "2024-05-31T11:04:17.938Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 75,
  "fields": {
    "challenge": "MIQU",
    "response": "miqu",
    "hashkey": "d29587dc1d20a94ac7b957bd364d8f96c31ded5a",
    "expiration": "2024-05-31T11:13:07.761Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 76,
  "fields": {
    "challenge": "JFJY",
    "response": "jfjy",
    "hashkey": "773dde9ff2d972f2617ad3103088ac777160f422",
    "expiration": "2024-05-31T11:13:10.440Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 77,
  "fields": {
    "challenge": "MMFE",
    "response": "mmfe",
    "hashkey": "9422f3a44bca817196cf4578a48e39d2f46caac1",
    "expiration": "2024-05-31T11:13:16.688Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 78,
  "fields": {
    "challenge": "JCSS",
    "response": "jcss",
    "hashkey": "0b5a9b676de91eee4111a27f3b10c21a8a2db910",
    "expiration": "2024-05-31T11:13:19.413Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 79,
  "fields": {
    "challenge": "BUDQ",
    "response": "budq",
    "hashkey": "6263133eaaa2a30c91db6abf68a63302bd8cf54d",
    "expiration": "2024-05-31T11:22:29.025Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 80,
  "fields": {
    "challenge": "LYSF",
    "response": "lysf",
    "hashkey": "d558d6d567012d07255ee1b3ac0e6f0531c09d4e",
    "expiration": "2024-05-31T11:22:31.639Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 81,
  "fields": {
    "challenge": "PRLN",
    "response": "prln",
    "hashkey": "05c43c7f7b7dc34f6f5cc6cb090cc681347476a7",
    "expiration": "2024-05-31T11:22:36.756Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 82,
  "fields": {
    "challenge": "ESWY",
    "response": "eswy",
    "hashkey": "648f83fbb75c86b752afdc2d2b3a4f6d20f999f8",
    "expiration": "2024-05-31T11:27:40.783Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 83,
  "fields": {
    "challenge": "BRFZ",
    "response": "brfz",
    "hashkey": "a7738b5cd429336317d6795a0ceb6a58b2811579",
    "expiration": "2024-05-31T11:29:22.946Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 84,
  "fields": {
    "challenge": "RWEC",
    "response": "rwec",
    "hashkey": "ffe0c5c6ef1d4f1cccebfbb76d3e6340da678c11",
    "expiration": "2024-05-31T11:29:24.901Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 85,
  "fields": {
    "challenge": "SPSV",
    "response": "spsv",
    "hashkey": "8cf33ab79b3b5a5292d3938747804603560fb6ad",
    "expiration": "2024-05-31T11:30:27.263Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 86,
  "fields": {
    "challenge": "MUPT",
    "response": "mupt",
    "hashkey": "c97ec1f3c346d7d0d490cdd5b4ebf0a84c9264ff",
    "expiration": "2024-05-31T11:38:21.422Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 87,
  "fields": {
    "challenge": "XNNR",
    "response": "xnnr",
    "hashkey": "9eb33d2debd46450356f8d7597c4239ea843ef97",
    "expiration": "2024-05-31T11:38:33.334Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 88,
  "fields": {
    "challenge": "ZNYQ",
    "response": "znyq",
    "hashkey": "2430487a8b30224c4c8cc8707578e0eab10609b9",
    "expiration": "2024-05-31T11:41:06.589Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 89,
  "fields": {
    "challenge": "IGUZ",
    "response": "iguz",
    "hashkey": "8d7b4da639a1c77eaaed1260684a0d2b051c5702",
    "expiration": "2024-05-31T11:41:42.696Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 90,
  "fields": {
    "challenge": "WBXA",
    "response": "wbxa",
    "hashkey": "09a1ea9c96e746651188a8304ab2329a3a18328c",
    "expiration": "2024-06-03T13:15:03.829Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 91,
  "fields": {
    "challenge": "NQTW",
    "response": "nqtw",
    "hashkey": "2cb947b2c2f34b58a758e13fa7b3b198f5abb865",
    "expiration": "2024-06-03T14:58:14.218Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 92,
  "fields": {
    "challenge": "KFGB",
    "response": "kfgb",
    "hashkey": "99dd28d8b80a40c5796d666c4dd9bc585f54b7f6",
    "expiration": "2024-06-03T14:58:38.539Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 93,
  "fields": {
    "challenge": "IMLG",
    "response": "imlg",
    "hashkey": "620a9ab10be3ea62726097526e4993a19b8a5569",
    "expiration": "2024-06-03T14:59:41.534Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 94,
  "fields": {
    "challenge": "UBZY",
    "response": "ubzy",
    "hashkey": "92208d785a460778a406cb84b31fc99b008260a1",
    "expiration": "2024-06-03T17:03:50.262Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 95,
  "fields": {
    "challenge": "UOJF",
    "response": "uojf",
    "hashkey": "b13a5a4a5be341e9ac648d71ae2e3068fc6135d3",
    "expiration": "2024-06-05T08:01:51.285Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 96,
  "fields": {
    "challenge": "XEZT",
    "response": "xezt",
    "hashkey": "725592e5cacdb0b23abcae680ff555a4d8116595",
    "expiration": "2024-06-05T08:01:56.957Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 97,
  "fields": {
    "challenge": "MVAR",
    "response": "mvar",
    "hashkey": "eb37ffea3c97e536885c2c84b07476fec269d1eb",
    "expiration": "2024-06-05T08:02:05.332Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 98,
  "fields": {
    "challenge": "TRDH",
    "response": "trdh",
    "hashkey": "8033f9a3373ae854a7faf02af570ba7ec58a0eee",
    "expiration": "2024-06-05T08:33:29.329Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 99,
  "fields": {
    "challenge": "UXVG",
    "response": "uxvg",
    "hashkey": "adf5a54214fac99f4068e0f39952d18afcb9b96c",
    "expiration": "2024-06-05T09:14:14.526Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 100,
  "fields": {
    "challenge": "ZPPF",
    "response": "zppf",
    "hashkey": "318820654822ab8a0d98c69dc9a033c1083daf8e",
    "expiration": "2024-06-05T11:01:08.746Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 101,
  "fields": {
    "challenge": "CGLZ",
    "response": "cglz",
    "hashkey": "f745718f36646061af60c31e57c44106961531ab",
    "expiration": "2024-06-05T11:01:12.805Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 102,
  "fields": {
    "challenge": "FHBQ",
    "response": "fhbq",
    "hashkey": "acbde41a9472fc1e9c5b506a95b7f730583605aa",
    "expiration": "2024-06-05T11:01:15.768Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 103,
  "fields": {
    "challenge": "UJLB",
    "response": "ujlb",
    "hashkey": "a9a222695df738cf44f51fb7467fbebb42c38fd3",
    "expiration": "2024-06-10T18:03:54.550Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 104,
  "fields": {
    "challenge": "RJCA",
    "response": "rjca",
    "hashkey": "44cee26ff333eba470e0163e582f3ceb6967f3ac",
    "expiration": "2024-06-10T18:04:18.309Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 105,
  "fields": {
    "challenge": "GHOT",
    "response": "ghot",
    "hashkey": "36834c5f8595104daed76100afe813b0f0c28c38",
    "expiration": "2024-06-10T18:06:22.447Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 106,
  "fields": {
    "challenge": "GISV",
    "response": "gisv",
    "hashkey": "cdf35fc5ff64f58ef0713b8167047560e88f2464",
    "expiration": "2024-06-10T18:06:31.028Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 107,
  "fields": {
    "challenge": "EVOJ",
    "response": "evoj",
    "hashkey": "76dd9513f5b12a1264151a347a196ab3ba04b111",
    "expiration": "2024-06-10T18:06:36.918Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 108,
  "fields": {
    "challenge": "WXMC",
    "response": "wxmc",
    "hashkey": "da84521e693f36eaec50bafbd27ca1df9e97beeb",
    "expiration": "2024-06-10T18:06:39.117Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 109,
  "fields": {
    "challenge": "WISL",
    "response": "wisl",
    "hashkey": "66c153d6f0db010e9e19565889f33f59499a4705",
    "expiration": "2024-06-10T18:12:00.043Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 110,
  "fields": {
    "challenge": "QLRH",
    "response": "qlrh",
    "hashkey": "eb91a6d3e66da94bd313c529bc5c978b34bd5ab2",
    "expiration": "2024-06-10T18:12:15.070Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 111,
  "fields": {
    "challenge": "CZRL",
    "response": "czrl",
    "hashkey": "0999bd3df16c8af87036e97936bca31006199524",
    "expiration": "2024-06-10T18:19:12.653Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 112,
  "fields": {
    "challenge": "YIUC",
    "response": "yiuc",
    "hashkey": "3c056d71d0bc161db1a20f9e7adbb90952b79c45",
    "expiration": "2024-06-10T18:24:22.594Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 113,
  "fields": {
    "challenge": "NISJ",
    "response": "nisj",
    "hashkey": "5f0f8d3d5d1916d94fd404469c8ace32a5ca1887",
    "expiration": "2024-06-10T18:34:20.078Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 114,
  "fields": {
    "challenge": "DRMQ",
    "response": "drmq",
    "hashkey": "195d4f6688eac908ab03028b01046116a4de372f",
    "expiration": "2024-06-10T18:34:28.763Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 115,
  "fields": {
    "challenge": "BYKD",
    "response": "bykd",
    "hashkey": "347accc0f8f9fe010dc5cf5394289ce4b84df0fc",
    "expiration": "2024-06-10T18:45:01.651Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 116,
  "fields": {
    "challenge": "KVME",
    "response": "kvme",
    "hashkey": "21d9f1b52e577214f1d9b94ca8461d0a076ac2fa",
    "expiration": "2024-06-10T18:45:05.471Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 117,
  "fields": {
    "challenge": "LFVW",
    "response": "lfvw",
    "hashkey": "18aa1de3eecb31ec7282feaf62d10f9ccc9a8d83",
    "expiration": "2024-06-10T18:54:24.570Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 118,
  "fields": {
    "challenge": "HTPQ",
    "response": "htpq",
    "hashkey": "29a9539f5cb15bfe30b769bb8d4fa9a339a4c4b2",
    "expiration": "2024-06-10T18:54:28.329Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 119,
  "fields": {
    "challenge": "XPDE",
    "response": "xpde",
    "hashkey": "587a1de09248d51d0667f68f0235a59cc7e05cab",
    "expiration": "2024-06-10T18:54:32.557Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 120,
  "fields": {
    "challenge": "VNKK",
    "response": "vnkk",
    "hashkey": "11bb5976851c072ff9963d4096c087ae24bad4ca",
    "expiration": "2024-06-10T19:01:45.554Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 121,
  "fields": {
    "challenge": "FOCF",
    "response": "focf",
    "hashkey": "1858f256de4bb86e9b82c535f3109f496c242675",
    "expiration": "2024-06-10T19:01:49.678Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 122,
  "fields": {
    "challenge": "SODV",
    "response": "sodv",
    "hashkey": "c93497cad73570d8afdea9ec3bfc523e65fe25f9",
    "expiration": "2024-06-10T19:02:16.999Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 123,
  "fields": {
    "challenge": "WIDL",
    "response": "widl",
    "hashkey": "75a09e7a69cc90840e3cae24a957ff4a561a8dea",
    "expiration": "2024-06-10T19:02:20.998Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 124,
  "fields": {
    "challenge": "FWTY",
    "response": "fwty",
    "hashkey": "9a7dce6c05cb3d774e4f20c448d95270f503d0ae",
    "expiration": "2024-06-10T19:21:12.540Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 125,
  "fields": {
    "challenge": "NMHK",
    "response": "nmhk",
    "hashkey": "fdb5d2a7c7a3ad2cfaf0a6cecf6a237d5fac7631",
    "expiration": "2024-06-10T19:21:14.653Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 126,
  "fields": {
    "challenge": "NNAC",
    "response": "nnac",
    "hashkey": "b8791911d4a8f605d9febbfd92e45f4c985ecce4",
    "expiration": "2024-06-10T19:23:04.479Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 127,
  "fields": {
    "challenge": "COGA",
    "response": "coga",
    "hashkey": "12c4dc6f5f42517640a9de0a4808e55a44104e17",
    "expiration": "2024-06-10T19:46:36.940Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 128,
  "fields": {
    "challenge": "ENJZ",
    "response": "enjz",
    "hashkey": "8473fbadb9563bb583a4c8912d1e8b5d6690b349",
    "expiration": "2024-06-10T19:47:24.770Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 129,
  "fields": {
    "challenge": "CMEM",
    "response": "cmem",
    "hashkey": "4361515fa7c81f1c4f0cf503602c852730e52fc1",
    "expiration": "2024-06-12T18:31:14.260Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 130,
  "fields": {
    "challenge": "KHGH",
    "response": "khgh",
    "hashkey": "f52502727daa13de06654d275d26eb4ea2ece09d",
    "expiration": "2024-06-12T19:21:15.116Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 131,
  "fields": {
    "challenge": "TIWK",
    "response": "tiwk",
    "hashkey": "560a2cc55c42320d75d775e5ddca199ec879f61c",
    "expiration": "2024-06-12T19:21:25.382Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 132,
  "fields": {
    "challenge": "SKZX",
    "response": "skzx",
    "hashkey": "61bd1bbacdf6af26cdaf15daae5f6ebbffce3d2a",
    "expiration": "2024-06-14T15:22:34.018Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 133,
  "fields": {
    "challenge": "AACY",
    "response": "aacy",
    "hashkey": "8c0e07c0e2362fd16f115fe57d98d3d02ef8dec0",
    "expiration": "2024-06-14T15:22:38.216Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 134,
  "fields": {
    "challenge": "CBPG",
    "response": "cbpg",
    "hashkey": "0b66e0221a80086531ac506c500bc5e663d1b216",
    "expiration": "2024-06-14T15:43:16.094Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 135,
  "fields": {
    "challenge": "UBKW",
    "response": "ubkw",
    "hashkey": "ccbfaa766d8cb8aab4e0c7c582ca8aff015d2857",
    "expiration": "2024-06-14T15:43:18.826Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 136,
  "fields": {
    "challenge": "MMYG",
    "response": "mmyg",
    "hashkey": "390155d24a2f8a2b671130e52aa24a9df509f8a0",
    "expiration": "2024-06-14T15:44:15.931Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 137,
  "fields": {
    "challenge": "ARON",
    "response": "aron",
    "hashkey": "1a0f4776bccf5056c97431beff1489b7760b4750",
    "expiration": "2024-06-14T15:46:11.216Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 138,
  "fields": {
    "challenge": "FTQF",
    "response": "ftqf",
    "hashkey": "49a5f713afae90515b37a3b3be5c6107afa7f874",
    "expiration": "2024-06-14T15:46:13.062Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 139,
  "fields": {
    "challenge": "TTJQ",
    "response": "ttjq",
    "hashkey": "f05d94ea8c33665ee533ad88509e3ec82d3a5c60",
    "expiration": "2024-06-14T15:49:17.439Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 140,
  "fields": {
    "challenge": "TFZU",
    "response": "tfzu",
    "hashkey": "7ee5b5321f35a31b600fa4becc74089e079d9890",
    "expiration": "2024-06-14T15:52:56.622Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 141,
  "fields": {
    "challenge": "PHNZ",
    "response": "phnz",
    "hashkey": "c59108a9fb819ad39cd4707c4e136ca8f49fdf87",
    "expiration": "2024-06-14T16:57:52.395Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 142,
  "fields": {
    "challenge": "JTTR",
    "response": "jttr",
    "hashkey": "2fbec9cccaf45df47a167ebe77a7ee7ceb09fb63",
    "expiration": "2024-06-14T16:57:56.222Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 143,
  "fields": {
    "challenge": "EISB",
    "response": "eisb",
    "hashkey": "72385058eaf245de60d2492b931c69e17f36558c",
    "expiration": "2024-06-18T13:11:23.003Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 144,
  "fields": {
    "challenge": "EOSD",
    "response": "eosd",
    "hashkey": "4ceac62d33325fa8a51a44ab6f4a55fa9c3d2b40",
    "expiration": "2024-06-18T13:38:48.381Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 145,
  "fields": {
    "challenge": "NCHK",
    "response": "nchk",
    "hashkey": "a68ab48d67cabdfe66dccdc6e377bea1083ca838",
    "expiration": "2024-06-18T13:41:23.203Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 146,
  "fields": {
    "challenge": "FGNO",
    "response": "fgno",
    "hashkey": "cbdaa2af1bebc19fcb4c72d991267c37a1399e43",
    "expiration": "2024-06-18T13:41:59.758Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 147,
  "fields": {
    "challenge": "OBYC",
    "response": "obyc",
    "hashkey": "6c0521de6a6b59d68756ea25f3cc0aeaf7f66561",
    "expiration": "2024-06-18T14:04:46.873Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 148,
  "fields": {
    "challenge": "QMYQ",
    "response": "qmyq",
    "hashkey": "8d67e06b10e2f6b75f86bc43143272028bffef85",
    "expiration": "2024-06-18T14:04:55.199Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 149,
  "fields": {
    "challenge": "CUNT",
    "response": "cunt",
    "hashkey": "418a0af0dfb58c3cb7a292723fc9b535e23e117c",
    "expiration": "2024-06-18T14:05:08.436Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 150,
  "fields": {
    "challenge": "JWWD",
    "response": "jwwd",
    "hashkey": "5a93625b828f169901a0ad341ce78808b4bd1356",
    "expiration": "2024-06-18T14:14:05.152Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 151,
  "fields": {
    "challenge": "EUTT",
    "response": "eutt",
    "hashkey": "a2d6298738f590e0bbeedda9eaff8084feca645d",
    "expiration": "2024-06-18T14:41:08.871Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 152,
  "fields": {
    "challenge": "KVQW",
    "response": "kvqw",
    "hashkey": "ba75f14684f884fa31cd6a9690d47c89f8d2ede4",
    "expiration": "2024-06-18T14:41:18.465Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 153,
  "fields": {
    "challenge": "DWIX",
    "response": "dwix",
    "hashkey": "c9a4c6e083900dbf0530400f977262e847d8aa82",
    "expiration": "2024-06-18T14:47:48.228Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 154,
  "fields": {
    "challenge": "FCQK",
    "response": "fcqk",
    "hashkey": "70eab33fc86ad10aeb05b97162f05333f51300ea",
    "expiration": "2024-06-18T14:50:47.554Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 155,
  "fields": {
    "challenge": "LNFJ",
    "response": "lnfj",
    "hashkey": "01f964ca00768c6e602361a9aec486645874ec76",
    "expiration": "2024-06-18T15:03:16.272Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 156,
  "fields": {
    "challenge": "OEGR",
    "response": "oegr",
    "hashkey": "50afa5d7c744d4944aebf20935a96b1162ac4772",
    "expiration": "2024-06-18T15:03:20.434Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 157,
  "fields": {
    "challenge": "GFWB",
    "response": "gfwb",
    "hashkey": "61ae9672052b135c0197da31518896cf96c60f10",
    "expiration": "2024-06-19T13:59:08.473Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 158,
  "fields": {
    "challenge": "LRCO",
    "response": "lrco",
    "hashkey": "1cced60a77eb678f7a6bdd81bbe93eb4a44008e1",
    "expiration": "2024-06-19T14:01:01.169Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 159,
  "fields": {
    "challenge": "ETPF",
    "response": "etpf",
    "hashkey": "d8a03f332f318173ba410e1cf36923fe09384ee7",
    "expiration": "2024-06-19T14:38:12.295Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 160,
  "fields": {
    "challenge": "FADG",
    "response": "fadg",
    "hashkey": "080c9ff40b5161e2e6071926714415085cc33883",
    "expiration": "2024-06-19T14:39:39.974Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 161,
  "fields": {
    "challenge": "NIPX",
    "response": "nipx",
    "hashkey": "db3d55ab0d0deddff5786b5186c96d74a17915b1",
    "expiration": "2024-06-19T15:11:15.838Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 162,
  "fields": {
    "challenge": "LVAD",
    "response": "lvad",
    "hashkey": "21c7bf3a117cf96c9b3e84c4b5a05bbf4d50d367",
    "expiration": "2024-06-19T15:11:18.185Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 163,
  "fields": {
    "challenge": "MGYO",
    "response": "mgyo",
    "hashkey": "dece1d8f10f0a6f7ad71bc7d3a8fe6e26e33beda",
    "expiration": "2024-06-19T15:23:43.647Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 164,
  "fields": {
    "challenge": "QNTB",
    "response": "qntb",
    "hashkey": "3ab6d320f63b5a3b8905dbad536199cb7626b151",
    "expiration": "2024-06-19T15:23:52.301Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 165,
  "fields": {
    "challenge": "NOOQ",
    "response": "nooq",
    "hashkey": "58a12cb848db82b05011a4e683b1fa8946ce34de",
    "expiration": "2024-06-21T15:27:55.181Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 166,
  "fields": {
    "challenge": "GCHW",
    "response": "gchw",
    "hashkey": "04476ec48e69ecfe4efc2daa2098d22fa6ebd8a9",
    "expiration": "2024-06-21T15:49:43.671Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 167,
  "fields": {
    "challenge": "JMQZ",
    "response": "jmqz",
    "hashkey": "4654f26ab97eadf25d0ab9c8bd9969fd66394187",
    "expiration": "2024-06-21T15:49:49.209Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 168,
  "fields": {
    "challenge": "KRGQ",
    "response": "krgq",
    "hashkey": "d6aaac5dc498771a0e9e400457aa803824c27920",
    "expiration": "2024-06-21T15:49:53.005Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 169,
  "fields": {
    "challenge": "RAQM",
    "response": "raqm",
    "hashkey": "b5db4746c3c47c7c9fc4d99182e3b3596953e23c",
    "expiration": "2024-06-21T15:49:58.314Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 170,
  "fields": {
    "challenge": "NNTQ",
    "response": "nntq",
    "hashkey": "46bb1a30c4e7c97e9ed5470713e41946dcf61068",
    "expiration": "2024-06-21T15:51:00.081Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 171,
  "fields": {
    "challenge": "OOYR",
    "response": "ooyr",
    "hashkey": "fcf4750599d696f90e3467c9f9cd3f2601081a79",
    "expiration": "2024-06-21T15:51:05.481Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 172,
  "fields": {
    "challenge": "UYKJ",
    "response": "uykj",
    "hashkey": "8d8c69020f028de5631871273f1a53763aaee2a9",
    "expiration": "2024-06-21T15:57:33.427Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 173,
  "fields": {
    "challenge": "TBPE",
    "response": "tbpe",
    "hashkey": "67c9bd9686a8cda5ee7cd3265fb9d96fd86e71d0",
    "expiration": "2024-06-21T18:24:08.141Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 174,
  "fields": {
    "challenge": "OBZG",
    "response": "obzg",
    "hashkey": "930a04ddbe8b4fad670c2e9083b9c2769ad13edc",
    "expiration": "2024-06-21T18:24:10.675Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 175,
  "fields": {
    "challenge": "LNTX",
    "response": "lntx",
    "hashkey": "7b988bf17f9d39fd39e9a1cb6cf9fef4d259dde7",
    "expiration": "2024-06-21T18:47:20.213Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 176,
  "fields": {
    "challenge": "RLKC",
    "response": "rlkc",
    "hashkey": "cb3b758fbae001aee639bcf54cb52ef188cf544b",
    "expiration": "2024-06-21T18:47:30.720Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 177,
  "fields": {
    "challenge": "ICOZ",
    "response": "icoz",
    "hashkey": "c1d1e7579132c92837d3821f7baa5c456ecbf63c",
    "expiration": "2024-06-24T18:12:20.269Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 178,
  "fields": {
    "challenge": "PEPH",
    "response": "peph",
    "hashkey": "5f86b458818bd46cc7da26d327ffd9f6381bd89c",
    "expiration": "2024-06-24T18:16:45.870Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 179,
  "fields": {
    "challenge": "XASU",
    "response": "xasu",
    "hashkey": "447db20063ba10c1fa059077cbc244435179711c",
    "expiration": "2024-06-24T18:19:06.082Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 180,
  "fields": {
    "challenge": "VUDY",
    "response": "vudy",
    "hashkey": "9b267c629b9cf629117d6f3fc6083f496c647aaf",
    "expiration": "2024-06-24T18:19:08.421Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 181,
  "fields": {
    "challenge": "FTIH",
    "response": "ftih",
    "hashkey": "8b3adaf09d15d8dea60c05cd73ab6f11503c0874",
    "expiration": "2024-06-24T18:19:35.075Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 182,
  "fields": {
    "challenge": "HKZE",
    "response": "hkze",
    "hashkey": "026baccf3f7093c47bbb0a321a338f8c829fd18a",
    "expiration": "2024-06-24T18:20:58.376Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 183,
  "fields": {
    "challenge": "BDLQ",
    "response": "bdlq",
    "hashkey": "457e81d8c25cf74ae202f3d0342cbcf3148bc50d",
    "expiration": "2024-06-24T18:21:01.450Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 184,
  "fields": {
    "challenge": "LYBL",
    "response": "lybl",
    "hashkey": "b5cfa2d4d9c06f7e0a3cb1d6dd7066cc82461979",
    "expiration": "2024-06-24T18:37:26.863Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 185,
  "fields": {
    "challenge": "UXLK",
    "response": "uxlk",
    "hashkey": "9e03468a7f02a933d261f0eef4dc7dc481292b40",
    "expiration": "2024-06-24T18:37:32.196Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 186,
  "fields": {
    "challenge": "YZTE",
    "response": "yzte",
    "hashkey": "3975430e12c43d106401c1cf75dda77e5e268dff",
    "expiration": "2024-06-27T18:51:56.745Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 187,
  "fields": {
    "challenge": "GOKU",
    "response": "goku",
    "hashkey": "7c8ae307326bac2d6d9ea13bb4bac05052efcf8f",
    "expiration": "2024-06-27T21:16:02.157Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 188,
  "fields": {
    "challenge": "JUFD",
    "response": "jufd",
    "hashkey": "b9122669d377c2f30ad698f943e5dfe468dd0e12",
    "expiration": "2024-06-27T21:16:04.277Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 189,
  "fields": {
    "challenge": "BDHJ",
    "response": "bdhj",
    "hashkey": "1baaaf61638437d333ecd55adf0c684f3d8c1d25",
    "expiration": "2024-06-28T16:53:57.941Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 190,
  "fields": {
    "challenge": "BPWN",
    "response": "bpwn",
    "hashkey": "b25283a5789aafe3adfd1a27d06799ee7458e4d3",
    "expiration": "2024-06-28T16:54:14.951Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 191,
  "fields": {
    "challenge": "RRCM",
    "response": "rrcm",
    "hashkey": "3deede98b04fb6f5beb80767e2402f24bd30186e",
    "expiration": "2024-07-09T15:09:48.105Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 192,
  "fields": {
    "challenge": "QNDY",
    "response": "qndy",
    "hashkey": "7af65a4cc13dd9e463f8c120a23e338c61125340",
    "expiration": "2024-07-09T15:09:52.636Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 193,
  "fields": {
    "challenge": "TSEU",
    "response": "tseu",
    "hashkey": "3c5a956af8680ae0e56e2bb3c7bab92ea28fe10f",
    "expiration": "2024-07-09T15:33:54.036Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 194,
  "fields": {
    "challenge": "KTMD",
    "response": "ktmd",
    "hashkey": "73c33429690393cc8c1c6c85ec23bbd1fa0cd49c",
    "expiration": "2024-07-09T15:47:44.235Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 195,
  "fields": {
    "challenge": "EEGQ",
    "response": "eegq",
    "hashkey": "8672c59bcdb8cc773ba441086a347af3b6983a12",
    "expiration": "2024-07-09T15:47:49.527Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 196,
  "fields": {
    "challenge": "ZVBH",
    "response": "zvbh",
    "hashkey": "814d017dabb543d7554daaae081e57d6943f23c9",
    "expiration": "2024-07-09T15:52:23.322Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 197,
  "fields": {
    "challenge": "HUVC",
    "response": "huvc",
    "hashkey": "3260583434106b964b8bf9cfe904af945f793dd5",
    "expiration": "2024-07-09T15:52:39.603Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 198,
  "fields": {
    "challenge": "ZFUS",
    "response": "zfus",
    "hashkey": "55c14c98b11818e6d0c221cbdad45bb2f4070ad3",
    "expiration": "2024-07-09T15:56:30.737Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 199,
  "fields": {
    "challenge": "EGWC",
    "response": "egwc",
    "hashkey": "91aa2cc61e81d8c696e338e5cb6980b1b8447264",
    "expiration": "2024-07-09T16:10:47.796Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 200,
  "fields": {
    "challenge": "DQYF",
    "response": "dqyf",
    "hashkey": "55ce3560ecc7b5c269d1de1a0e5b00dde294d6d2",
    "expiration": "2024-07-09T16:13:57.764Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 201,
  "fields": {
    "challenge": "SVCG",
    "response": "svcg",
    "hashkey": "b715c9e29d38b67fd3470b9d1acc5a677784d9d3",
    "expiration": "2024-07-09T16:14:23.850Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 202,
  "fields": {
    "challenge": "HQGK",
    "response": "hqgk",
    "hashkey": "e64d4861740174472d9c107f3a56541fdcd931e3",
    "expiration": "2024-07-09T16:14:41.760Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 203,
  "fields": {
    "challenge": "ICTA",
    "response": "icta",
    "hashkey": "6a4ce4a8d8bca2ef318bb9954efae8c1ac305b45",
    "expiration": "2024-07-09T16:14:52.568Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 204,
  "fields": {
    "challenge": "TCTI",
    "response": "tcti",
    "hashkey": "928a0eb221396f5d52f52c0d9d7812766f154fdc",
    "expiration": "2024-07-09T16:14:58.706Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 205,
  "fields": {
    "challenge": "RLSM",
    "response": "rlsm",
    "hashkey": "ab4ca4ed75d51053bda9a4756143f0cb41ce5453",
    "expiration": "2024-07-09T16:34:06.713Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 206,
  "fields": {
    "challenge": "DZOI",
    "response": "dzoi",
    "hashkey": "0f1e8d0baff15536b12ffab0bfdcc8de63534b33",
    "expiration": "2024-07-09T16:34:33.784Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 207,
  "fields": {
    "challenge": "YKPA",
    "response": "ykpa",
    "hashkey": "bd59c48b162380e1da63a3b43a8638529aa28fa2",
    "expiration": "2024-07-12T19:35:31.196Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 208,
  "fields": {
    "challenge": "EHDM",
    "response": "ehdm",
    "hashkey": "2aeecb181a496dbdd9e7d5143e680a8575360849",
    "expiration": "2024-07-12T19:36:49.117Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 209,
  "fields": {
    "challenge": "TQER",
    "response": "tqer",
    "hashkey": "cf65a8986c2245256b7a4b5b3ace1cfdc47d5f13",
    "expiration": "2024-07-12T19:36:52.507Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 210,
  "fields": {
    "challenge": "PKLZ",
    "response": "pklz",
    "hashkey": "a950d533fd711f744668c5c2e0bdb00c22c432f8",
    "expiration": "2024-07-12T19:36:57.979Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 211,
  "fields": {
    "challenge": "VNZS",
    "response": "vnzs",
    "hashkey": "7437b24fa3600e2fc90973362da7619c34e82cba",
    "expiration": "2024-07-12T19:37:05.125Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 212,
  "fields": {
    "challenge": "TBQG",
    "response": "tbqg",
    "hashkey": "a85f358d4f0cc3e4018033336d899809d7e8602a",
    "expiration": "2024-07-12T19:37:12.097Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 213,
  "fields": {
    "challenge": "LLXW",
    "response": "llxw",
    "hashkey": "4baad6caf9ce53dbb5d7b0c4d9acc6ba108b3495",
    "expiration": "2024-07-12T20:09:46.911Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 214,
  "fields": {
    "challenge": "CLYN",
    "response": "clyn",
    "hashkey": "fdd22792ce2b07e491fe54a6e0bcacbc07b35053",
    "expiration": "2024-07-12T20:09:51.049Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 215,
  "fields": {
    "challenge": "XLAX",
    "response": "xlax",
    "hashkey": "a78baaaa3ddcb927c11b09297ffb88296c2ffbec",
    "expiration": "2024-07-16T18:23:58.150Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 216,
  "fields": {
    "challenge": "BGYD",
    "response": "bgyd",
    "hashkey": "336e9f9f6accd519391d954291b5c36d63be2c53",
    "expiration": "2024-07-16T18:24:00.987Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 217,
  "fields": {
    "challenge": "ZUCF",
    "response": "zucf",
    "hashkey": "bd751257a2af954edbe2a482cb2e5da4520f7b97",
    "expiration": "2024-07-16T18:24:09.677Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 218,
  "fields": {
    "challenge": "KGLS",
    "response": "kgls",
    "hashkey": "90850adc8d75665c3729b2b0fc1aa635c8e1317d",
    "expiration": "2024-07-16T18:24:15.632Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 219,
  "fields": {
    "challenge": "RWCQ",
    "response": "rwcq",
    "hashkey": "1a2c8f95074c1eca04de8ae2a6f9161ae5b5f1a7",
    "expiration": "2024-07-16T18:24:28.104Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 220,
  "fields": {
    "challenge": "XBLW",
    "response": "xblw",
    "hashkey": "2fb3188173c359e78f20f63ad8cdf1f620a3cd7f",
    "expiration": "2024-07-16T19:38:18.555Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 221,
  "fields": {
    "challenge": "LFHL",
    "response": "lfhl",
    "hashkey": "e6a8faa8b8ae5af47e4d18daa4adb45964bb00a8",
    "expiration": "2024-07-16T19:38:28.672Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 222,
  "fields": {
    "challenge": "LDBD",
    "response": "ldbd",
    "hashkey": "91a64030e215f836c58d7ca49039c2757e3a46e8",
    "expiration": "2024-07-16T19:38:37.995Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 223,
  "fields": {
    "challenge": "LEKR",
    "response": "lekr",
    "hashkey": "5eb0630845d61d3d788fd5d280e00b5a230b38f8",
    "expiration": "2024-07-16T19:38:49.279Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 224,
  "fields": {
    "challenge": "FDSK",
    "response": "fdsk",
    "hashkey": "bcd5637636b86f7d35d0e86d48b12cd1f897ae63",
    "expiration": "2024-07-18T15:55:35.009Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 225,
  "fields": {
    "challenge": "QYYZ",
    "response": "qyyz",
    "hashkey": "bbb76f12c917795fde42af5c21294b7ad9270b0e",
    "expiration": "2024-07-18T15:55:37.312Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 226,
  "fields": {
    "challenge": "RCEK",
    "response": "rcek",
    "hashkey": "45481d627fe060380ddfd7f9c8c75f8539a32008",
    "expiration": "2024-07-19T15:23:57.633Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 227,
  "fields": {
    "challenge": "EZDU",
    "response": "ezdu",
    "hashkey": "e7d42c5375c5188b5a8790ccbc9e1153c6d36802",
    "expiration": "2024-07-19T15:25:44.103Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 228,
  "fields": {
    "challenge": "JXWZ",
    "response": "jxwz",
    "hashkey": "01278a6c920ddc2259b08109e0cdcda35bb1a75e",
    "expiration": "2024-07-22T13:45:59.854Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 229,
  "fields": {
    "challenge": "TTOZ",
    "response": "ttoz",
    "hashkey": "150709e4928552b7fef2ed2afeff3899aca21a48",
    "expiration": "2024-07-22T13:46:03.566Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 230,
  "fields": {
    "challenge": "ANYG",
    "response": "anyg",
    "hashkey": "1a6fa88ca45d459ff7abc62297d23b1f9434e32a",
    "expiration": "2024-07-22T13:46:14.231Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 231,
  "fields": {
    "challenge": "EPWR",
    "response": "epwr",
    "hashkey": "5d3acfce15a463a8cb68c6ee17aee1a07b4fdeaf",
    "expiration": "2024-07-22T14:09:37.223Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 232,
  "fields": {
    "challenge": "SIJP",
    "response": "sijp",
    "hashkey": "d068511dfa205092ae2d51235212f56a881b65c6",
    "expiration": "2024-07-22T14:09:43.647Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 233,
  "fields": {
    "challenge": "RKTM",
    "response": "rktm",
    "hashkey": "ab4f84a28917c1d21620f07677fac3843c6f2f88",
    "expiration": "2024-07-22T18:12:00.095Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 234,
  "fields": {
    "challenge": "VZGK",
    "response": "vzgk",
    "hashkey": "900952568184a170d8502b51d896a4b0f2cb24fc",
    "expiration": "2024-07-22T18:12:13.424Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 235,
  "fields": {
    "challenge": "TQKM",
    "response": "tqkm",
    "hashkey": "9ab8545643afcfad0762d4ab7d5654f62ae8ea2d",
    "expiration": "2024-07-22T18:19:57.774Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 236,
  "fields": {
    "challenge": "QWNQ",
    "response": "qwnq",
    "hashkey": "4237b0ed459bcebb64d6a8cf43a3a637a6cda40a",
    "expiration": "2024-07-22T18:20:03.476Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 237,
  "fields": {
    "challenge": "JJHL",
    "response": "jjhl",
    "hashkey": "f7e9a9a74a564bc2770ae2f1b1c0629dc578748d",
    "expiration": "2024-07-23T13:49:11.593Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 238,
  "fields": {
    "challenge": "UEYM",
    "response": "ueym",
    "hashkey": "897e0ac2c3d84a8ab53a0e3c1610b27f6cb3a436",
    "expiration": "2024-07-23T13:49:19.035Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 239,
  "fields": {
    "challenge": "TVLX",
    "response": "tvlx",
    "hashkey": "15047f88394b9fbb531c5a616ea7b2e7bc77b640",
    "expiration": "2024-07-23T14:04:30.303Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 240,
  "fields": {
    "challenge": "UCBI",
    "response": "ucbi",
    "hashkey": "441585ae2fe4dadfb30d3514e2a613c61192055a",
    "expiration": "2024-07-25T18:45:40.513Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 241,
  "fields": {
    "challenge": "BFFL",
    "response": "bffl",
    "hashkey": "1f05bc69d9018134643e985acfd7ce8f2c103ae7",
    "expiration": "2024-07-25T18:51:20.930Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 242,
  "fields": {
    "challenge": "ILNH",
    "response": "ilnh",
    "hashkey": "e01d5927ed59fd046f0b1e0381bc889132244dde",
    "expiration": "2024-07-25T19:39:23.478Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 243,
  "fields": {
    "challenge": "KVCP",
    "response": "kvcp",
    "hashkey": "973dbeebff27cf4d39cb67bbc109764a6324011f",
    "expiration": "2024-07-25T19:43:39.452Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 244,
  "fields": {
    "challenge": "MVPI",
    "response": "mvpi",
    "hashkey": "ef95c9430fea4c3cecaa8c5c906818f11b96c33b",
    "expiration": "2024-07-25T19:43:43.590Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 245,
  "fields": {
    "challenge": "YPHC",
    "response": "yphc",
    "hashkey": "74671c68c8232b30b1b955377c57e8c860f92f10",
    "expiration": "2024-07-25T19:44:03.572Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 246,
  "fields": {
    "challenge": "TVUY",
    "response": "tvuy",
    "hashkey": "85ada9afdd3adf7fa8dd0af7101d292de95e8e1d",
    "expiration": "2024-07-29T18:35:01.349Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 247,
  "fields": {
    "challenge": "QSQG",
    "response": "qsqg",
    "hashkey": "5d88b65b0ec96fc1d479bb76555095002d02fd0e",
    "expiration": "2024-09-02T15:36:39.443Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 248,
  "fields": {
    "challenge": "YXCP",
    "response": "yxcp",
    "hashkey": "6e19969e8583639a6b56b60f90ab7c7510512e2d",
    "expiration": "2024-09-02T15:36:48.454Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 249,
  "fields": {
    "challenge": "CMUE",
    "response": "cmue",
    "hashkey": "c81d96c556095649b008651dff37f0d7e23607cc",
    "expiration": "2024-09-02T16:31:41.674Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 250,
  "fields": {
    "challenge": "EZTE",
    "response": "ezte",
    "hashkey": "71644dda8dc9f6b0c1cce9bf3ebaaec91f3b741e",
    "expiration": "2024-09-02T16:31:48.991Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 251,
  "fields": {
    "challenge": "VLRL",
    "response": "vlrl",
    "hashkey": "4cb31e1f8f4a38ffe0ffa58995609d27f74f147b",
    "expiration": "2024-09-02T16:31:54.029Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 252,
  "fields": {
    "challenge": "EMZQ",
    "response": "emzq",
    "hashkey": "1134b061cc5575b329731d621952f626a7342de6",
    "expiration": "2024-09-02T16:34:48.358Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 253,
  "fields": {
    "challenge": "TTSS",
    "response": "ttss",
    "hashkey": "0c1bd77b1d661d90c1d3f86625f8bb6151f64558",
    "expiration": "2024-09-02T16:34:57.675Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 254,
  "fields": {
    "challenge": "AYMN",
    "response": "aymn",
    "hashkey": "4ba2674f6d694394cf82bed5b620f6c8bf5527be",
    "expiration": "2024-09-02T16:35:03.442Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 255,
  "fields": {
    "challenge": "ZZSG",
    "response": "zzsg",
    "hashkey": "bf5afcb8207d3219897bd5497b99f22f0a3592e5",
    "expiration": "2024-09-02T16:36:20.622Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 256,
  "fields": {
    "challenge": "AFHM",
    "response": "afhm",
    "hashkey": "341d413c290755c8daf7fb5798e38961199c6b43",
    "expiration": "2024-09-02T16:36:29.495Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 257,
  "fields": {
    "challenge": "FACW",
    "response": "facw",
    "hashkey": "03ca1e817aa3837ecfd50883f16ebf8efab7c455",
    "expiration": "2024-09-02T16:37:40.904Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 258,
  "fields": {
    "challenge": "CSXT",
    "response": "csxt",
    "hashkey": "9f44bf08685546d0d926f60745fc60620c1cb492",
    "expiration": "2024-09-02T16:39:01.074Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 259,
  "fields": {
    "challenge": "YJNG",
    "response": "yjng",
    "hashkey": "1eec57a228c323ebcd0c9bb9de0954e2e55bbc3a",
    "expiration": "2024-09-02T16:41:49.877Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 260,
  "fields": {
    "challenge": "JMWB",
    "response": "jmwb",
    "hashkey": "b0180971ecfd535fc08e3d9b152c62efcd27fa3d",
    "expiration": "2024-09-02T16:42:55.004Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 261,
  "fields": {
    "challenge": "HRUK",
    "response": "hruk",
    "hashkey": "e194eac0e9dc36b5831fe1ec5399204dbd11600c",
    "expiration": "2024-09-04T14:21:53.866Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 262,
  "fields": {
    "challenge": "IVEI",
    "response": "ivei",
    "hashkey": "97dc787d70a51adb75c11325709205a6cc64157b",
    "expiration": "2024-09-04T14:22:00.951Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 263,
  "fields": {
    "challenge": "KGSZ",
    "response": "kgsz",
    "hashkey": "b31314cf42a7b1a343a4078244a8e794c49c4a70",
    "expiration": "2024-09-04T14:37:40.141Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 264,
  "fields": {
    "challenge": "AFSM",
    "response": "afsm",
    "hashkey": "83005b3bc04e90817a023c5d2c5989ddcb6e2940",
    "expiration": "2024-09-04T14:41:07.961Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 265,
  "fields": {
    "challenge": "XJPU",
    "response": "xjpu",
    "hashkey": "44727e5c944e9b59f4698dff175b7dcc9ccb5963",
    "expiration": "2024-09-04T14:43:32.135Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 266,
  "fields": {
    "challenge": "WCMU",
    "response": "wcmu",
    "hashkey": "6d0fd7961b9bd4a31d742d6f19a805fe6ac812c3",
    "expiration": "2024-09-04T15:14:29.428Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 267,
  "fields": {
    "challenge": "OMUS",
    "response": "omus",
    "hashkey": "d4e1ed15c05e5d8d7badfaa91dd3f19587134fc1",
    "expiration": "2024-09-04T16:15:42.774Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 268,
  "fields": {
    "challenge": "DHWA",
    "response": "dhwa",
    "hashkey": "3087e515a5b58bf0bf50b5ab2602d54c1135fe51",
    "expiration": "2024-09-04T16:15:50.116Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 269,
  "fields": {
    "challenge": "GGLJ",
    "response": "gglj",
    "hashkey": "efbe0736f5311dfc2a36fadeab2ab40b3d80e77f",
    "expiration": "2024-09-04T16:44:00.320Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 270,
  "fields": {
    "challenge": "QQYC",
    "response": "qqyc",
    "hashkey": "c4dafbc48bb2367d5b971642fd1cf62a06fc5197",
    "expiration": "2024-09-04T16:44:01.866Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 271,
  "fields": {
    "challenge": "GNGP",
    "response": "gngp",
    "hashkey": "ba8e4aa1b34edc5cfded37c4e922400e25cf8e1b",
    "expiration": "2024-09-04T16:44:03.955Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 272,
  "fields": {
    "challenge": "CUDN",
    "response": "cudn",
    "hashkey": "59a763c76ad4a7ef103d14770ac449f24c6f5411",
    "expiration": "2024-09-04T18:39:04.439Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 273,
  "fields": {
    "challenge": "YSSQ",
    "response": "yssq",
    "hashkey": "5a8a3c2682fb9094e9426c5a296cb4b0576e01df",
    "expiration": "2024-09-04T20:50:37.991Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 274,
  "fields": {
    "challenge": "EJOD",
    "response": "ejod",
    "hashkey": "1ced48788b6b7c20f3b6da712a25859257cd0b7c",
    "expiration": "2024-09-04T20:51:18.343Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 275,
  "fields": {
    "challenge": "RCXO",
    "response": "rcxo",
    "hashkey": "4442e251b57712dc6c091a3bf69e220523e24a98",
    "expiration": "2024-09-04T20:52:31.336Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 276,
  "fields": {
    "challenge": "XETP",
    "response": "xetp",
    "hashkey": "9596c3f82aa2698b69c055abead7d102280a4f57",
    "expiration": "2024-09-04T21:00:27.411Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 277,
  "fields": {
    "challenge": "TXDW",
    "response": "txdw",
    "hashkey": "2ab34c20981f71bea6ad2941280c84f8c99e2797",
    "expiration": "2024-09-04T21:00:36.128Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 278,
  "fields": {
    "challenge": "SSKP",
    "response": "sskp",
    "hashkey": "254164fed49dc87e79036853b66ce5565b76a518",
    "expiration": "2024-09-04T21:00:41.444Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 279,
  "fields": {
    "challenge": "ICLN",
    "response": "icln",
    "hashkey": "1fbdea0b5bfd37d21eff00bf34eb522a8d50ddfa",
    "expiration": "2024-09-04T21:02:15.759Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 280,
  "fields": {
    "challenge": "AREF",
    "response": "aref",
    "hashkey": "1cb7c4ab1b760f77437e9224317e1508732a7689",
    "expiration": "2024-09-04T21:03:04.473Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 281,
  "fields": {
    "challenge": "ICUI",
    "response": "icui",
    "hashkey": "70729ba92f14498f2da8181caa8d51b4ff805e10",
    "expiration": "2024-09-04T21:09:43.576Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 282,
  "fields": {
    "challenge": "PPPO",
    "response": "pppo",
    "hashkey": "f85f2767b2b9c576e03c37b7891faead61ab24c5",
    "expiration": "2024-09-04T21:09:51.119Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 283,
  "fields": {
    "challenge": "HJSI",
    "response": "hjsi",
    "hashkey": "c3e859aa3eaf729d96e7d7f75e604e8187bd0ed0",
    "expiration": "2024-09-04T21:10:38.417Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 284,
  "fields": {
    "challenge": "GZZD",
    "response": "gzzd",
    "hashkey": "20099f3a7f019198cf094ca6a8d52a76b3b39657",
    "expiration": "2024-09-05T16:49:02.115Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 285,
  "fields": {
    "challenge": "DEUB",
    "response": "deub",
    "hashkey": "ef79efbfb72fb4a84db235a03f017a1651925dcf",
    "expiration": "2024-09-06T14:07:49.933Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 286,
  "fields": {
    "challenge": "RHCN",
    "response": "rhcn",
    "hashkey": "d97a40e3d1ba4a641595a7980d1ad09b28962407",
    "expiration": "2024-09-06T15:59:42.812Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 287,
  "fields": {
    "challenge": "GGCD",
    "response": "ggcd",
    "hashkey": "d17eff1a78aab8618b7c00105b4c1fddb7d7f768",
    "expiration": "2024-09-06T16:00:39.177Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 288,
  "fields": {
    "challenge": "WKBU",
    "response": "wkbu",
    "hashkey": "9aaa3e07ac45f62a9a6552b64ef66fbb5059d239",
    "expiration": "2024-09-06T16:15:28.191Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 289,
  "fields": {
    "challenge": "XGAH",
    "response": "xgah",
    "hashkey": "32cda56a0554e809eda8a20f7da7f44f409e9cf2",
    "expiration": "2024-09-06T16:34:05.878Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 290,
  "fields": {
    "challenge": "CAMG",
    "response": "camg",
    "hashkey": "0fecd55d7c016daadb1a1b1aa30d82ff2e2be1e0",
    "expiration": "2024-09-06T16:44:32.712Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 291,
  "fields": {
    "challenge": "JIJV",
    "response": "jijv",
    "hashkey": "b2688a1a4a12600e32c8ac142f2ee6c24800926d",
    "expiration": "2024-09-06T16:46:23.947Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 292,
  "fields": {
    "challenge": "PWRL",
    "response": "pwrl",
    "hashkey": "1f1686541a5059d6f30704674c07d8e02239d6a3",
    "expiration": "2024-09-06T16:55:46.571Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 293,
  "fields": {
    "challenge": "REQZ",
    "response": "reqz",
    "hashkey": "737a86049841a83bff2fe2bdc3e9d96f738d42a5",
    "expiration": "2024-09-06T16:56:25.021Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 294,
  "fields": {
    "challenge": "TIBH",
    "response": "tibh",
    "hashkey": "6e1d606a4f334210fb7c7e79e325e0e90c771b31",
    "expiration": "2024-09-06T16:56:27.414Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 295,
  "fields": {
    "challenge": "MMHO",
    "response": "mmho",
    "hashkey": "afe4931dfd66bb61bb2251a88cca8d413eb3129c",
    "expiration": "2024-09-06T16:56:30.840Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 296,
  "fields": {
    "challenge": "ONUF",
    "response": "onuf",
    "hashkey": "cb38b62dd96dd8dbcb209b34356156cb52084416",
    "expiration": "2024-09-06T16:56:34.353Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 297,
  "fields": {
    "challenge": "BTKM",
    "response": "btkm",
    "hashkey": "c26fc9f7ce0dd69addb6214df7d26f5b5fa8742f",
    "expiration": "2024-09-06T16:56:36.841Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 298,
  "fields": {
    "challenge": "IRTS",
    "response": "irts",
    "hashkey": "2864e84e21ed3a6dbc6974368299a6af5947da57",
    "expiration": "2024-09-06T17:07:04.524Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 299,
  "fields": {
    "challenge": "BNZR",
    "response": "bnzr",
    "hashkey": "d6d126867590e6669759cded7a551db4b17c94cc",
    "expiration": "2024-09-06T17:10:51.245Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 300,
  "fields": {
    "challenge": "TOPQ",
    "response": "topq",
    "hashkey": "e33865b014fb799a230d32af63f0245739da030c",
    "expiration": "2024-09-06T17:19:47.853Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 301,
  "fields": {
    "challenge": "QCVD",
    "response": "qcvd",
    "hashkey": "83c3889c3c154573ad04a03320f27e6592d9b2a9",
    "expiration": "2024-09-06T17:20:48.839Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 302,
  "fields": {
    "challenge": "RYPK",
    "response": "rypk",
    "hashkey": "3e65b1d2a737de48dbe6d662f2cfbec64c0f4eeb",
    "expiration": "2024-09-06T17:21:20.156Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 303,
  "fields": {
    "challenge": "WGNT",
    "response": "wgnt",
    "hashkey": "6609fe191535fe4226e9e65b27110c349f93e331",
    "expiration": "2024-09-06T17:24:53.627Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 304,
  "fields": {
    "challenge": "VMSP",
    "response": "vmsp",
    "hashkey": "beca6ed152043778f1eb0ca355f0f36b9ca54e8b",
    "expiration": "2024-09-06T18:17:18.723Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 305,
  "fields": {
    "challenge": "JIZF",
    "response": "jizf",
    "hashkey": "8a8e8b484e8d81cf478674e9e07987c97e481bb7",
    "expiration": "2024-09-06T18:20:41.681Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 306,
  "fields": {
    "challenge": "TWSQ",
    "response": "twsq",
    "hashkey": "d7a02e09c4f2a431737c1d39e263293950761bf1",
    "expiration": "2024-09-06T18:21:14.514Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 307,
  "fields": {
    "challenge": "NOCJ",
    "response": "nocj",
    "hashkey": "79a256ca618e3fe0d21e9944b3561901077299e1",
    "expiration": "2024-09-06T18:21:33.380Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 308,
  "fields": {
    "challenge": "CAMG",
    "response": "camg",
    "hashkey": "915cbd7415e3cfc2bd5ea3a6de5ee9772eb2a572",
    "expiration": "2024-09-06T18:25:21.182Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 309,
  "fields": {
    "challenge": "YYGL",
    "response": "yygl",
    "hashkey": "d0755a877911405c641defd278466216535755ce",
    "expiration": "2024-09-06T18:28:05.159Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 310,
  "fields": {
    "challenge": "RJFB",
    "response": "rjfb",
    "hashkey": "38ee05116ae29aa765b2a4c0e73f7b6b8da78473",
    "expiration": "2024-09-06T18:31:26.481Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 311,
  "fields": {
    "challenge": "JITV",
    "response": "jitv",
    "hashkey": "8ff1fb5d000469f826b5cb14abb5b73cc39ac787",
    "expiration": "2024-09-07T18:37:58.271Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 312,
  "fields": {
    "challenge": "TYEG",
    "response": "tyeg",
    "hashkey": "a874d68b36677d2cae0f84ee5c78ecc94dc3179e",
    "expiration": "2024-09-07T18:38:00.639Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 313,
  "fields": {
    "challenge": "BLBE",
    "response": "blbe",
    "hashkey": "976f21bc01ed208aca1447ee6aa9cf3aa3d25212",
    "expiration": "2024-09-07T18:38:02.344Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 314,
  "fields": {
    "challenge": "RVHJ",
    "response": "rvhj",
    "hashkey": "d945e4afbb066c445f22f3dab471fdf20bd105c9",
    "expiration": "2024-09-07T18:38:03.801Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 315,
  "fields": {
    "challenge": "ONMA",
    "response": "onma",
    "hashkey": "53d7747fc404890dddcfb11dea37db4d93c0814d",
    "expiration": "2024-09-07T18:38:06.455Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 316,
  "fields": {
    "challenge": "SPZI",
    "response": "spzi",
    "hashkey": "d3d19248f74afbd9e2ef6d2d7fa24eb6110045d2",
    "expiration": "2024-09-07T18:38:18.680Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 317,
  "fields": {
    "challenge": "EQQF",
    "response": "eqqf",
    "hashkey": "922c9e41bfec560a2eb9e7691dfb5a761ce262a3",
    "expiration": "2024-09-07T18:38:24.213Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 318,
  "fields": {
    "challenge": "CMKU",
    "response": "cmku",
    "hashkey": "7a4075a4c549f89efe63f5b82101736e0935e1e0",
    "expiration": "2024-09-07T18:38:26.233Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 319,
  "fields": {
    "challenge": "EBRM",
    "response": "ebrm",
    "hashkey": "fe872982b624b44b6d4110d7f3c25be284971a69",
    "expiration": "2024-09-07T18:38:32.567Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 320,
  "fields": {
    "challenge": "HMTQ",
    "response": "hmtq",
    "hashkey": "402fdc4284da3c3c230471a42bf289f968460445",
    "expiration": "2024-09-07T18:38:35.622Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 321,
  "fields": {
    "challenge": "VMXT",
    "response": "vmxt",
    "hashkey": "dcd17268c5644992b4dd505719beef7aa2d52ccf",
    "expiration": "2024-09-07T20:52:06.374Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 322,
  "fields": {
    "challenge": "SZUU",
    "response": "szuu",
    "hashkey": "50493f36a12f4b763414cae9d64d7a1176494a0f",
    "expiration": "2024-09-07T20:52:29.918Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 323,
  "fields": {
    "challenge": "DWTO",
    "response": "dwto",
    "hashkey": "d430e8d20f51e88cb40b491d9220daeef598fb84",
    "expiration": "2024-09-08T08:07:06.709Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 324,
  "fields": {
    "challenge": "USZN",
    "response": "uszn",
    "hashkey": "f83d966ee6156bb4c035a29e4f8580a4776045ca",
    "expiration": "2024-09-08T08:07:12.262Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 325,
  "fields": {
    "challenge": "FKHR",
    "response": "fkhr",
    "hashkey": "0777e2c25fa92850731193b06ac90c18dc2c9461",
    "expiration": "2024-09-08T08:12:35.463Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 326,
  "fields": {
    "challenge": "ISTG",
    "response": "istg",
    "hashkey": "6661c99b82f2a12cebc4ac1f42f2d6b47ad6aacd",
    "expiration": "2024-09-08T16:32:52.735Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 327,
  "fields": {
    "challenge": "NDSR",
    "response": "ndsr",
    "hashkey": "37b1b9c365c072e3fdeb965eec480e463eb65708",
    "expiration": "2024-09-08T16:34:45.406Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 328,
  "fields": {
    "challenge": "ERTU",
    "response": "ertu",
    "hashkey": "e4bf99a2e8fa34a237229f0ce746e2364365edf7",
    "expiration": "2024-09-08T16:35:20.061Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 329,
  "fields": {
    "challenge": "NSAJ",
    "response": "nsaj",
    "hashkey": "bd9f8b74a9e6d767b41cc63734f9f8353cd8c4f4",
    "expiration": "2024-09-08T16:36:04.012Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 330,
  "fields": {
    "challenge": "RUZL",
    "response": "ruzl",
    "hashkey": "783230ef1bff2a084d5f782073b433ea4322dafc",
    "expiration": "2024-09-08T16:36:14.225Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 331,
  "fields": {
    "challenge": "IDBS",
    "response": "idbs",
    "hashkey": "5add8ab96e0e0904522a49b5728be2d7dc92c116",
    "expiration": "2024-09-08T16:41:29.975Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 332,
  "fields": {
    "challenge": "PNRG",
    "response": "pnrg",
    "hashkey": "9f0376d2c2f6500e90f92be5909806c80d8f9183",
    "expiration": "2024-09-08T16:41:45.102Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 333,
  "fields": {
    "challenge": "DYKS",
    "response": "dyks",
    "hashkey": "d20ad1f2fc0e43bf2dca539fc87cc1d4267accc6",
    "expiration": "2024-09-08T16:43:28.927Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 334,
  "fields": {
    "challenge": "LETA",
    "response": "leta",
    "hashkey": "2760a2a29cca2c6e6792cebfd175ad5e1eba48ad",
    "expiration": "2024-09-08T16:44:59.529Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 335,
  "fields": {
    "challenge": "EFJO",
    "response": "efjo",
    "hashkey": "c55e7b0ceaf4273f08aa53225687de67aff4275e",
    "expiration": "2024-09-08T16:47:34.645Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 336,
  "fields": {
    "challenge": "RUFP",
    "response": "rufp",
    "hashkey": "379dc82b2047f44925f7d629eb467ad5e7177bca",
    "expiration": "2024-09-08T16:49:02.238Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 337,
  "fields": {
    "challenge": "MJYW",
    "response": "mjyw",
    "hashkey": "d52cc8d6096925549e067cfa070df4856c3d1cb2",
    "expiration": "2024-09-08T16:51:30.303Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 338,
  "fields": {
    "challenge": "GMTM",
    "response": "gmtm",
    "hashkey": "c1f93d04a98d2b168060912c1276d141230c96a3",
    "expiration": "2024-09-08T16:52:01.733Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 339,
  "fields": {
    "challenge": "SPSF",
    "response": "spsf",
    "hashkey": "468d1a4626ed98426dc9f01919f6de1918de2098",
    "expiration": "2024-09-08T16:53:13.604Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 340,
  "fields": {
    "challenge": "INQM",
    "response": "inqm",
    "hashkey": "ecdf7890a79f6db53a72b558b61c5fe1d03019aa",
    "expiration": "2024-09-08T16:54:49.930Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 341,
  "fields": {
    "challenge": "OOYK",
    "response": "ooyk",
    "hashkey": "9c2c0e5cb9c89be2f7b0de9899e48729858dcc9b",
    "expiration": "2024-09-08T16:55:18.537Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 342,
  "fields": {
    "challenge": "FUJL",
    "response": "fujl",
    "hashkey": "a0d862968011dca8a8db66ea31b66e19ca5b72b3",
    "expiration": "2024-09-08T16:56:01.505Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 343,
  "fields": {
    "challenge": "QYMZ",
    "response": "qymz",
    "hashkey": "7b62c82c087bf2da2466767fa06c1aef4a3791bc",
    "expiration": "2024-09-08T16:56:57.365Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 344,
  "fields": {
    "challenge": "KSPU",
    "response": "kspu",
    "hashkey": "693abb6277d058fadd2f775662a2d801dd3fd239",
    "expiration": "2024-09-08T16:57:11.852Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 345,
  "fields": {
    "challenge": "HLWW",
    "response": "hlww",
    "hashkey": "7e23e91333444ec74482f51b89d738b69f42c50d",
    "expiration": "2024-09-08T16:57:23.260Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 346,
  "fields": {
    "challenge": "ABPN",
    "response": "abpn",
    "hashkey": "4353fd73da3509f6a0009c9ef3f06a7e7a5eae59",
    "expiration": "2024-09-08T16:57:35.695Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 347,
  "fields": {
    "challenge": "MLZJ",
    "response": "mlzj",
    "hashkey": "b561e4a21f52e22e31ab8cbc4f17ff099164ca34",
    "expiration": "2024-09-08T16:57:47.154Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 348,
  "fields": {
    "challenge": "PCGO",
    "response": "pcgo",
    "hashkey": "d11ee8ad1b7f63575c41ec5aa2adbe057730f989",
    "expiration": "2024-09-08T16:58:21.581Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 349,
  "fields": {
    "challenge": "JOHI",
    "response": "johi",
    "hashkey": "073820890ca24fea5f634e647047fecb03d3961e",
    "expiration": "2024-09-08T17:04:11.026Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 350,
  "fields": {
    "challenge": "VHKX",
    "response": "vhkx",
    "hashkey": "d527eed982a171b9b4d12d37e3296f884cd9b88e",
    "expiration": "2024-09-08T17:04:35.892Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 351,
  "fields": {
    "challenge": "EGFJ",
    "response": "egfj",
    "hashkey": "8dbebc10524c6ad2d339c960fb51fb98657b9c7b",
    "expiration": "2024-09-08T17:04:50.783Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 352,
  "fields": {
    "challenge": "GHSP",
    "response": "ghsp",
    "hashkey": "e6e072ad6a073deeb26665172396ba0e5e33b754",
    "expiration": "2024-09-08T17:05:38.945Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 353,
  "fields": {
    "challenge": "LAXJ",
    "response": "laxj",
    "hashkey": "73e721495fa03da249a33c162873baa2837c7ee6",
    "expiration": "2024-09-08T17:08:23.118Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 354,
  "fields": {
    "challenge": "ADRN",
    "response": "adrn",
    "hashkey": "f69a527b6649c3dcad6eb97e64f1dbd20ebc05c3",
    "expiration": "2024-09-08T17:09:34.181Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 355,
  "fields": {
    "challenge": "IYNA",
    "response": "iyna",
    "hashkey": "810a18262b752f81b0ffbc3246c9076f67a5e58f",
    "expiration": "2024-09-08T17:11:22.784Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 356,
  "fields": {
    "challenge": "QIFC",
    "response": "qifc",
    "hashkey": "ddc5e4d577aaaaabe542e55def83c34a6fff022f",
    "expiration": "2024-09-08T17:12:03.048Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 357,
  "fields": {
    "challenge": "AONC",
    "response": "aonc",
    "hashkey": "26183ef4400e5d3aedf5004966d0208262f1575b",
    "expiration": "2024-09-08T17:21:55.618Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 358,
  "fields": {
    "challenge": "AFTK",
    "response": "aftk",
    "hashkey": "2bf86f85cb526312f37f438c501fedf81db3be21",
    "expiration": "2024-09-08T17:22:25.563Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 359,
  "fields": {
    "challenge": "TZIQ",
    "response": "tziq",
    "hashkey": "402af164de79d3a618d971accb07c25d4bc25884",
    "expiration": "2024-09-08T17:23:01.767Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 360,
  "fields": {
    "challenge": "PLZH",
    "response": "plzh",
    "hashkey": "710cfb0425e0ff9f1c4a2dba6e4dd626c34d3641",
    "expiration": "2024-09-08T17:27:28.369Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 361,
  "fields": {
    "challenge": "AEEJ",
    "response": "aeej",
    "hashkey": "3e6fedf48bc756420dd52eefcc44a2746f4ef9d0",
    "expiration": "2024-09-08T17:27:31.993Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 362,
  "fields": {
    "challenge": "OVJF",
    "response": "ovjf",
    "hashkey": "2724cdc932da89e6498c688b4e723e8934fc959d",
    "expiration": "2024-09-08T17:27:35.417Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 363,
  "fields": {
    "challenge": "SBAE",
    "response": "sbae",
    "hashkey": "dd73736e2d96c141e76c9a20be06d1cb6ffbf273",
    "expiration": "2024-09-08T17:27:55.663Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 364,
  "fields": {
    "challenge": "OJKK",
    "response": "ojkk",
    "hashkey": "08c3897d2cec52b872fc912aa5283c81ce763f7b",
    "expiration": "2024-09-08T17:28:22.525Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 365,
  "fields": {
    "challenge": "KYFN",
    "response": "kyfn",
    "hashkey": "08ac3adb99d518bde6789a51ef1081a316573ac4",
    "expiration": "2024-09-08T17:29:39.440Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 366,
  "fields": {
    "challenge": "WKSZ",
    "response": "wksz",
    "hashkey": "005b10489010700eba246be014bb924dfdf7b1cd",
    "expiration": "2024-09-08T18:17:17.363Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 367,
  "fields": {
    "challenge": "ZTGF",
    "response": "ztgf",
    "hashkey": "8f7e48163928227de9db3487b1717e8664907d6e",
    "expiration": "2024-09-08T18:17:21.265Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 368,
  "fields": {
    "challenge": "TOLO",
    "response": "tolo",
    "hashkey": "268f3c03843507c1deb9760c6d1834d7c607a96e",
    "expiration": "2024-09-08T18:28:04.110Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 369,
  "fields": {
    "challenge": "HCRM",
    "response": "hcrm",
    "hashkey": "2fa02cfcafef7f3a3fb5d57f8e8ba1082d9aa674",
    "expiration": "2024-09-08T18:28:36.978Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 370,
  "fields": {
    "challenge": "JTMS",
    "response": "jtms",
    "hashkey": "5b1bedb4c43234ca89655fc15b99279491e066bc",
    "expiration": "2024-09-08T18:28:58.415Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 371,
  "fields": {
    "challenge": "HOTN",
    "response": "hotn",
    "hashkey": "faaacfeebc0df831f3492d1a9523d730895032a3",
    "expiration": "2024-09-09T13:47:33.074Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 372,
  "fields": {
    "challenge": "OPVN",
    "response": "opvn",
    "hashkey": "4195b527a5323c015e64893404a4ebc83eb40839",
    "expiration": "2024-09-09T14:03:57.160Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 373,
  "fields": {
    "challenge": "LKPZ",
    "response": "lkpz",
    "hashkey": "3a581c987e4279734f6819fc056b8c7cdefde27d",
    "expiration": "2024-09-09T14:04:14.362Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 374,
  "fields": {
    "challenge": "GLPI",
    "response": "glpi",
    "hashkey": "3103309678e019932c23846236634dab340f7b97",
    "expiration": "2024-09-09T14:04:29.157Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 375,
  "fields": {
    "challenge": "KHNQ",
    "response": "khnq",
    "hashkey": "78eaab8123dd5abab38757f3b4a187ff037ce622",
    "expiration": "2024-09-09T14:08:12.896Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 376,
  "fields": {
    "challenge": "MZVT",
    "response": "mzvt",
    "hashkey": "4cb38e29060377b12eeddee1f398049bdb7c5495",
    "expiration": "2024-09-09T14:08:19.347Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 377,
  "fields": {
    "challenge": "YZUS",
    "response": "yzus",
    "hashkey": "7c533da651607ff397cafae831cc4ae2e498f721",
    "expiration": "2024-09-09T15:20:47.038Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 378,
  "fields": {
    "challenge": "VZNP",
    "response": "vznp",
    "hashkey": "38024e6cef7fe4a34f6ddf8dc1924270a420d548",
    "expiration": "2024-09-09T15:24:02.219Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 379,
  "fields": {
    "challenge": "ZCOR",
    "response": "zcor",
    "hashkey": "5a051e17700a30009f9ea3eed303ba93b0dbad93",
    "expiration": "2024-09-09T15:24:31.418Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 380,
  "fields": {
    "challenge": "LWDY",
    "response": "lwdy",
    "hashkey": "10db21106229de6a1bed1e68781d037e3b405de6",
    "expiration": "2024-09-09T15:26:37.043Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 381,
  "fields": {
    "challenge": "OTQX",
    "response": "otqx",
    "hashkey": "8fc75fd5b7ae21bcb1f0ecd3d551886e87dfb91a",
    "expiration": "2024-09-09T15:28:58.762Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 382,
  "fields": {
    "challenge": "LHGL",
    "response": "lhgl",
    "hashkey": "966d1f7342a5a01dc93bb61bfdbc62be245eeeb3",
    "expiration": "2024-09-09T15:33:56.957Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 383,
  "fields": {
    "challenge": "WYPE",
    "response": "wype",
    "hashkey": "1f862004c49519766047aff25a9833110e807183",
    "expiration": "2024-09-09T15:34:02.410Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 384,
  "fields": {
    "challenge": "OLVU",
    "response": "olvu",
    "hashkey": "77313f6afc3c4d2c134657f408822388c42c9318",
    "expiration": "2024-09-09T15:36:10.479Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 385,
  "fields": {
    "challenge": "FTJL",
    "response": "ftjl",
    "hashkey": "fe9e783dc6ba541d55a58b288a0758ccc5898101",
    "expiration": "2024-09-09T15:36:17.405Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 386,
  "fields": {
    "challenge": "TMRE",
    "response": "tmre",
    "hashkey": "65b6975b2ecf42f2f30abe652c7a6854f5f3c5a1",
    "expiration": "2024-09-09T15:36:42.090Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 387,
  "fields": {
    "challenge": "RDKR",
    "response": "rdkr",
    "hashkey": "cbc4ba5d2ec54c670cf761388fcf38734a4697db",
    "expiration": "2024-09-09T16:03:32.302Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 388,
  "fields": {
    "challenge": "JJND",
    "response": "jjnd",
    "hashkey": "76a2f1e5ad72879e57711931491a2921f8e3f478",
    "expiration": "2024-09-09T16:03:49.403Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 389,
  "fields": {
    "challenge": "PPPJ",
    "response": "pppj",
    "hashkey": "d2056d99998a258ebdaee4055e1e8464296f4d9a",
    "expiration": "2024-09-10T15:51:33.570Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 390,
  "fields": {
    "challenge": "BWPS",
    "response": "bwps",
    "hashkey": "8e8121294e315dcc4a5b582c9edf8764cd00d3d3",
    "expiration": "2024-09-10T15:52:11.047Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 391,
  "fields": {
    "challenge": "IQEH",
    "response": "iqeh",
    "hashkey": "f0614f972a63ef56c4d91ddb745dc3ea94d120f4",
    "expiration": "2024-09-10T15:53:23.002Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 392,
  "fields": {
    "challenge": "ATRU",
    "response": "atru",
    "hashkey": "f82e616d44ff9c2e447f47bdb3bf43e5f61ac085",
    "expiration": "2024-09-10T16:00:37.396Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 393,
  "fields": {
    "challenge": "BUGI",
    "response": "bugi",
    "hashkey": "2e49a9870a8dff82d3cb87be0fd5c8648086b1e0",
    "expiration": "2024-09-10T16:05:40.727Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 394,
  "fields": {
    "challenge": "AURT",
    "response": "aurt",
    "hashkey": "9bc4ecff85c5ad8a332f871c3328e9e935b95d1a",
    "expiration": "2024-09-14T12:02:56.658Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 395,
  "fields": {
    "challenge": "CMOD",
    "response": "cmod",
    "hashkey": "843cc06e1fe982375fd1903148faff674b6b303f",
    "expiration": "2024-09-14T12:18:14.298Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 396,
  "fields": {
    "challenge": "PMUX",
    "response": "pmux",
    "hashkey": "266d2fe4fef32cf12225bcf3b0e8669e2d27e55e",
    "expiration": "2024-09-14T12:18:16.302Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 397,
  "fields": {
    "challenge": "OLRN",
    "response": "olrn",
    "hashkey": "4e422fd2fe92d55a04bc36a2f5e4619ce90b3ce5",
    "expiration": "2024-10-04T18:13:00.819Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 398,
  "fields": {
    "challenge": "ALPG",
    "response": "alpg",
    "hashkey": "fd002698c69d3e941791b06dc0d1a51a17b08856",
    "expiration": "2024-10-04T18:13:05.116Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 399,
  "fields": {
    "challenge": "QTOD",
    "response": "qtod",
    "hashkey": "25fc5ac19ace950efaa5b78ca9450faeef24afe5",
    "expiration": "2024-10-04T18:13:15.013Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 400,
  "fields": {
    "challenge": "RWQO",
    "response": "rwqo",
    "hashkey": "810c3fa551160a411d45e3475b53993fae2e7fec",
    "expiration": "2024-10-04T18:13:20.277Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 401,
  "fields": {
    "challenge": "LNAW",
    "response": "lnaw",
    "hashkey": "448df64cccb388009aafbb5a86ea7b95978bbf51",
    "expiration": "2024-10-04T18:13:27.248Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 402,
  "fields": {
    "challenge": "MQWB",
    "response": "mqwb",
    "hashkey": "5e990798c607ddc8cdb0c78338fee33c8dbff1e5",
    "expiration": "2024-10-04T18:13:29.092Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 403,
  "fields": {
    "challenge": "SUSZ",
    "response": "susz",
    "hashkey": "925f526a0d48a9cd96edaf03917e093b73a50f06",
    "expiration": "2024-10-05T11:21:33.511Z"
  }
},
{
  "model": "captcha.captchastore",
  "pk": 404,
  "fields": {
    "challenge": "AEED",
    "response": "aeed",
    "hashkey": "eb55aea083d643ed2be7ea0a268e639e653f6262",
    "expiration": "2024-10-05T11:21:38.761Z"
  }
},
{
  "model": "admin.logentry",
  "pk": 1,
  "fields": {
    "action_time": "2024-05-23T19:55:43.569Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "category"
    ],
    "object_id": "1",
    "object_repr": "Первая категория",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 2,
  "fields": {
    "action_time": "2024-05-23T19:56:12.024Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "1",
    "object_repr": "Первая статья",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 3,
  "fields": {
    "action_time": "2024-05-24T13:27:38.251Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "2",
    "object_repr": "Статья с картинкой",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 4,
  "fields": {
    "action_time": "2024-05-24T13:28:27.520Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "2",
    "object_repr": "Статья с картинкой",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 5,
  "fields": {
    "action_time": "2024-05-27T07:52:35.306Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "2",
    "object_repr": "Статья с картинкой",
    "action_flag": 3,
    "change_message": ""
  }
},
{
  "model": "admin.logentry",
  "pk": 6,
  "fields": {
    "action_time": "2024-05-27T07:52:35.349Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "1",
    "object_repr": "Первая статья",
    "action_flag": 3,
    "change_message": ""
  }
},
{
  "model": "admin.logentry",
  "pk": 7,
  "fields": {
    "action_time": "2024-05-27T07:52:47.341Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "category"
    ],
    "object_id": "1",
    "object_repr": "Первая категория",
    "action_flag": 3,
    "change_message": ""
  }
},
{
  "model": "admin.logentry",
  "pk": 8,
  "fields": {
    "action_time": "2024-05-27T07:53:08.201Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "category"
    ],
    "object_id": "2",
    "object_repr": "VS Code",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 9,
  "fields": {
    "action_time": "2024-05-27T08:13:54.485Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "3",
    "object_repr": "Топ-10 расширений VS Code для работы с Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 10,
  "fields": {
    "action_time": "2024-05-27T08:57:56.630Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "4",
    "object_repr": "Настройки VS Code для работы с Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 11,
  "fields": {
    "action_time": "2024-05-27T09:18:29.545Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "4",
    "object_repr": "Настройки VS Code для работы с Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 12,
  "fields": {
    "action_time": "2024-05-27T09:26:31.188Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "5",
    "object_repr": "Настройки Pylint для VS Code",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 13,
  "fields": {
    "action_time": "2024-05-27T09:35:16.737Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "category"
    ],
    "object_id": "3",
    "object_repr": "Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 14,
  "fields": {
    "action_time": "2024-05-27T09:58:48.152Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "6",
    "object_repr": "Создание виртуального окружения для проекта Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 15,
  "fields": {
    "action_time": "2024-05-30T14:49:28.681Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "7",
    "object_repr": "Установка Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 16,
  "fields": {
    "action_time": "2024-05-30T14:50:59.901Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "7",
    "object_repr": "Установка Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 17,
  "fields": {
    "action_time": "2024-05-30T15:09:37.856Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "7",
    "object_repr": "Установка Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 18,
  "fields": {
    "action_time": "2024-05-30T15:09:59.214Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "7",
    "object_repr": "Установка Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 19,
  "fields": {
    "action_time": "2024-05-30T15:13:46.497Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "6",
    "object_repr": "Создание виртуального окружения для проекта Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 20,
  "fields": {
    "action_time": "2024-05-30T15:21:40.522Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "7",
    "object_repr": "Установка Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 21,
  "fields": {
    "action_time": "2024-05-30T15:51:05.784Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "8",
    "object_repr": "Общий обзор Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 22,
  "fields": {
    "action_time": "2024-05-30T16:08:02.296Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "8",
    "object_repr": "Общий обзор Джанго",
    "action_flag": 2,
    "change_message": "[]"
  }
},
{
  "model": "admin.logentry",
  "pk": 23,
  "fields": {
    "action_time": "2024-05-30T16:33:57.307Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "8",
    "object_repr": "Общий обзор Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 24,
  "fields": {
    "action_time": "2024-05-30T16:34:22.626Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "8",
    "object_repr": "Общий обзор Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 25,
  "fields": {
    "action_time": "2024-05-31T10:50:27.363Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "9",
    "object_repr": "Создание проекта Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 26,
  "fields": {
    "action_time": "2024-05-31T10:58:56.334Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "9",
    "object_repr": "Создание проекта Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 27,
  "fields": {
    "action_time": "2024-05-31T11:05:48.683Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "9",
    "object_repr": "Создание проекта Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 28,
  "fields": {
    "action_time": "2024-05-31T11:10:48.881Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "4",
    "object_repr": "Настройки VS Code для работы с Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0424\\u043e\\u0442\\u043e\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 29,
  "fields": {
    "action_time": "2024-05-31T11:11:31.671Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "5",
    "object_repr": "Настройки Pylint для VS Code",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0424\\u043e\\u0442\\u043e\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 30,
  "fields": {
    "action_time": "2024-05-31T11:22:36.602Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "10",
    "object_repr": "Выбрать интерпретатор в VS Code",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 31,
  "fields": {
    "action_time": "2024-05-31T11:33:03.032Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "10",
    "object_repr": "Выбрать интерпретатор в VS Code",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 32,
  "fields": {
    "action_time": "2024-05-31T11:37:40.690Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "10",
    "object_repr": "Выбрать интерпретатор в VS Code",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 33,
  "fields": {
    "action_time": "2024-06-03T14:16:07.717Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "category"
    ],
    "object_id": "4",
    "object_repr": "База данных",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 34,
  "fields": {
    "action_time": "2024-06-03T14:53:08.592Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "11",
    "object_repr": "ACID",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 35,
  "fields": {
    "action_time": "2024-06-03T14:53:32.075Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "11",
    "object_repr": "ACID",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0424\\u043e\\u0442\\u043e\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 36,
  "fields": {
    "action_time": "2024-06-03T14:54:37.219Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "11",
    "object_repr": "ACID",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0424\\u043e\\u0442\\u043e\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 37,
  "fields": {
    "action_time": "2024-06-03T16:28:24.914Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "12",
    "object_repr": "Настройка соединения с базой данных в Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 38,
  "fields": {
    "action_time": "2024-06-05T08:28:24.285Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "12",
    "object_repr": "Настройка соединения с базой данных в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 39,
  "fields": {
    "action_time": "2024-06-05T08:56:56.016Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "12",
    "object_repr": "Настройка соединения с базой данных в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 40,
  "fields": {
    "action_time": "2024-06-05T09:09:09.230Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "13",
    "object_repr": "Применение первоначальных миграций",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 41,
  "fields": {
    "action_time": "2024-06-05T10:53:05.664Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "14",
    "object_repr": "Создание пользователя и базы данных PostgreSQL",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 42,
  "fields": {
    "action_time": "2024-06-05T10:56:04.775Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "13",
    "object_repr": "Применение первоначальных миграций",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 43,
  "fields": {
    "action_time": "2024-06-10T18:06:54.263Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "15",
    "object_repr": "Запуск сервера разработки Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 44,
  "fields": {
    "action_time": "2024-06-10T18:09:10.130Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "15",
    "object_repr": "Запуск сервера разработки Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 45,
  "fields": {
    "action_time": "2024-06-10T18:14:08.811Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "15",
    "object_repr": "Запуск сервера разработки Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 46,
  "fields": {
    "action_time": "2024-06-10T18:16:23.375Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "15",
    "object_repr": "Запуск сервера разработки Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 47,
  "fields": {
    "action_time": "2024-06-10T18:19:07.158Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "15",
    "object_repr": "Запуск сервера разработки Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 48,
  "fields": {
    "action_time": "2024-06-10T18:23:09.924Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "15",
    "object_repr": "Запуск сервера разработки Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 49,
  "fields": {
    "action_time": "2024-06-10T18:39:56.632Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "16",
    "object_repr": "Настроечные параметры проекта",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 50,
  "fields": {
    "action_time": "2024-06-10T18:40:37.746Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "16",
    "object_repr": "Настроечные параметры проекта",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 51,
  "fields": {
    "action_time": "2024-06-10T18:48:47.886Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "17",
    "object_repr": "Создание приложения Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 52,
  "fields": {
    "action_time": "2024-06-10T18:51:04.241Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "17",
    "object_repr": "Создание приложения Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 53,
  "fields": {
    "action_time": "2024-06-10T18:56:37.131Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "17",
    "object_repr": "Создание приложения Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 54,
  "fields": {
    "action_time": "2024-06-10T18:59:27.380Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "17",
    "object_repr": "Создание приложения Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 55,
  "fields": {
    "action_time": "2024-06-10T19:16:08.609Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "18",
    "object_repr": "Создание модели в Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 56,
  "fields": {
    "action_time": "2024-06-10T19:17:59.432Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "18",
    "object_repr": "Создание модели в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 57,
  "fields": {
    "action_time": "2024-06-10T19:22:01.184Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "18",
    "object_repr": "Создание модели в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 58,
  "fields": {
    "action_time": "2024-06-10T19:25:28.567Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "17",
    "object_repr": "Создание приложения Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 59,
  "fields": {
    "action_time": "2024-06-10T19:41:24.738Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "18",
    "object_repr": "Создание модели в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 60,
  "fields": {
    "action_time": "2024-06-10T19:42:21.885Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "18",
    "object_repr": "Создание модели в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 61,
  "fields": {
    "action_time": "2024-06-10T19:57:27.060Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "19",
    "object_repr": "Добавление полей даты/времени в модель Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 62,
  "fields": {
    "action_time": "2024-06-12T18:43:01.523Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "20",
    "object_repr": "Создание Git репозитория для проекта Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 63,
  "fields": {
    "action_time": "2024-06-12T19:14:57.299Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "category"
    ],
    "object_id": "5",
    "object_repr": "Git",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 64,
  "fields": {
    "action_time": "2024-06-12T19:15:42.933Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "20",
    "object_repr": "Создание Git репозитория для проекта Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\", \"\\u041a\\u0430\\u0442\\u0435\\u0433\\u043e\\u0440\\u0438\\u044f\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 65,
  "fields": {
    "action_time": "2024-06-12T19:16:11.474Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "20",
    "object_repr": "Создание Git репозитория для проекта Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 66,
  "fields": {
    "action_time": "2024-06-14T15:28:44.315Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "21",
    "object_repr": "Связка локального Git репозитория с Github",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 67,
  "fields": {
    "action_time": "2024-06-14T15:36:25.399Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "21",
    "object_repr": "Связка локального Git репозитория с Github",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 68,
  "fields": {
    "action_time": "2024-06-14T15:38:09.631Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "21",
    "object_repr": "Связка локального Git репозитория с Github",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 69,
  "fields": {
    "action_time": "2024-06-14T15:39:12.632Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "21",
    "object_repr": "Связка локального Git репозитория с Github",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 70,
  "fields": {
    "action_time": "2024-06-14T15:43:56.884Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "19",
    "object_repr": "Добавление полей даты/времени в модель Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\", \"\\u0424\\u043e\\u0442\\u043e\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 71,
  "fields": {
    "action_time": "2024-06-14T15:44:11.963Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "19",
    "object_repr": "Добавление полей даты/времени в модель Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 72,
  "fields": {
    "action_time": "2024-06-14T15:47:51.986Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "22",
    "object_repr": "Определение предустановленного порядка  сортировки",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 73,
  "fields": {
    "action_time": "2024-06-14T16:20:41.489Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "23",
    "object_repr": "Добавление индекса базы данных",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 74,
  "fields": {
    "action_time": "2024-06-14T16:24:29.867Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "23",
    "object_repr": "Добавление индекса базы данных",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 75,
  "fields": {
    "action_time": "2024-06-14T16:25:13.961Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "19",
    "object_repr": "Добавление полей даты/времени в модель Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 76,
  "fields": {
    "action_time": "2024-06-14T16:51:40.649Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "24",
    "object_repr": "Добавление поля статуса",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 77,
  "fields": {
    "action_time": "2024-06-14T16:52:45.816Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "24",
    "object_repr": "Добавление поля статуса",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 78,
  "fields": {
    "action_time": "2024-06-18T13:33:44.484Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "25",
    "object_repr": "Добавление взаимосвязи многие-к-одному",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 79,
  "fields": {
    "action_time": "2024-06-18T13:36:04.662Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "25",
    "object_repr": "Добавление взаимосвязи многие-к-одному",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0424\\u043e\\u0442\\u043e\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 80,
  "fields": {
    "action_time": "2024-06-18T13:36:15.656Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "25",
    "object_repr": "Добавление взаимосвязи многие-к-одному",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0424\\u043e\\u0442\\u043e\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 81,
  "fields": {
    "action_time": "2024-06-18T13:52:49.003Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "25",
    "object_repr": "Добавление взаимосвязи многие-к-одному",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 82,
  "fields": {
    "action_time": "2024-06-18T13:54:18.541Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "25",
    "object_repr": "Добавление взаимосвязи многие-к-одному",
    "action_flag": 2,
    "change_message": "[]"
  }
},
{
  "model": "admin.logentry",
  "pk": 83,
  "fields": {
    "action_time": "2024-06-18T14:09:02.771Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "26",
    "object_repr": "Создание Суперпользователя",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 84,
  "fields": {
    "action_time": "2024-06-18T14:47:56.132Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "27",
    "object_repr": "Создание сайта администрирования для моделей",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 85,
  "fields": {
    "action_time": "2024-06-18T14:53:29.523Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "27",
    "object_repr": "Создание сайта администрирования для моделей",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 86,
  "fields": {
    "action_time": "2024-06-18T14:54:41.363Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "27",
    "object_repr": "Создание сайта администрирования для моделей",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 87,
  "fields": {
    "action_time": "2024-06-18T14:58:11.907Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "27",
    "object_repr": "Создание сайта администрирования для моделей",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 88,
  "fields": {
    "action_time": "2024-06-19T14:05:47.573Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "28",
    "object_repr": "Настройка административной панели Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 89,
  "fields": {
    "action_time": "2024-06-19T14:09:58.669Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "28",
    "object_repr": "Настройка административной панели Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 90,
  "fields": {
    "action_time": "2024-06-19T14:30:09.018Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "29",
    "object_repr": "Работа с наборами запросов QuerySet  и менеджерами",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 91,
  "fields": {
    "action_time": "2024-06-19T14:32:58.289Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "29",
    "object_repr": "Базовая работа с наборами запросов QuerySet и SQL-менеджерами",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0417\\u0430\\u0433\\u043e\\u043b\\u043e\\u0432\\u043e\\u043a\", \"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 92,
  "fields": {
    "action_time": "2024-06-19T14:47:29.914Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "30",
    "object_repr": "Работа с ORM Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 93,
  "fields": {
    "action_time": "2024-06-19T15:35:40.335Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "31",
    "object_repr": "Создание модельных менеджеров",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 94,
  "fields": {
    "action_time": "2024-06-19T15:44:43.850Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "31",
    "object_repr": "Создание модельных менеджеров",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 95,
  "fields": {
    "action_time": "2024-06-21T15:47:56.815Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "32",
    "object_repr": "Разработка представлений списка и детальной информации в Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 96,
  "fields": {
    "action_time": "2024-06-21T16:10:13.764Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "32",
    "object_repr": "Разработка представлений списка и детальной информации в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 97,
  "fields": {
    "action_time": "2024-06-21T18:30:03.645Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "33",
    "object_repr": "Функция get_object_or_404",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 98,
  "fields": {
    "action_time": "2024-06-21T18:55:51.786Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "34",
    "object_repr": "Добавление шаблонов URL-адресов представлений",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 99,
  "fields": {
    "action_time": "2024-06-24T18:08:22.129Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "34",
    "object_repr": "Добавление шаблонов URL-адресов представлений",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 100,
  "fields": {
    "action_time": "2024-06-24T18:11:40.846Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "34",
    "object_repr": "Добавление шаблонов URL-адресов представлений",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 101,
  "fields": {
    "action_time": "2024-06-24T18:14:02.690Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "34",
    "object_repr": "Добавление шаблонов URL-адресов представлений",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 102,
  "fields": {
    "action_time": "2024-06-24T18:14:32.163Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "34",
    "object_repr": "Добавление шаблонов URL-адресов представлений",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 103,
  "fields": {
    "action_time": "2024-06-24T18:15:39.028Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "34",
    "object_repr": "Добавление шаблонов URL-адресов представлений",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 104,
  "fields": {
    "action_time": "2024-06-24T18:19:36.752Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "34",
    "object_repr": "Добавление шаблонов URL-адресов представлений",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 105,
  "fields": {
    "action_time": "2024-06-24T18:49:48.245Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "35",
    "object_repr": "Создание шаблонов представлений",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 106,
  "fields": {
    "action_time": "2024-06-27T19:05:27.116Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "35",
    "object_repr": "Создание шаблонов представлений",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 107,
  "fields": {
    "action_time": "2024-06-27T19:13:58.839Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "35",
    "object_repr": "Создание шаблонов представлений",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 108,
  "fields": {
    "action_time": "2024-06-27T21:10:58.035Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "36",
    "object_repr": "Статические файлы в Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 109,
  "fields": {
    "action_time": "2024-06-27T21:31:32.353Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "36",
    "object_repr": "Статические файлы в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 110,
  "fields": {
    "action_time": "2024-06-27T21:38:40.254Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "36",
    "object_repr": "Статические файлы в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 111,
  "fields": {
    "action_time": "2024-06-28T15:14:12.531Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "36",
    "object_repr": "Статические файлы в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 112,
  "fields": {
    "action_time": "2024-06-28T15:40:32.036Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "36",
    "object_repr": "Статические файлы в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 113,
  "fields": {
    "action_time": "2024-06-28T16:47:36.834Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "37",
    "object_repr": "Интернационализация и локализация в Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 114,
  "fields": {
    "action_time": "2024-06-28T17:34:34.788Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "37",
    "object_repr": "Интернационализация и локализация в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 115,
  "fields": {
    "action_time": "2024-07-09T15:13:44.075Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "37",
    "object_repr": "Интернационализация и локализация в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 116,
  "fields": {
    "action_time": "2024-07-09T15:28:35.104Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "37",
    "object_repr": "Интернационализация и локализация в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 117,
  "fields": {
    "action_time": "2024-07-09T15:42:36.471Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "38",
    "object_repr": "Цикл запроса/ответа в Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 118,
  "fields": {
    "action_time": "2024-07-09T16:05:42.944Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "39",
    "object_repr": "Канонические URL-адреса для моделей",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 119,
  "fields": {
    "action_time": "2024-07-09T16:28:53.162Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "40",
    "object_repr": "Создание SEO-url в Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 120,
  "fields": {
    "action_time": "2024-07-09T21:02:43.427Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "40",
    "object_repr": "Создание SEO-url в Джанго",
    "action_flag": 2,
    "change_message": "[]"
  }
},
{
  "model": "admin.logentry",
  "pk": 121,
  "fields": {
    "action_time": "2024-07-12T19:38:40.697Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "40",
    "object_repr": "Создание SEO-url в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 122,
  "fields": {
    "action_time": "2024-07-12T19:49:59.554Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "40",
    "object_repr": "Создание SEO-url в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 123,
  "fields": {
    "action_time": "2024-07-12T19:52:03.104Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "40",
    "object_repr": "Создание SEO-url в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 124,
  "fields": {
    "action_time": "2024-07-12T20:04:41.000Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "41",
    "object_repr": "Добавление постраничной навигации в Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 125,
  "fields": {
    "action_time": "2024-07-12T20:17:23.930Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "41",
    "object_repr": "Добавление постраничной навигации в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 126,
  "fields": {
    "action_time": "2024-07-16T18:31:05.638Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "42",
    "object_repr": "Разработка представлений Django на основе классов",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 127,
  "fields": {
    "action_time": "2024-07-16T19:39:47.427Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "43",
    "object_repr": "Разработка форм с помощью Django",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 128,
  "fields": {
    "action_time": "2024-07-16T19:52:03.602Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "43",
    "object_repr": "Разработка форм с помощью Django",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 129,
  "fields": {
    "action_time": "2024-07-17T20:34:28.606Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "44",
    "object_repr": "Отправка электронных писем с помощью Django",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 130,
  "fields": {
    "action_time": "2024-07-18T14:26:58.277Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "category"
    ],
    "object_id": "6",
    "object_repr": "Технологии",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 131,
  "fields": {
    "action_time": "2024-07-18T14:36:18.572Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "45",
    "object_repr": "Сетевая модель OSI",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 132,
  "fields": {
    "action_time": "2024-07-18T15:59:48.429Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "46",
    "object_repr": "SSL и TLS",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 133,
  "fields": {
    "action_time": "2024-07-19T15:51:40.754Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "44",
    "object_repr": "Отправка электронных писем с помощью Django",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 134,
  "fields": {
    "action_time": "2024-07-19T16:39:54.760Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "44",
    "object_repr": "Отправка электронных писем с помощью Django",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 135,
  "fields": {
    "action_time": "2024-07-19T16:54:54.352Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "44",
    "object_repr": "Отправка электронных писем с помощью Django",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 136,
  "fields": {
    "action_time": "2024-07-22T14:17:27.635Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "44",
    "object_repr": "Отправка электронных писем с помощью Django",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 137,
  "fields": {
    "action_time": "2024-07-22T15:02:42.220Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "44",
    "object_repr": "Отправка электронных писем с помощью Django",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 138,
  "fields": {
    "action_time": "2024-07-22T18:14:03.027Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "44",
    "object_repr": "Отправка электронных писем с помощью Django",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 139,
  "fields": {
    "action_time": "2024-07-22T18:24:03.643Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "44",
    "object_repr": "Отправка электронных писем с помощью Django",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 140,
  "fields": {
    "action_time": "2024-07-22T19:52:59.192Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "47",
    "object_repr": "CSRF уязвимость и защита в Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 141,
  "fields": {
    "action_time": "2024-07-23T13:59:25.785Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "48",
    "object_repr": "Разработка системы комментариев в Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 142,
  "fields": {
    "action_time": "2024-07-25T19:28:32.652Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "49",
    "object_repr": "Получение данных из связанных таблиц в Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 143,
  "fields": {
    "action_time": "2024-07-25T19:34:13.985Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "48",
    "object_repr": "Разработка системы комментариев в Джанго (Создание форм из моделей)",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0417\\u0430\\u0433\\u043e\\u043b\\u043e\\u0432\\u043e\\u043a\", \"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 144,
  "fields": {
    "action_time": "2024-07-25T20:01:36.482Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "48",
    "object_repr": "Разработка системы комментариев в Джанго (Создание форм из моделей)",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 145,
  "fields": {
    "action_time": "2024-07-26T19:03:13.021Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "48",
    "object_repr": "Разработка системы комментариев в Джанго (Создание форм из моделей)",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 146,
  "fields": {
    "action_time": "2024-09-04T14:52:05.303Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "19",
    "object_repr": "Добавление полей даты/времени в модель Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 147,
  "fields": {
    "action_time": "2024-09-04T16:13:20.714Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "23",
    "object_repr": "Добавление индекса базы данных",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 148,
  "fields": {
    "action_time": "2024-09-04T16:37:40.793Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "50",
    "object_repr": "Полезный Джанго модуль - django-extensions (shell_plus)",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 149,
  "fields": {
    "action_time": "2024-09-04T16:41:24.126Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "24",
    "object_repr": "Добавление поля статуса",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 150,
  "fields": {
    "action_time": "2024-09-04T20:44:56.581Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "25",
    "object_repr": "Добавление взаимосвязи многие-к-одному",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 151,
  "fields": {
    "action_time": "2024-09-04T20:45:29.055Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "25",
    "object_repr": "Добавление взаимосвязи многие-к-одному",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 152,
  "fields": {
    "action_time": "2024-09-04T21:03:11.230Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "32",
    "object_repr": "Разработка представлений списка и детальной информации в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 153,
  "fields": {
    "action_time": "2024-09-04T21:36:38.640Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "34",
    "object_repr": "Добавление шаблонов URL-адресов представлений",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 154,
  "fields": {
    "action_time": "2024-09-06T15:54:14.515Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "35",
    "object_repr": "Создание шаблонов представлений",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 155,
  "fields": {
    "action_time": "2024-09-06T16:50:41.889Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "39",
    "object_repr": "Канонические URL-адреса для моделей",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 156,
  "fields": {
    "action_time": "2024-09-06T17:15:42.836Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "41",
    "object_repr": "Добавление постраничной навигации в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 157,
  "fields": {
    "action_time": "2024-09-06T17:19:28.413Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "41",
    "object_repr": "Добавление постраничной навигации в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 158,
  "fields": {
    "action_time": "2024-09-06T18:22:59.762Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "48",
    "object_repr": "Разработка системы комментариев в Джанго (Создание форм из моделей)",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 159,
  "fields": {
    "action_time": "2024-09-06T21:01:55.936Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "51",
    "object_repr": "Тегирование в Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 160,
  "fields": {
    "action_time": "2024-09-07T09:48:43.182Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "51",
    "object_repr": "Тегирование в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 161,
  "fields": {
    "action_time": "2024-09-07T18:00:48.350Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "51",
    "object_repr": "Тегирование в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 162,
  "fields": {
    "action_time": "2024-09-07T20:11:39.941Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "51",
    "object_repr": "Тегирование в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 163,
  "fields": {
    "action_time": "2024-09-07T21:13:22.056Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "51",
    "object_repr": "Тегирование в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 164,
  "fields": {
    "action_time": "2024-09-08T08:07:23.538Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "52",
    "object_repr": "Файл не реагирует на добавление в .gitignore",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 165,
  "fields": {
    "action_time": "2024-09-08T15:25:05.240Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "1",
    "object_repr": "gitignore",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 166,
  "fields": {
    "action_time": "2024-09-08T15:25:13.632Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "52",
    "object_repr": "Файл не реагирует на добавление в .gitignore",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 167,
  "fields": {
    "action_time": "2024-09-08T15:26:31.665Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "2",
    "object_repr": "теги",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 168,
  "fields": {
    "action_time": "2024-09-08T15:26:44.583Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "3",
    "object_repr": "django-taggit",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 169,
  "fields": {
    "action_time": "2024-09-08T15:27:17.821Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "4",
    "object_repr": "GenericForeignKey",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 170,
  "fields": {
    "action_time": "2024-09-08T15:27:31.626Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "51",
    "object_repr": "Тегирование в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 171,
  "fields": {
    "action_time": "2024-09-08T15:28:05.563Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "5",
    "object_repr": "django-extensions",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 172,
  "fields": {
    "action_time": "2024-09-08T15:28:17.258Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "6",
    "object_repr": "shell_plus",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 173,
  "fields": {
    "action_time": "2024-09-08T15:28:24.339Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "7",
    "object_repr": "shell",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 174,
  "fields": {
    "action_time": "2024-09-08T15:28:34.382Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "50",
    "object_repr": "Полезный Джанго модуль - django-extensions (shell_plus)",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 175,
  "fields": {
    "action_time": "2024-09-08T15:29:01.408Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "8",
    "object_repr": "related_name",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 176,
  "fields": {
    "action_time": "2024-09-08T15:29:25.372Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "9",
    "object_repr": "ForeignKey",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 177,
  "fields": {
    "action_time": "2024-09-08T15:29:38.111Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "49",
    "object_repr": "Получение данных из связанных таблиц в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 178,
  "fields": {
    "action_time": "2024-09-08T15:30:13.391Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "10",
    "object_repr": "ModelForm",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 179,
  "fields": {
    "action_time": "2024-09-08T15:31:02.470Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "11",
    "object_repr": "comments",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 180,
  "fields": {
    "action_time": "2024-09-08T15:31:29.301Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "12",
    "object_repr": "формы",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 181,
  "fields": {
    "action_time": "2024-09-08T15:32:15.114Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "13",
    "object_repr": "require",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 182,
  "fields": {
    "action_time": "2024-09-08T15:32:19.554Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "48",
    "object_repr": "Разработка системы комментариев в Джанго (Создание форм из моделей)",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 183,
  "fields": {
    "action_time": "2024-09-08T15:32:56.826Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "14",
    "object_repr": "уязвимость",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 184,
  "fields": {
    "action_time": "2024-09-08T15:33:05.524Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "15",
    "object_repr": "csrf",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 185,
  "fields": {
    "action_time": "2024-09-08T15:33:48.594Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "16",
    "object_repr": "MIDDLEWARE",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 186,
  "fields": {
    "action_time": "2024-09-08T15:33:56.754Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "47",
    "object_repr": "CSRF уязвимость и защита в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 187,
  "fields": {
    "action_time": "2024-09-08T15:34:19.941Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "17",
    "object_repr": "ssl",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 188,
  "fields": {
    "action_time": "2024-09-08T15:34:25.747Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "18",
    "object_repr": "tls",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 189,
  "fields": {
    "action_time": "2024-09-08T15:34:42.544Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "46",
    "object_repr": "SSL и TLS",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 190,
  "fields": {
    "action_time": "2024-09-08T15:35:04.058Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "19",
    "object_repr": "OSI",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 191,
  "fields": {
    "action_time": "2024-09-08T15:35:44.425Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "20",
    "object_repr": "сети",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 192,
  "fields": {
    "action_time": "2024-09-08T15:35:46.910Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "45",
    "object_repr": "Сетевая модель OSI",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 193,
  "fields": {
    "action_time": "2024-09-08T15:36:10.912Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "21",
    "object_repr": "settings",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 194,
  "fields": {
    "action_time": "2024-09-08T15:36:22.298Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "22",
    "object_repr": "email",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 195,
  "fields": {
    "action_time": "2024-09-08T15:37:31.985Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "44",
    "object_repr": "Отправка электронных писем с помощью Django",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 196,
  "fields": {
    "action_time": "2024-09-08T15:38:31.911Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "43",
    "object_repr": "Разработка форм с помощью Django",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 197,
  "fields": {
    "action_time": "2024-09-08T15:38:56.857Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "23",
    "object_repr": "view",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 198,
  "fields": {
    "action_time": "2024-09-08T15:39:04.468Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "24",
    "object_repr": "классы",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 199,
  "fields": {
    "action_time": "2024-09-08T15:39:22.406Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "25",
    "object_repr": "pagination",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 200,
  "fields": {
    "action_time": "2024-09-08T15:39:24.808Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "42",
    "object_repr": "Разработка представлений Django на основе классов",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 201,
  "fields": {
    "action_time": "2024-09-08T15:40:21.965Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "41",
    "object_repr": "Добавление постраничной навигации в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 202,
  "fields": {
    "action_time": "2024-09-08T15:40:54.263Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "26",
    "object_repr": "URL",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 203,
  "fields": {
    "action_time": "2024-09-08T15:41:02.615Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "27",
    "object_repr": "SEO",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 204,
  "fields": {
    "action_time": "2024-09-08T15:41:13.919Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "28",
    "object_repr": "slug",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 205,
  "fields": {
    "action_time": "2024-09-08T15:41:18.318Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "40",
    "object_repr": "Создание SEO-url в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 206,
  "fields": {
    "action_time": "2024-09-08T15:42:13.263Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "29",
    "object_repr": "namespace",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 207,
  "fields": {
    "action_time": "2024-09-08T15:42:33.507Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "30",
    "object_repr": "reverse",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 208,
  "fields": {
    "action_time": "2024-09-08T15:42:36.375Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "39",
    "object_repr": "Канонические URL-адреса для моделей",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 209,
  "fields": {
    "action_time": "2024-09-08T15:43:06.188Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "31",
    "object_repr": "request",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 210,
  "fields": {
    "action_time": "2024-09-08T15:43:13.270Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "32",
    "object_repr": "response",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 211,
  "fields": {
    "action_time": "2024-09-08T15:43:16.587Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "38",
    "object_repr": "Цикл запроса/ответа в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 212,
  "fields": {
    "action_time": "2024-09-08T15:43:40.490Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "33",
    "object_repr": "translation",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 213,
  "fields": {
    "action_time": "2024-09-08T15:44:15.513Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "34",
    "object_repr": "locale",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 214,
  "fields": {
    "action_time": "2024-09-08T15:44:18.564Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "37",
    "object_repr": "Интернационализация и локализация в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 215,
  "fields": {
    "action_time": "2024-09-08T15:44:39.540Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "35",
    "object_repr": "static",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 216,
  "fields": {
    "action_time": "2024-09-08T15:44:46.283Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "36",
    "object_repr": "styles",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 217,
  "fields": {
    "action_time": "2024-09-08T15:45:22.555Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "37",
    "object_repr": "load",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 218,
  "fields": {
    "action_time": "2024-09-08T15:45:25.219Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "36",
    "object_repr": "Статические файлы в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 219,
  "fields": {
    "action_time": "2024-09-08T15:45:43.387Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "38",
    "object_repr": "templates",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 220,
  "fields": {
    "action_time": "2024-09-08T15:46:18.566Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "35",
    "object_repr": "Создание шаблонов представлений",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 221,
  "fields": {
    "action_time": "2024-09-08T15:48:26.230Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "39",
    "object_repr": "конвертер",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 222,
  "fields": {
    "action_time": "2024-09-08T15:48:28.579Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "34",
    "object_repr": "Добавление шаблонов URL-адресов представлений",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 223,
  "fields": {
    "action_time": "2024-09-08T15:49:00.601Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "40",
    "object_repr": "shortcuts",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 224,
  "fields": {
    "action_time": "2024-09-08T15:49:27.399Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "41",
    "object_repr": "ORM",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 225,
  "fields": {
    "action_time": "2024-09-08T15:49:33.700Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "33",
    "object_repr": "Функция get_object_or_404",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 226,
  "fields": {
    "action_time": "2024-09-08T15:50:22.407Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "32",
    "object_repr": "Разработка представлений списка и детальной информации в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 227,
  "fields": {
    "action_time": "2024-09-08T15:50:49.891Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "34",
    "object_repr": "Добавление шаблонов URL-адресов представлений",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 228,
  "fields": {
    "action_time": "2024-09-08T15:51:13.880Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "42",
    "object_repr": "manager",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 229,
  "fields": {
    "action_time": "2024-09-08T15:51:30.013Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "31",
    "object_repr": "Создание модельных менеджеров",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 230,
  "fields": {
    "action_time": "2024-09-08T15:52:28.541Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "30",
    "object_repr": "Работа с ORM Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 231,
  "fields": {
    "action_time": "2024-09-08T15:52:58.232Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "29",
    "object_repr": "Базовая работа с наборами запросов QuerySet и SQL-менеджерами",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 232,
  "fields": {
    "action_time": "2024-09-08T15:53:25.021Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "43",
    "object_repr": "admin",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 233,
  "fields": {
    "action_time": "2024-09-08T15:53:27.248Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "28",
    "object_repr": "Настройка административной панели Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 234,
  "fields": {
    "action_time": "2024-09-08T15:53:49.172Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "44",
    "object_repr": "user",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 235,
  "fields": {
    "action_time": "2024-09-08T15:53:51.836Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "26",
    "object_repr": "Создание Суперпользователя",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 236,
  "fields": {
    "action_time": "2024-09-08T15:53:59.084Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "27",
    "object_repr": "Создание сайта администрирования для моделей",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 237,
  "fields": {
    "action_time": "2024-09-08T15:54:41.981Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "25",
    "object_repr": "Добавление взаимосвязи многие-к-одному",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 238,
  "fields": {
    "action_time": "2024-09-08T15:55:18.885Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "45",
    "object_repr": "TextChoices",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 239,
  "fields": {
    "action_time": "2024-09-08T15:55:20.840Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "24",
    "object_repr": "Добавление поля статуса",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 240,
  "fields": {
    "action_time": "2024-09-08T15:55:46.315Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "46",
    "object_repr": "index",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 241,
  "fields": {
    "action_time": "2024-09-08T15:55:48.258Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "23",
    "object_repr": "Добавление индекса базы данных",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 242,
  "fields": {
    "action_time": "2024-09-08T15:56:13.784Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "47",
    "object_repr": "ordering",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 243,
  "fields": {
    "action_time": "2024-09-08T15:56:15.413Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "22",
    "object_repr": "Определение предустановленного порядка  сортировки",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 244,
  "fields": {
    "action_time": "2024-09-08T15:56:59.123Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "48",
    "object_repr": "Github",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 245,
  "fields": {
    "action_time": "2024-09-08T15:57:01.201Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "21",
    "object_repr": "Связка локального Git репозитория с Github",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 246,
  "fields": {
    "action_time": "2024-09-08T15:57:48.649Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "49",
    "object_repr": "VS code",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 247,
  "fields": {
    "action_time": "2024-09-08T15:57:51.067Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "20",
    "object_repr": "Создание Git репозитория для проекта Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 248,
  "fields": {
    "action_time": "2024-09-08T15:58:39.530Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "50",
    "object_repr": "date",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 249,
  "fields": {
    "action_time": "2024-09-08T15:59:08.936Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "19",
    "object_repr": "Добавление полей даты/времени в модель Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 250,
  "fields": {
    "action_time": "2024-09-08T16:00:06.371Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "51",
    "object_repr": "models",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 251,
  "fields": {
    "action_time": "2024-09-08T16:00:25.365Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "52",
    "object_repr": "migrations",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 252,
  "fields": {
    "action_time": "2024-09-08T16:00:27.223Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "18",
    "object_repr": "Создание модели в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 253,
  "fields": {
    "action_time": "2024-09-08T16:00:54.464Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "53",
    "object_repr": "приложение",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 254,
  "fields": {
    "action_time": "2024-09-08T16:00:56.332Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "17",
    "object_repr": "Создание приложения Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 255,
  "fields": {
    "action_time": "2024-09-08T16:01:22.248Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "16",
    "object_repr": "Настроечные параметры проекта",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 256,
  "fields": {
    "action_time": "2024-09-08T16:01:38.133Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "54",
    "object_repr": "tools",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 257,
  "fields": {
    "action_time": "2024-09-08T16:01:40.040Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "15",
    "object_repr": "Запуск сервера разработки Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 258,
  "fields": {
    "action_time": "2024-09-08T16:02:07.807Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "55",
    "object_repr": "PostgreSQL",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 259,
  "fields": {
    "action_time": "2024-09-08T16:02:09.346Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "14",
    "object_repr": "Создание пользователя и базы данных PostgreSQL",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 260,
  "fields": {
    "action_time": "2024-09-08T16:02:31.523Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "13",
    "object_repr": "Применение первоначальных миграций",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 261,
  "fields": {
    "action_time": "2024-09-08T16:03:17.728Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "12",
    "object_repr": "Настройка соединения с базой данных в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 262,
  "fields": {
    "action_time": "2024-09-08T16:03:34.211Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "56",
    "object_repr": "ACID",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 263,
  "fields": {
    "action_time": "2024-09-08T16:03:45.032Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "11",
    "object_repr": "ACID",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 264,
  "fields": {
    "action_time": "2024-09-08T16:04:12.158Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "10",
    "object_repr": "Выбрать интерпретатор в VS Code",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 265,
  "fields": {
    "action_time": "2024-09-08T16:36:25.736Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "50",
    "object_repr": "Полезный Джанго модуль - django-extensions (shell_plus)",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 266,
  "fields": {
    "action_time": "2024-09-08T18:14:56.067Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "51",
    "object_repr": "Тегирование в Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 267,
  "fields": {
    "action_time": "2024-09-08T18:21:13.893Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "53",
    "object_repr": "Имя столбца в таблице админ-панели Джанго",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 268,
  "fields": {
    "action_time": "2024-09-08T18:23:29.845Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "53",
    "object_repr": "Имя столбца в таблице админ-панели Джанго",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"\\u0424\\u043e\\u0442\\u043e\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 269,
  "fields": {
    "action_time": "2024-09-09T13:44:35.601Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "54",
    "object_repr": "Вывод похожих статей",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 270,
  "fields": {
    "action_time": "2024-09-09T13:46:38.613Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "tagpost"
    ],
    "object_id": "57",
    "object_repr": "count",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 271,
  "fields": {
    "action_time": "2024-09-09T15:05:44.806Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "54",
    "object_repr": "Вывод похожих статей",
    "action_flag": 2,
    "change_message": "[{\"changed\": {\"fields\": [\"content\", \"\\u0422\\u0435\\u0433\\u0438\"]}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 272,
  "fields": {
    "action_time": "2024-09-14T12:13:01.338Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "55",
    "object_repr": "Тестирование",
    "action_flag": 1,
    "change_message": "[{\"added\": {}}]"
  }
},
{
  "model": "admin.logentry",
  "pk": 273,
  "fields": {
    "action_time": "2024-09-14T12:13:24.848Z",
    "user": [
      "admin"
    ],
    "content_type": [
      "blog",
      "article"
    ],
    "object_id": "55",
    "object_repr": "Тестирование",
    "action_flag": 3,
    "change_message": ""
  }
}
]
